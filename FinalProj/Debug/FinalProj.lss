
FinalProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006aa  00800100  0000353a  000035ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000353a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000176  008007aa  008007aa  00003c78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000487c  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000103b  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b1e  00000000  00000000  0000987b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a10  00000000  00000000  0000c39c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008bed  00000000  00000000  0000cdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e8f  00000000  00000000  00015999  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  00018828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003b03  00000000  00000000  00018ae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	00 00       	nop
       4:	ea c0       	rjmp	.+468    	; 0x1da <__bad_interrupt>
       6:	00 00       	nop
       8:	e8 c0       	rjmp	.+464    	; 0x1da <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__bad_interrupt>
       e:	00 00       	nop
      10:	e4 c0       	rjmp	.+456    	; 0x1da <__bad_interrupt>
      12:	00 00       	nop
      14:	e2 c0       	rjmp	.+452    	; 0x1da <__bad_interrupt>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__bad_interrupt>
      1a:	00 00       	nop
      1c:	de c0       	rjmp	.+444    	; 0x1da <__bad_interrupt>
      1e:	00 00       	nop
      20:	dc c0       	rjmp	.+440    	; 0x1da <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__vector_9>
      28:	d8 c0       	rjmp	.+432    	; 0x1da <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d6 c0       	rjmp	.+428    	; 0x1da <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c0       	rjmp	.+424    	; 0x1da <__bad_interrupt>
      32:	00 00       	nop
      34:	d2 c0       	rjmp	.+420    	; 0x1da <__bad_interrupt>
      36:	00 00       	nop
      38:	d0 c0       	rjmp	.+416    	; 0x1da <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ce c0       	rjmp	.+412    	; 0x1da <__bad_interrupt>
      3e:	00 00       	nop
      40:	cc c0       	rjmp	.+408    	; 0x1da <__bad_interrupt>
      42:	00 00       	nop
      44:	ca c0       	rjmp	.+404    	; 0x1da <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c1       	rjmp	.+560    	; 0x27a <__vector_18>
      4a:	00 00       	nop
      4c:	c6 c0       	rjmp	.+396    	; 0x1da <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c1       	rjmp	.+758    	; 0x348 <__vector_20>
      52:	00 00       	nop
      54:	c2 c0       	rjmp	.+388    	; 0x1da <__bad_interrupt>
      56:	00 00       	nop
      58:	c0 c0       	rjmp	.+384    	; 0x1da <__bad_interrupt>
      5a:	00 00       	nop
      5c:	be c0       	rjmp	.+380    	; 0x1da <__bad_interrupt>
      5e:	00 00       	nop
      60:	bc c0       	rjmp	.+376    	; 0x1da <__bad_interrupt>
      62:	00 00       	nop
      64:	ba c0       	rjmp	.+372    	; 0x1da <__bad_interrupt>
      66:	00 00       	nop
      68:	b8 c0       	rjmp	.+368    	; 0x1da <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b6 c0       	rjmp	.+364    	; 0x1da <__bad_interrupt>
      6e:	00 00       	nop
      70:	b4 c0       	rjmp	.+360    	; 0x1da <__bad_interrupt>
      72:	00 00       	nop
      74:	b2 c0       	rjmp	.+356    	; 0x1da <__bad_interrupt>
      76:	00 00       	nop
      78:	b0 c0       	rjmp	.+352    	; 0x1da <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ae c0       	rjmp	.+348    	; 0x1da <__bad_interrupt>
      7e:	00 00       	nop
      80:	ac c0       	rjmp	.+344    	; 0x1da <__bad_interrupt>
      82:	00 00       	nop
      84:	aa c0       	rjmp	.+340    	; 0x1da <__bad_interrupt>
      86:	00 00       	nop
      88:	a8 c0       	rjmp	.+336    	; 0x1da <__bad_interrupt>
      8a:	00 00       	nop
      8c:	da 05       	cpc	r29, r10
      8e:	c6 05       	cpc	r28, r6
      90:	28 06       	cpc	r2, r24
      92:	c6 05       	cpc	r28, r6
      94:	db 05       	cpc	r29, r11
      96:	c6 05       	cpc	r28, r6
      98:	c6 05       	cpc	r28, r6
      9a:	c6 05       	cpc	r28, r6
      9c:	e2 05       	cpc	r30, r2
      9e:	c6 05       	cpc	r28, r6
      a0:	c6 05       	cpc	r28, r6
      a2:	c6 05       	cpc	r28, r6
      a4:	d8 05       	cpc	r29, r8
      a6:	c6 05       	cpc	r28, r6
      a8:	2b 06       	cpc	r2, r27
      aa:	c6 05       	cpc	r28, r6
      ac:	c6 05       	cpc	r28, r6
      ae:	0c 06       	cpc	r0, r28
      b0:	fa 0e       	add	r15, r26
      b2:	08 0f       	add	r16, r24
      b4:	c1 0e       	add	r12, r17
      b6:	c1 0e       	add	r12, r17
      b8:	fc 0e       	add	r15, r28
      ba:	c1 0e       	add	r12, r17
      bc:	c1 0e       	add	r12, r17
      be:	c1 0e       	add	r12, r17
      c0:	02 0f       	add	r16, r18
      c2:	c1 0e       	add	r12, r17
      c4:	c1 0e       	add	r12, r17
      c6:	c1 0e       	add	r12, r17
      c8:	00 0f       	add	r16, r16
      ca:	c1 0e       	add	r12, r17
      cc:	c1 0e       	add	r12, r17
      ce:	06 0f       	add	r16, r22
      d0:	c1 0e       	add	r12, r17
      d2:	fe 0e       	add	r15, r30
      d4:	04 0f       	add	r16, r20
      d6:	07 2c       	mov	r0, r7
      d8:	7a a5       	ldd	r23, Y+42	; 0x2a
      da:	ba 6c       	ori	r27, 0xCA	; 202
      dc:	c5 90       	lpm	r12, Z+
      de:	da 3b       	cpi	r29, 0xBA	; 186
      e0:	93 65       	ori	r25, 0x53	; 83
      e2:	fc 8b       	std	Y+20, r31	; 0x14
      e4:	bc 53       	subi	r27, 0x3C	; 60
      e6:	f8 10       	cpse	r15, r8
      e8:	fd 3c       	cpi	r31, 0xCD	; 205
      ea:	56 92       	lac	Z, r5
      ec:	83 4d       	sbci	r24, 0xD3	; 211
      ee:	bd 87       	std	Y+13, r27	; 0x0d
      f0:	9d 3a       	cpi	r25, 0xAD	; 173
      f2:	b6 3d       	cpi	r27, 0xD6	; 214
      f4:	cb c9       	rjmp	.-3178   	; 0xfffff48c <__eeprom_end+0xff7ef48c>
      f6:	bf 5b       	subi	r27, 0xBF	; 191
      f8:	be 73       	andi	r27, 0x3E	; 62
      fa:	da 0f       	add	r29, r26
      fc:	c9 3f       	cpi	r28, 0xF9	; 249
      fe:	05 a8       	ldd	r0, Z+53	; 0x35
     100:	4c cd       	rjmp	.-1384   	; 0xfffffb9a <__eeprom_end+0xff7efb9a>
     102:	b2 d4       	rcall	.+2404   	; 0xa68 <autonomous+0x2c0>
     104:	4e b9       	out	0x0e, r20	; 14
     106:	38 36       	cpi	r19, 0x68	; 104
     108:	a9 02       	muls	r26, r25
     10a:	0c 50       	subi	r16, 0x0C	; 12
     10c:	b9 91       	ld	r27, Y+
     10e:	86 88       	ldd	r8, Z+22	; 0x16
     110:	08 3c       	cpi	r16, 0xC8	; 200
     112:	a6 aa       	std	Z+54, r10	; 0x36
     114:	aa 2a       	or	r10, r26
     116:	be 00       	.word	0x00be	; ????
     118:	00 00       	nop
     11a:	80 3f       	cpi	r24, 0xF0	; 240
     11c:	07 63       	ori	r16, 0x37	; 55
     11e:	42 36       	cpi	r20, 0x62	; 98
     120:	b7 9b       	sbis	0x16, 7	; 22
     122:	d8 a7       	std	Y+40, r29	; 0x28
     124:	1a 39       	cpi	r17, 0x9A	; 154
     126:	68 56       	subi	r22, 0x68	; 104
     128:	18 ae       	std	Y+56, r1	; 0x38
     12a:	ba ab       	std	Y+50, r27	; 0x32
     12c:	55 8c       	ldd	r5, Z+29	; 0x1d
     12e:	1d 3c       	cpi	r17, 0xCD	; 205
     130:	b7 cc       	rjmp	.-1682   	; 0xfffffaa0 <__eeprom_end+0xff7efaa0>
     132:	57 63       	ori	r21, 0x37	; 55
     134:	bd 6d       	ori	r27, 0xDD	; 221
     136:	ed fd       	.word	0xfded	; ????
     138:	75 3e       	cpi	r23, 0xE5	; 229
     13a:	f6 17       	cp	r31, r22
     13c:	72 31       	cpi	r23, 0x12	; 18
     13e:	bf 00       	.word	0x00bf	; ????
     140:	00 00       	nop
     142:	80 3f       	cpi	r24, 0xF0	; 240
     144:	08 00       	.word	0x0008	; ????
     146:	00 00       	nop
     148:	be 92       	st	-X, r11
     14a:	24 49       	sbci	r18, 0x94	; 148
     14c:	12 3e       	cpi	r17, 0xE2	; 226
     14e:	ab aa       	std	Y+51, r10	; 0x33
     150:	aa 2a       	or	r10, r26
     152:	be cd       	rjmp	.-1156   	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
     154:	cc cc       	rjmp	.-1640   	; 0xfffffaee <__eeprom_end+0xff7efaee>
     156:	4c 3e       	cpi	r20, 0xEC	; 236
     158:	00 00       	nop
     15a:	00 80       	ld	r0, Z
     15c:	be ab       	std	Y+54, r27	; 0x36
     15e:	aa aa       	std	Y+50, r10	; 0x32
     160:	aa 3e       	cpi	r26, 0xEA	; 234
     162:	00 00       	nop
     164:	00 00       	nop
     166:	bf 00       	.word	0x00bf	; ????
     168:	00 00       	nop
     16a:	80 3f       	cpi	r24, 0xF0	; 240
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	00 08       	sbc	r0, r0
     172:	41 78       	andi	r20, 0x81	; 129
     174:	d3 bb       	out	0x13, r29	; 19
     176:	43 87       	std	Z+11, r20	; 0x0b
     178:	d1 13       	cpse	r29, r17
     17a:	3d 19       	sub	r19, r13
     17c:	0e 3c       	cpi	r16, 0xCE	; 206
     17e:	c3 bd       	out	0x23, r28	; 35
     180:	42 82       	std	Z+2, r4	; 0x02
     182:	ad 2b       	or	r26, r29
     184:	3e 68       	ori	r19, 0x8E	; 142
     186:	ec 82       	std	Y+4, r14	; 0x04
     188:	76 be       	out	0x36, r7	; 54
     18a:	d9 8f       	std	Y+25, r29	; 0x19
     18c:	e1 a9       	ldd	r30, Z+49	; 0x31
     18e:	3e 4c       	sbci	r19, 0xCE	; 206
     190:	80 ef       	ldi	r24, 0xF0	; 240
     192:	ff be       	out	0x3f, r15	; 63
     194:	01 c4       	rjmp	.+2050   	; 0x998 <autonomous+0x1f0>
     196:	ff 7f       	andi	r31, 0xFF	; 255
     198:	3f 00       	.word	0x003f	; ????
     19a:	00 00       	nop
	...

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d0 e1       	ldi	r29, 0x10	; 16
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	17 e0       	ldi	r17, 0x07	; 7
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	ea e3       	ldi	r30, 0x3A	; 58
     1b2:	f5 e3       	ldi	r31, 0x35	; 53
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <__do_copy_data+0x14>
     1ba:	07 90       	elpm	r0, Z+
     1bc:	0d 92       	st	X+, r0
     1be:	aa 3a       	cpi	r26, 0xAA	; 170
     1c0:	b1 07       	cpc	r27, r17
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <__do_copy_data+0x10>

000001c4 <__do_clear_bss>:
     1c4:	29 e0       	ldi	r18, 0x09	; 9
     1c6:	aa ea       	ldi	r26, 0xAA	; 170
     1c8:	b7 e0       	ldi	r27, 0x07	; 7
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <.do_clear_bss_start>

000001cc <.do_clear_bss_loop>:
     1cc:	1d 92       	st	X+, r1

000001ce <.do_clear_bss_start>:
     1ce:	a0 32       	cpi	r26, 0x20	; 32
     1d0:	b2 07       	cpc	r27, r18
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <.do_clear_bss_loop>
     1d4:	43 d5       	rcall	.+2694   	; 0xc5c <main>
     1d6:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <_exit>

000001da <__bad_interrupt>:
     1da:	12 cf       	rjmp	.-476    	; 0x0 <__vectors>

000001dc <send_msg>:
 * The size of the data currently in the input buffer.
 * @return the size of the data in the input buffer
 */
int in_buffer_len(void) {
	return in_ptr - in_buffer;
}
     1dc:	20 91 0c 01 	lds	r18, 0x010C
     1e0:	30 91 0d 01 	lds	r19, 0x010D
     1e4:	23 2b       	or	r18, r19
     1e6:	d1 f3       	breq	.-12     	; 0x1dc <send_msg>
     1e8:	10 92 0d 01 	sts	0x010D, r1
     1ec:	10 92 0c 01 	sts	0x010C, r1
     1f0:	43 e6       	ldi	r20, 0x63	; 99
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	bc 01       	movw	r22, r24
     1f6:	86 eb       	ldi	r24, 0xB6	; 182
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strncpy>
     1fe:	86 eb       	ldi	r24, 0xB6	; 182
     200:	97 e0       	ldi	r25, 0x07	; 7
     202:	90 93 0f 01 	sts	0x010F, r25
     206:	80 93 0e 01 	sts	0x010E, r24
     20a:	5d 9b       	sbis	0x0b, 5	; 11
     20c:	fe cf       	rjmp	.-4      	; 0x20a <send_msg+0x2e>
     20e:	87 eb       	ldi	r24, 0xB7	; 183
     210:	97 e0       	ldi	r25, 0x07	; 7
     212:	90 93 0f 01 	sts	0x010F, r25
     216:	80 93 0e 01 	sts	0x010E, r24
     21a:	80 91 b6 07 	lds	r24, 0x07B6
     21e:	8c b9       	out	0x0c, r24	; 12
     220:	08 95       	ret

00000222 <read_line>:
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	8c 01       	movw	r16, r24
     22c:	eb 01       	movw	r28, r22
     22e:	20 91 aa 07 	lds	r18, 0x07AA
     232:	30 91 ab 07 	lds	r19, 0x07AB
     236:	23 2b       	or	r18, r19
     238:	d1 f3       	breq	.-12     	; 0x22e <read_line+0xc>
     23a:	c9 30       	cpi	r28, 0x09	; 9
     23c:	d1 05       	cpc	r29, r1
     23e:	14 f0       	brlt	.+4      	; 0x244 <read_line+0x22>
     240:	ca e0       	ldi	r28, 0x0A	; 10
     242:	d0 e0       	ldi	r29, 0x00	; 0
     244:	ae 01       	movw	r20, r28
     246:	6c ea       	ldi	r22, 0xAC	; 172
     248:	77 e0       	ldi	r23, 0x07	; 7
     24a:	c8 01       	movw	r24, r16
     24c:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strncpy>
     250:	0c 0f       	add	r16, r28
     252:	1d 1f       	adc	r17, r29
     254:	f8 01       	movw	r30, r16
     256:	31 97       	sbiw	r30, 0x01	; 1
     258:	10 82       	st	Z, r1
     25a:	8c ea       	ldi	r24, 0xAC	; 172
     25c:	97 e0       	ldi	r25, 0x07	; 7
     25e:	90 93 0b 01 	sts	0x010B, r25
     262:	80 93 0a 01 	sts	0x010A, r24
     266:	10 92 ab 07 	sts	0x07AB, r1
     26a:	10 92 aa 07 	sts	0x07AA, r1
     26e:	ce 01       	movw	r24, r28
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <__vector_18>:
/// The ISR on USAR received data
/**
 * Reads the available character from USART and stores it into the input buffer if possible.  The character is echoed back to the user if the value is stored in the buffer.
 * If the buffer is full, a bell character is sent back to the user to alert them that their input was rejected.  If the user enters a backspace, the previous character is deleted from the input buffer.
 */
ISR (USART0_RX_vect) {
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	0b b6       	in	r0, 0x3b	; 59
     286:	0f 92       	push	r0
     288:	2f 93       	push	r18
     28a:	3f 93       	push	r19
     28c:	4f 93       	push	r20
     28e:	5f 93       	push	r21
     290:	6f 93       	push	r22
     292:	7f 93       	push	r23
     294:	8f 93       	push	r24
     296:	9f 93       	push	r25
     298:	af 93       	push	r26
     29a:	bf 93       	push	r27
     29c:	ef 93       	push	r30
     29e:	ff 93       	push	r31
	char user_input = UDR0;
     2a0:	2c b1       	in	r18, 0x0c	; 12
	if (in_buffer_ready) {
     2a2:	80 91 aa 07 	lds	r24, 0x07AA
     2a6:	90 91 ab 07 	lds	r25, 0x07AB
     2aa:	89 2b       	or	r24, r25
     2ac:	21 f0       	breq	.+8      	; 0x2b6 <__vector_18+0x3c>
		// Tell the user that the buffer is full with a bell
		send_msg("\a");
     2ae:	8a eb       	ldi	r24, 0xBA	; 186
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	94 df       	rcall	.-216    	; 0x1dc <send_msg>
     2b4:	36 c0       	rjmp	.+108    	; 0x322 <__vector_18+0xa8>
	} else {
		if (user_input == '\r') {
     2b6:	2d 30       	cpi	r18, 0x0D	; 13
     2b8:	61 f4       	brne	.+24     	; 0x2d2 <__vector_18+0x58>
			// Replace \n with \0 to terminate the string.
			*(in_ptr) = '\0';
     2ba:	e0 91 0a 01 	lds	r30, 0x010A
     2be:	f0 91 0b 01 	lds	r31, 0x010B
     2c2:	10 82       	st	Z, r1
			// New line character means the input is ready for the user.
			in_buffer_ready = 1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	90 93 ab 07 	sts	0x07AB, r25
     2cc:	80 93 aa 07 	sts	0x07AA, r24
			return;
     2d0:	28 c0       	rjmp	.+80     	; 0x322 <__vector_18+0xa8>
		}
		// Echo the user's input back to the console
		UDR0 = user_input;
     2d2:	2c b9       	out	0x0c, r18	; 12
/**
 * The size of the data currently in the input buffer.
 * @return the size of the data in the input buffer
 */
int in_buffer_len(void) {
	return in_ptr - in_buffer;
     2d4:	e0 91 0a 01 	lds	r30, 0x010A
     2d8:	f0 91 0b 01 	lds	r31, 0x010B
     2dc:	cf 01       	movw	r24, r30
     2de:	8c 5a       	subi	r24, 0xAC	; 172
     2e0:	97 40       	sbci	r25, 0x07	; 7
			return;
		}
		// Echo the user's input back to the console
		UDR0 = user_input;
		// Avoid overflowing the in_buffer
		if (in_buffer_len() < IN_BUFFER_SIZE - 1) {
     2e2:	89 30       	cpi	r24, 0x09	; 9
     2e4:	91 05       	cpc	r25, r1
     2e6:	bc f4       	brge	.+46     	; 0x316 <__vector_18+0x9c>
			if (user_input == 127) {
     2e8:	2f 37       	cpi	r18, 0x7F	; 127
     2ea:	69 f4       	brne	.+26     	; 0x306 <__vector_18+0x8c>
				// User entered backspace
				if (in_buffer_len() > 0) {
     2ec:	18 16       	cp	r1, r24
     2ee:	19 06       	cpc	r1, r25
     2f0:	34 f4       	brge	.+12     	; 0x2fe <__vector_18+0x84>
					// Delete the character that has been erased
					in_ptr--;
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	f0 93 0b 01 	sts	0x010B, r31
     2f8:	e0 93 0a 01 	sts	0x010A, r30
     2fc:	12 c0       	rjmp	.+36     	; 0x322 <__vector_18+0xa8>
				} else {
					// The cursor is at the start of the buffer, backspace is not allowed
					send_msg("\a");
     2fe:	8a eb       	ldi	r24, 0xBA	; 186
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	6c df       	rcall	.-296    	; 0x1dc <send_msg>
     304:	0e c0       	rjmp	.+28     	; 0x322 <__vector_18+0xa8>
				}
			} else {
				*(in_ptr++) = user_input;				
     306:	cf 01       	movw	r24, r30
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	90 93 0b 01 	sts	0x010B, r25
     30e:	80 93 0a 01 	sts	0x010A, r24
     312:	20 83       	st	Z, r18
     314:	06 c0       	rjmp	.+12     	; 0x322 <__vector_18+0xa8>
			}
		} else {
			// The buffer is full
			in_buffer_ready = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 ab 07 	sts	0x07AB, r25
     31e:	80 93 aa 07 	sts	0x07AA, r24
		}
	}
}
     322:	ff 91       	pop	r31
     324:	ef 91       	pop	r30
     326:	bf 91       	pop	r27
     328:	af 91       	pop	r26
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0b be       	out	0x3b, r0	; 59
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_20>:

/// UART sending interrupt
/**
 * Sends one byte of the output buffer until the buffer is empty.  When the buffer is empty, the buffer empty flag is set.
 */
ISR (USART0_TX_vect) {
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	0b b6       	in	r0, 0x3b	; 59
     354:	0f 92       	push	r0
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	ef 93       	push	r30
     35c:	ff 93       	push	r31
	if (!out_buffer_empty) {
     35e:	80 91 0c 01 	lds	r24, 0x010C
     362:	90 91 0d 01 	lds	r25, 0x010D
     366:	89 2b       	or	r24, r25
     368:	a1 f4       	brne	.+40     	; 0x392 <__vector_20+0x4a>
		if (*out_ptr != '\0') {
     36a:	e0 91 0e 01 	lds	r30, 0x010E
     36e:	f0 91 0f 01 	lds	r31, 0x010F
     372:	80 81       	ld	r24, Z
     374:	88 23       	and	r24, r24
     376:	39 f0       	breq	.+14     	; 0x386 <__vector_20+0x3e>
			UDR0 = *(out_ptr++);
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	f0 93 0f 01 	sts	0x010F, r31
     37e:	e0 93 0e 01 	sts	0x010E, r30
     382:	8c b9       	out	0x0c, r24	; 12
     384:	06 c0       	rjmp	.+12     	; 0x392 <__vector_20+0x4a>
		} else {
			out_buffer_empty = 1;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	90 93 0d 01 	sts	0x010D, r25
     38e:	80 93 0c 01 	sts	0x010C, r24
		}
	}
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	0f 90       	pop	r0
     39c:	0b be       	out	0x3b, r0	; 59
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <find_goal>:
 * @param count the number of objects in the objects array
 * @param dist (return) the estimated distance between the robot and the goal posts
 * @param final_angle (return) the angle to rotate the robot to face the final goal after moving toward it
 * @return the angle to the center of the goal posts, or -1 if the goals are not found
 */
int find_goal(obj_t* objects, int count, int* dist, int* final_angle) {
     3a8:	2f 92       	push	r2
     3aa:	3f 92       	push	r3
     3ac:	4f 92       	push	r4
     3ae:	5f 92       	push	r5
     3b0:	6f 92       	push	r6
     3b2:	7f 92       	push	r7
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	c6 55       	subi	r28, 0x56	; 86
     3d2:	d1 09       	sbc	r29, r1
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	6b 01       	movw	r12, r22
     3e0:	65 96       	adiw	r28, 0x15	; 21
     3e2:	5f af       	std	Y+63, r21	; 0x3f
     3e4:	4e af       	std	Y+62, r20	; 0x3e
     3e6:	65 97       	sbiw	r28, 0x15	; 21
     3e8:	67 96       	adiw	r28, 0x17	; 23
     3ea:	3f af       	std	Y+63, r19	; 0x3f
     3ec:	2e af       	std	Y+62, r18	; 0x3e
     3ee:	67 97       	sbiw	r28, 0x17	; 23
	char msg[80];
	for (int i = 0; i < count; i++) {
     3f0:	16 16       	cp	r1, r22
     3f2:	17 06       	cpc	r1, r23
     3f4:	0c f0       	brlt	.+2      	; 0x3f8 <find_goal+0x50>
     3f6:	c2 c0       	rjmp	.+388    	; 0x57c <find_goal+0x1d4>
     3f8:	48 2e       	mov	r4, r24
     3fa:	59 2e       	mov	r5, r25
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	63 96       	adiw	r28, 0x13	; 19
     402:	3f af       	std	Y+63, r19	; 0x3f
     404:	2e af       	std	Y+62, r18	; 0x3e
     406:	63 97       	sbiw	r28, 0x13	; 19
     408:	0c c0       	rjmp	.+24     	; 0x422 <find_goal+0x7a>
     40a:	38 e0       	ldi	r19, 0x08	; 8
     40c:	43 0e       	add	r4, r19
     40e:	51 1c       	adc	r5, r1
     410:	63 96       	adiw	r28, 0x13	; 19
     412:	8e ad       	ldd	r24, Y+62	; 0x3e
     414:	9f ad       	ldd	r25, Y+63	; 0x3f
     416:	63 97       	sbiw	r28, 0x13	; 19
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	63 96       	adiw	r28, 0x13	; 19
     41c:	9f af       	std	Y+63, r25	; 0x3f
     41e:	8e af       	std	Y+62, r24	; 0x3e
     420:	63 97       	sbiw	r28, 0x13	; 19
		if (objects[i].width < WIDTH_THRESHOLD) {
     422:	12 01       	movw	r2, r4
     424:	f2 01       	movw	r30, r4
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	03 97       	sbiw	r24, 0x03	; 3
     42c:	0c f0       	brlt	.+2      	; 0x430 <find_goal+0x88>
     42e:	9b c0       	rjmp	.+310    	; 0x566 <find_goal+0x1be>
			for (int j = i + 1; j < count; j++) {
     430:	63 96       	adiw	r28, 0x13	; 19
     432:	ee ac       	ldd	r14, Y+62	; 0x3e
     434:	ff ac       	ldd	r15, Y+63	; 0x3f
     436:	63 97       	sbiw	r28, 0x13	; 19
     438:	ec 14       	cp	r14, r12
     43a:	fd 04       	cpc	r15, r13
     43c:	0c f0       	brlt	.+2      	; 0x440 <find_goal+0x98>
     43e:	a1 c0       	rjmp	.+322    	; 0x582 <find_goal+0x1da>
     440:	82 01       	movw	r16, r4
     442:	08 5f       	subi	r16, 0xF8	; 248
     444:	1f 4f       	sbci	r17, 0xFF	; 255
				if (objects[j].width < WIDTH_THRESHOLD) {
     446:	58 01       	movw	r10, r16
     448:	f8 01       	movw	r30, r16
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	03 97       	sbiw	r24, 0x03	; 3
     450:	0c f0       	brlt	.+2      	; 0x454 <find_goal+0xac>
     452:	7f c0       	rjmp	.+254    	; 0x552 <find_goal+0x1aa>
					int angle = objects[j].angular_location - objects[i].angular_location;
     454:	64 80       	ldd	r6, Z+4	; 0x04
     456:	75 80       	ldd	r7, Z+5	; 0x05
     458:	f1 01       	movw	r30, r2
     45a:	84 81       	ldd	r24, Z+4	; 0x04
     45c:	95 81       	ldd	r25, Z+5	; 0x05
     45e:	68 1a       	sub	r6, r24
     460:	79 0a       	sbc	r7, r25
					int separation = side_angle_side2(angle, objects[j].dist, objects[i].dist);
     462:	42 81       	ldd	r20, Z+2	; 0x02
     464:	53 81       	ldd	r21, Z+3	; 0x03
     466:	f8 01       	movw	r30, r16
     468:	62 81       	ldd	r22, Z+2	; 0x02
     46a:	73 81       	ldd	r23, Z+3	; 0x03
     46c:	c3 01       	movw	r24, r6
     46e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <side_angle_side2>
     472:	4c 01       	movw	r8, r24
					if (separation > 40 && separation < 80) {
     474:	89 97       	sbiw	r24, 0x29	; 41
     476:	87 97       	sbiw	r24, 0x27	; 39
     478:	08 f0       	brcs	.+2      	; 0x47c <find_goal+0xd4>
     47a:	6b c0       	rjmp	.+214    	; 0x552 <find_goal+0x1aa>
						sprintf(msg, "Separation between two small objects: %d (%d - %d) center %d\r\n", separation, objects[j].angular_location, objects[i].angular_location, objects[i].angular_location + angle / 2);
     47c:	f1 01       	movw	r30, r2
     47e:	84 81       	ldd	r24, Z+4	; 0x04
     480:	95 81       	ldd	r25, Z+5	; 0x05
     482:	93 01       	movw	r18, r6
     484:	77 20       	and	r7, r7
     486:	14 f4       	brge	.+4      	; 0x48c <find_goal+0xe4>
     488:	2f 5f       	subi	r18, 0xFF	; 255
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	39 01       	movw	r6, r18
     48e:	75 94       	asr	r7
     490:	67 94       	ror	r6
     492:	9c 01       	movw	r18, r24
     494:	26 0d       	add	r18, r6
     496:	37 1d       	adc	r19, r7
     498:	3f 93       	push	r19
     49a:	2f 93       	push	r18
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	f5 01       	movw	r30, r10
     4a2:	85 81       	ldd	r24, Z+5	; 0x05
     4a4:	8f 93       	push	r24
     4a6:	84 81       	ldd	r24, Z+4	; 0x04
     4a8:	8f 93       	push	r24
     4aa:	9f 92       	push	r9
     4ac:	8f 92       	push	r8
     4ae:	8c eb       	ldi	r24, 0xBC	; 188
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	8e 01       	movw	r16, r28
     4b8:	0f 5f       	subi	r16, 0xFF	; 255
     4ba:	1f 4f       	sbci	r17, 0xFF	; 255
     4bc:	1f 93       	push	r17
     4be:	0f 93       	push	r16
     4c0:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
						send_msg(msg);
     4c4:	c8 01       	movw	r24, r16
     4c6:	8a de       	rcall	.-748    	; 0x1dc <send_msg>
						*final_angle = sin((objects[i].dist - objects[j].dist) / (double) separation);
     4c8:	f1 01       	movw	r30, r2
     4ca:	62 81       	ldd	r22, Z+2	; 0x02
     4cc:	73 81       	ldd	r23, Z+3	; 0x03
     4ce:	f5 01       	movw	r30, r10
     4d0:	82 81       	ldd	r24, Z+2	; 0x02
     4d2:	93 81       	ldd	r25, Z+3	; 0x03
     4d4:	68 1b       	sub	r22, r24
     4d6:	79 0b       	sbc	r23, r25
     4d8:	88 27       	eor	r24, r24
     4da:	77 fd       	sbrc	r23, 7
     4dc:	80 95       	com	r24
     4de:	98 2f       	mov	r25, r24
     4e0:	0e 94 2c 12 	call	0x2458	; 0x2458 <__floatsisf>
     4e4:	6b 01       	movw	r12, r22
     4e6:	7c 01       	movw	r14, r24
     4e8:	b4 01       	movw	r22, r8
     4ea:	88 27       	eor	r24, r24
     4ec:	77 fd       	sbrc	r23, 7
     4ee:	80 95       	com	r24
     4f0:	98 2f       	mov	r25, r24
     4f2:	0e 94 2c 12 	call	0x2458	; 0x2458 <__floatsisf>
     4f6:	9b 01       	movw	r18, r22
     4f8:	ac 01       	movw	r20, r24
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
     502:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <sin>
     506:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__fixsfsi>
     50a:	67 96       	adiw	r28, 0x17	; 23
     50c:	ee ad       	ldd	r30, Y+62	; 0x3e
     50e:	ff ad       	ldd	r31, Y+63	; 0x3f
     510:	67 97       	sbiw	r28, 0x17	; 23
     512:	71 83       	std	Z+1, r23	; 0x01
     514:	60 83       	st	Z, r22
						*dist = (objects[i].dist + objects[j].dist) / 2;
     516:	f1 01       	movw	r30, r2
     518:	22 81       	ldd	r18, Z+2	; 0x02
     51a:	33 81       	ldd	r19, Z+3	; 0x03
     51c:	f5 01       	movw	r30, r10
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	82 0f       	add	r24, r18
     524:	93 1f       	adc	r25, r19
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	99 23       	and	r25, r25
     532:	0c f4       	brge	.+2      	; 0x536 <find_goal+0x18e>
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	65 96       	adiw	r28, 0x15	; 21
     53c:	ee ad       	ldd	r30, Y+62	; 0x3e
     53e:	ff ad       	ldd	r31, Y+63	; 0x3f
     540:	65 97       	sbiw	r28, 0x15	; 21
     542:	91 83       	std	Z+1, r25	; 0x01
     544:	80 83       	st	Z, r24
						return objects[i].angular_location + angle / 2;
     546:	f1 01       	movw	r30, r2
     548:	84 81       	ldd	r24, Z+4	; 0x04
     54a:	95 81       	ldd	r25, Z+5	; 0x05
     54c:	86 0d       	add	r24, r6
     54e:	97 1d       	adc	r25, r7
     550:	1a c0       	rjmp	.+52     	; 0x586 <find_goal+0x1de>
 */
int find_goal(obj_t* objects, int count, int* dist, int* final_angle) {
	char msg[80];
	for (int i = 0; i < count; i++) {
		if (objects[i].width < WIDTH_THRESHOLD) {
			for (int j = i + 1; j < count; j++) {
     552:	ff ef       	ldi	r31, 0xFF	; 255
     554:	ef 1a       	sub	r14, r31
     556:	ff 0a       	sbc	r15, r31
     558:	08 5f       	subi	r16, 0xF8	; 248
     55a:	1f 4f       	sbci	r17, 0xFF	; 255
     55c:	ec 14       	cp	r14, r12
     55e:	fd 04       	cpc	r15, r13
     560:	0c f4       	brge	.+2      	; 0x564 <find_goal+0x1bc>
     562:	71 cf       	rjmp	.-286    	; 0x446 <find_goal+0x9e>
     564:	52 cf       	rjmp	.-348    	; 0x40a <find_goal+0x62>
 * @param final_angle (return) the angle to rotate the robot to face the final goal after moving toward it
 * @return the angle to the center of the goal posts, or -1 if the goals are not found
 */
int find_goal(obj_t* objects, int count, int* dist, int* final_angle) {
	char msg[80];
	for (int i = 0; i < count; i++) {
     566:	63 96       	adiw	r28, 0x13	; 19
     568:	2e ad       	ldd	r18, Y+62	; 0x3e
     56a:	3f ad       	ldd	r19, Y+63	; 0x3f
     56c:	63 97       	sbiw	r28, 0x13	; 19
     56e:	2c 15       	cp	r18, r12
     570:	3d 05       	cpc	r19, r13
     572:	0c f4       	brge	.+2      	; 0x576 <find_goal+0x1ce>
     574:	4a cf       	rjmp	.-364    	; 0x40a <find_goal+0x62>
					}
				}
			}
		}
	}
	return -1;
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	9f ef       	ldi	r25, 0xFF	; 255
     57a:	05 c0       	rjmp	.+10     	; 0x586 <find_goal+0x1de>
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	9f ef       	ldi	r25, 0xFF	; 255
     580:	02 c0       	rjmp	.+4      	; 0x586 <find_goal+0x1de>
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	9f ef       	ldi	r25, 0xFF	; 255
}
     586:	ca 5a       	subi	r28, 0xAA	; 170
     588:	df 4f       	sbci	r29, 0xFF	; 255
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	9f 90       	pop	r9
     5aa:	8f 90       	pop	r8
     5ac:	7f 90       	pop	r7
     5ae:	6f 90       	pop	r6
     5b0:	5f 90       	pop	r5
     5b2:	4f 90       	pop	r4
     5b4:	3f 90       	pop	r3
     5b6:	2f 90       	pop	r2
     5b8:	08 95       	ret

000005ba <evasive_action>:
/// Rotates to avoid an object
/**
 * Rotates the robot to avoid hitting an object that has been found.
 */
void evasive_action(int dist, char left_evasive) {
	if (left_evasive) {
     5ba:	66 23       	and	r22, r22
     5bc:	59 f0       	breq	.+22     	; 0x5d4 <evasive_action+0x1a>
		send_msg("Evasive action, to the left\r\n");
     5be:	8b ef       	ldi	r24, 0xFB	; 251
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0c de       	rcall	.-1000   	; 0x1dc <send_msg>
		rotate_deg(90, sensor_data);
     5c4:	60 91 18 09 	lds	r22, 0x0918
     5c8:	70 91 19 09 	lds	r23, 0x0919
     5cc:	8a e5       	ldi	r24, 0x5A	; 90
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	d0 c6       	rjmp	.+3488   	; 0x1372 <rotate_deg>
     5d2:	08 95       	ret
	} else {
		send_msg("Evasive action, to the left\r\n");
     5d4:	8b ef       	ldi	r24, 0xFB	; 251
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	01 de       	rcall	.-1022   	; 0x1dc <send_msg>
		rotate_deg(-90, sensor_data);
     5da:	60 91 18 09 	lds	r22, 0x0918
     5de:	70 91 19 09 	lds	r23, 0x0919
     5e2:	86 ea       	ldi	r24, 0xA6	; 166
     5e4:	9f ef       	ldi	r25, 0xFF	; 255
     5e6:	c5 c6       	rjmp	.+3466   	; 0x1372 <rotate_deg>
     5e8:	08 95       	ret

000005ea <path_blocked_w_data>:
	}
}

int path_blocked_w_data(int target_dist, obj_t* objects, int count) {
     5ea:	2f 92       	push	r2
     5ec:	3f 92       	push	r3
     5ee:	4f 92       	push	r4
     5f0:	5f 92       	push	r5
     5f2:	6f 92       	push	r6
     5f4:	7f 92       	push	r7
     5f6:	8f 92       	push	r8
     5f8:	9f 92       	push	r9
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	c8 55       	subi	r28, 0x58	; 88
     614:	d1 09       	sbc	r29, r1
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	69 96       	adiw	r28, 0x19	; 25
     622:	9f af       	std	Y+63, r25	; 0x3f
     624:	8e af       	std	Y+62, r24	; 0x3e
     626:	69 97       	sbiw	r28, 0x19	; 25
     628:	67 96       	adiw	r28, 0x17	; 23
     62a:	5f af       	std	Y+63, r21	; 0x3f
     62c:	4e af       	std	Y+62, r20	; 0x3e
     62e:	67 97       	sbiw	r28, 0x17	; 23
	int dist;
	int horiz_dist;
	char msg[80];
	for (int i = 0; i < count; i++) {
     630:	14 16       	cp	r1, r20
     632:	15 06       	cpc	r1, r21
     634:	0c f0       	brlt	.+2      	; 0x638 <path_blocked_w_data+0x4e>
     636:	99 c0       	rjmp	.+306    	; 0x76a <path_blocked_w_data+0x180>
     638:	06 2f       	mov	r16, r22
     63a:	17 2f       	mov	r17, r23
     63c:	21 2c       	mov	r2, r1
     63e:	31 2c       	mov	r3, r1
		dist = objects[i].dist * sin(objects[i].angular_location / 180.0 * M_PI);
     640:	f8 01       	movw	r30, r16
     642:	02 80       	ldd	r0, Z+2	; 0x02
     644:	f3 81       	ldd	r31, Z+3	; 0x03
     646:	e0 2d       	mov	r30, r0
     648:	63 96       	adiw	r28, 0x13	; 19
     64a:	ff af       	std	Y+63, r31	; 0x3f
     64c:	ee af       	std	Y+62, r30	; 0x3e
     64e:	63 97       	sbiw	r28, 0x13	; 19
     650:	bf 01       	movw	r22, r30
     652:	88 27       	eor	r24, r24
     654:	77 fd       	sbrc	r23, 7
     656:	80 95       	com	r24
     658:	98 2f       	mov	r25, r24
     65a:	0e 94 2c 12 	call	0x2458	; 0x2458 <__floatsisf>
     65e:	4b 01       	movw	r8, r22
     660:	5c 01       	movw	r10, r24
     662:	f8 01       	movw	r30, r16
     664:	04 80       	ldd	r0, Z+4	; 0x04
     666:	f5 81       	ldd	r31, Z+5	; 0x05
     668:	e0 2d       	mov	r30, r0
     66a:	65 96       	adiw	r28, 0x15	; 21
     66c:	ff af       	std	Y+63, r31	; 0x3f
     66e:	ee af       	std	Y+62, r30	; 0x3e
     670:	65 97       	sbiw	r28, 0x15	; 21
     672:	bf 01       	movw	r22, r30
     674:	88 27       	eor	r24, r24
     676:	77 fd       	sbrc	r23, 7
     678:	80 95       	com	r24
     67a:	98 2f       	mov	r25, r24
     67c:	0e 94 2c 12 	call	0x2458	; 0x2458 <__floatsisf>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	44 e3       	ldi	r20, 0x34	; 52
     686:	53 e4       	ldi	r21, 0x43	; 67
     688:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
     68c:	2b ed       	ldi	r18, 0xDB	; 219
     68e:	3f e0       	ldi	r19, 0x0F	; 15
     690:	49 e4       	ldi	r20, 0x49	; 73
     692:	50 e4       	ldi	r21, 0x40	; 64
     694:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsf3>
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
     69c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <sin>
     6a0:	2b 01       	movw	r4, r22
     6a2:	3c 01       	movw	r6, r24
		horiz_dist = objects[i].dist * cos(objects[i].angular_location / 180.0 * M_PI);
     6a4:	c7 01       	movw	r24, r14
     6a6:	b6 01       	movw	r22, r12
     6a8:	0e 94 8e 11 	call	0x231c	; 0x231c <cos>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	c5 01       	movw	r24, r10
     6b2:	b4 01       	movw	r22, r8
     6b4:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsf3>
     6b8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__fixsfsi>
     6bc:	e6 2e       	mov	r14, r22
     6be:	f7 2e       	mov	r15, r23
		if (abs(horiz_dist) < 10 && abs(dist) < target_dist) {
     6c0:	67 5f       	subi	r22, 0xF7	; 247
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	63 31       	cpi	r22, 0x13	; 19
     6c6:	71 05       	cpc	r23, r1
     6c8:	08 f0       	brcs	.+2      	; 0x6cc <path_blocked_w_data+0xe2>
     6ca:	41 c0       	rjmp	.+130    	; 0x74e <path_blocked_w_data+0x164>
int path_blocked_w_data(int target_dist, obj_t* objects, int count) {
	int dist;
	int horiz_dist;
	char msg[80];
	for (int i = 0; i < count; i++) {
		dist = objects[i].dist * sin(objects[i].angular_location / 180.0 * M_PI);
     6cc:	a3 01       	movw	r20, r6
     6ce:	92 01       	movw	r18, r4
     6d0:	c5 01       	movw	r24, r10
     6d2:	b4 01       	movw	r22, r8
     6d4:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsf3>
     6d8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__fixsfsi>
     6dc:	26 2f       	mov	r18, r22
     6de:	37 2f       	mov	r19, r23
		horiz_dist = objects[i].dist * cos(objects[i].angular_location / 180.0 * M_PI);
		if (abs(horiz_dist) < 10 && abs(dist) < target_dist) {
     6e0:	86 2f       	mov	r24, r22
     6e2:	97 2f       	mov	r25, r23
     6e4:	99 23       	and	r25, r25
     6e6:	1c f4       	brge	.+6      	; 0x6ee <path_blocked_w_data+0x104>
     6e8:	91 95       	neg	r25
     6ea:	81 95       	neg	r24
     6ec:	91 09       	sbc	r25, r1
     6ee:	69 96       	adiw	r28, 0x19	; 25
     6f0:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f2:	5f ad       	ldd	r21, Y+63	; 0x3f
     6f4:	69 97       	sbiw	r28, 0x19	; 25
     6f6:	84 17       	cp	r24, r20
     6f8:	95 07       	cpc	r25, r21
     6fa:	4c f5       	brge	.+82     	; 0x74e <path_blocked_w_data+0x164>
			sprintf(msg, "Path blocked at %d deg, %d dist.  %d to the right, %d ahead.\r\n", objects[i].angular_location, objects[i].dist, horiz_dist, dist);
     6fc:	3f 93       	push	r19
     6fe:	2f 93       	push	r18
     700:	ff 92       	push	r15
     702:	ef 92       	push	r14
     704:	63 96       	adiw	r28, 0x13	; 19
     706:	5f ad       	ldd	r21, Y+63	; 0x3f
     708:	63 97       	sbiw	r28, 0x13	; 19
     70a:	5f 93       	push	r21
     70c:	62 96       	adiw	r28, 0x12	; 18
     70e:	8f ad       	ldd	r24, Y+63	; 0x3f
     710:	62 97       	sbiw	r28, 0x12	; 18
     712:	8f 93       	push	r24
     714:	65 96       	adiw	r28, 0x15	; 21
     716:	9f ad       	ldd	r25, Y+63	; 0x3f
     718:	65 97       	sbiw	r28, 0x15	; 21
     71a:	9f 93       	push	r25
     71c:	64 96       	adiw	r28, 0x14	; 20
     71e:	ef ad       	ldd	r30, Y+63	; 0x3f
     720:	64 97       	sbiw	r28, 0x14	; 20
     722:	ef 93       	push	r30
     724:	89 e1       	ldi	r24, 0x19	; 25
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	8e 01       	movw	r16, r28
     72e:	0f 5f       	subi	r16, 0xFF	; 255
     730:	1f 4f       	sbci	r17, 0xFF	; 255
     732:	1f 93       	push	r17
     734:	0f 93       	push	r16
     736:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
			send_msg(msg);
     73a:	c8 01       	movw	r24, r16
     73c:	4f dd       	rcall	.-1378   	; 0x1dc <send_msg>
			return i;
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	82 2d       	mov	r24, r2
     74a:	93 2d       	mov	r25, r3
     74c:	13 c0       	rjmp	.+38     	; 0x774 <path_blocked_w_data+0x18a>

int path_blocked_w_data(int target_dist, obj_t* objects, int count) {
	int dist;
	int horiz_dist;
	char msg[80];
	for (int i = 0; i < count; i++) {
     74e:	3f ef       	ldi	r19, 0xFF	; 255
     750:	23 1a       	sub	r2, r19
     752:	33 0a       	sbc	r3, r19
     754:	08 5f       	subi	r16, 0xF8	; 248
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	67 96       	adiw	r28, 0x17	; 23
     75a:	4e ad       	ldd	r20, Y+62	; 0x3e
     75c:	5f ad       	ldd	r21, Y+63	; 0x3f
     75e:	67 97       	sbiw	r28, 0x17	; 23
     760:	24 16       	cp	r2, r20
     762:	35 06       	cpc	r3, r21
     764:	09 f0       	breq	.+2      	; 0x768 <path_blocked_w_data+0x17e>
     766:	6c cf       	rjmp	.-296    	; 0x640 <path_blocked_w_data+0x56>
     768:	03 c0       	rjmp	.+6      	; 0x770 <path_blocked_w_data+0x186>
			sprintf(msg, "Path blocked at %d deg, %d dist.  %d to the right, %d ahead.\r\n", objects[i].angular_location, objects[i].dist, horiz_dist, dist);
			send_msg(msg);
			return i;
		}
	}
	return -1;
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	9f ef       	ldi	r25, 0xFF	; 255
     76e:	02 c0       	rjmp	.+4      	; 0x774 <path_blocked_w_data+0x18a>
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	c8 5a       	subi	r28, 0xA8	; 168
     776:	df 4f       	sbci	r29, 0xFF	; 255
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	7f 90       	pop	r7
     79c:	6f 90       	pop	r6
     79e:	5f 90       	pop	r5
     7a0:	4f 90       	pop	r4
     7a2:	3f 90       	pop	r3
     7a4:	2f 90       	pop	r2
     7a6:	08 95       	ret

000007a8 <autonomous>:

/// Autonomous mode
/**
 * This is the autonomous loop.  The robot will search for the end goal endlessly until it thinks it finds the goal.
 */
void autonomous(void) {
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	c7 55       	subi	r28, 0x57	; 87
     7b2:	d1 09       	sbc	r29, r1
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
	int angle;
	char msg[80];
	char left_evasive;
	
	while (1) {
		lprintf("Scanning area");
     7be:	0f 2e       	mov	r0, r31
     7c0:	f8 e5       	ldi	r31, 0x58	; 88
     7c2:	8f 2e       	mov	r8, r31
     7c4:	f2 e0       	ldi	r31, 0x02	; 2
     7c6:	9f 2e       	mov	r9, r31
     7c8:	f0 2d       	mov	r31, r0
				send_msg(msg);
				rotate_deg(offset_angle, sensor_data);
			}
			// Path is not blocked.  Continue
			dist = move_result(EXPLORE_DIST, sensor_data, 0, 0, &reason);
			sprintf(msg, "Reason: %s\r\n", stop_reason_descrip[reason]);
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f4 ef       	ldi	r31, 0xF4	; 244
     7ce:	4f 2e       	mov	r4, r31
     7d0:	f2 e0       	ldi	r31, 0x02	; 2
     7d2:	5f 2e       	mov	r5, r31
     7d4:	f0 2d       	mov	r31, r0
     7d6:	7e 01       	movw	r14, r28
     7d8:	28 e0       	ldi	r18, 0x08	; 8
     7da:	e2 0e       	add	r14, r18
     7dc:	f1 1c       	adc	r15, r1
     7de:	6e 2c       	mov	r6, r14
     7e0:	7f 2c       	mov	r7, r15
			// Did not find a small object.  Explore
			if ((index = path_blocked_w_data(EXPLORE_DIST, objects, count)) != -1) {
				send_msg("Path blocked\r\n");
				// Path is blocked
				int offset_angle = side_side_side(10 + objects[index].width / 2, objects[index].dist);
				sprintf(msg, "Path blocked in exploration, rotating %d to avoid object\r\n", offset_angle);
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f5 e8       	ldi	r31, 0x85	; 133
     7e6:	cf 2e       	mov	r12, r31
     7e8:	f2 e0       	ldi	r31, 0x02	; 2
     7ea:	df 2e       	mov	r13, r31
     7ec:	f0 2d       	mov	r31, r0
	int angle;
	char msg[80];
	char left_evasive;
	
	while (1) {
		lprintf("Scanning area");
     7ee:	9f 92       	push	r9
     7f0:	8f 92       	push	r8
     7f2:	92 d3       	rcall	.+1828   	; 0xf18 <lprintf>
		send_msg("Scanning area\r\n");
     7f4:	86 e6       	ldi	r24, 0x66	; 102
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	f1 dc       	rcall	.-1566   	; 0x1dc <send_msg>
		left_evasive = 1;
		
		objects = do_scan(&count);
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <do_scan>
     802:	8c 01       	movw	r16, r24
		if (find_goal(objects, count, &dist, &angle) != -1) {
     804:	69 81       	ldd	r22, Y+1	; 0x01
     806:	7a 81       	ldd	r23, Y+2	; 0x02
     808:	9e 01       	movw	r18, r28
     80a:	2a 5f       	subi	r18, 0xFA	; 250
     80c:	3f 4f       	sbci	r19, 0xFF	; 255
     80e:	ae 01       	movw	r20, r28
     810:	4d 5f       	subi	r20, 0xFD	; 253
     812:	5f 4f       	sbci	r21, 0xFF	; 255
     814:	c9 dd       	rcall	.-1134   	; 0x3a8 <find_goal>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	09 f4       	brne	.+2      	; 0x820 <autonomous+0x78>
     81e:	96 c0       	rjmp	.+300    	; 0x94c <autonomous+0x1a4>
			if ((index = path_blocked_w_data(EXPLORE_DIST, objects, count)) != -1) {
     820:	49 81       	ldd	r20, Y+1	; 0x01
     822:	5a 81       	ldd	r21, Y+2	; 0x02
     824:	b8 01       	movw	r22, r16
     826:	84 ef       	ldi	r24, 0xF4	; 244
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	df de       	rcall	.-578    	; 0x5ea <path_blocked_w_data>
     82c:	5c 01       	movw	r10, r24
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	a8 16       	cp	r10, r24
     832:	b8 06       	cpc	r11, r24
     834:	99 f1       	breq	.+102    	; 0x89c <autonomous+0xf4>
				send_msg("Path blocked\r\n");
     836:	86 e7       	ldi	r24, 0x76	; 118
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	d0 dc       	rcall	.-1632   	; 0x1dc <send_msg>
				// Path is blocked
				int offset_angle = side_side_side(10 + objects[index].width / 2, objects[index].dist);
     83c:	f5 01       	movw	r30, r10
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	e0 0f       	add	r30, r16
     84c:	f1 1f       	adc	r31, r17
     84e:	62 81       	ldd	r22, Z+2	; 0x02
     850:	73 81       	ldd	r23, Z+3	; 0x03
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	99 23       	and	r25, r25
     858:	0c f4       	brge	.+2      	; 0x85c <autonomous+0xb4>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	95 95       	asr	r25
     85e:	87 95       	ror	r24
     860:	0a 96       	adiw	r24, 0x0a	; 10
     862:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <side_side_side>
     866:	08 2f       	mov	r16, r24
     868:	19 2f       	mov	r17, r25
				sprintf(msg, "Path blocked in exploration, rotating %d to avoid object\r\n", offset_angle);
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	df 92       	push	r13
     870:	cf 92       	push	r12
     872:	ff 92       	push	r15
     874:	ef 92       	push	r14
     876:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
				send_msg(msg);
     87a:	86 2d       	mov	r24, r6
     87c:	97 2d       	mov	r25, r7
     87e:	ae dc       	rcall	.-1700   	; 0x1dc <send_msg>
				rotate_deg(offset_angle, sensor_data);
     880:	60 91 18 09 	lds	r22, 0x0918
     884:	70 91 19 09 	lds	r23, 0x0919
     888:	80 2f       	mov	r24, r16
     88a:	91 2f       	mov	r25, r17
     88c:	72 d5       	rcall	.+2788   	; 0x1372 <rotate_deg>
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	bc c0       	rjmp	.+376    	; 0xa14 <autonomous+0x26c>
			} else {
				// Found a small object
				send_msg("Small objects found\r\n");
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	9d dc       	rcall	.-1734   	; 0x1dc <send_msg>
				int offset_angle = find_goal(objects, count, &dist, &angle);
     8a2:	69 81       	ldd	r22, Y+1	; 0x01
     8a4:	7a 81       	ldd	r23, Y+2	; 0x02
     8a6:	9e 01       	movw	r18, r28
     8a8:	2a 5f       	subi	r18, 0xFA	; 250
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	ae 01       	movw	r20, r28
     8ae:	4d 5f       	subi	r20, 0xFD	; 253
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	c8 01       	movw	r24, r16
     8b4:	79 dd       	rcall	.-1294   	; 0x3a8 <find_goal>
				rotate_deg(offset_angle - 90, sensor_data);
     8b6:	60 91 18 09 	lds	r22, 0x0918
     8ba:	70 91 19 09 	lds	r23, 0x0919
     8be:	8a 55       	subi	r24, 0x5A	; 90
     8c0:	91 09       	sbc	r25, r1
     8c2:	57 d5       	rcall	.+2734   	; 0x1372 <rotate_deg>
				dist = move_result(dist, sensor_data, 0, 0, &reason);
     8c4:	60 91 18 09 	lds	r22, 0x0918
     8c8:	70 91 19 09 	lds	r23, 0x0919
     8cc:	8e 01       	movw	r16, r28
     8ce:	0b 5f       	subi	r16, 0xFB	; 251
     8d0:	1f 4f       	sbci	r17, 0xFF	; 255
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	dc d6       	rcall	.+3512   	; 0x1694 <move_result>
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	8b 83       	std	Y+3, r24	; 0x03
				if (reason == COLOR) {
     8e0:	8d 81       	ldd	r24, Y+5	; 0x05
     8e2:	84 30       	cpi	r24, 0x04	; 4
     8e4:	69 f4       	brne	.+26     	; 0x900 <autonomous+0x158>
					lprintf("WE WIN!");
     8e6:	86 ed       	ldi	r24, 0xD6	; 214
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	9f 93       	push	r25
     8ec:	8f 93       	push	r24
     8ee:	14 d3       	rcall	.+1576   	; 0xf18 <lprintf>
					send_msg("WE WIN1!\r\n");
     8f0:	8e ed       	ldi	r24, 0xDE	; 222
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	73 dc       	rcall	.-1818   	; 0x1dc <send_msg>
					songs(DARTHVADER);
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	40 d2       	rcall	.+1152   	; 0xd7a <songs>
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	ff cf       	rjmp	.-2      	; 0x8fe <autonomous+0x156>
					while (1) {}
				}
				rotate_deg(angle, sensor_data);
     900:	60 91 18 09 	lds	r22, 0x0918
     904:	70 91 19 09 	lds	r23, 0x0919
     908:	8e 81       	ldd	r24, Y+6	; 0x06
     90a:	9f 81       	ldd	r25, Y+7	; 0x07
     90c:	32 d5       	rcall	.+2660   	; 0x1372 <rotate_deg>
				dist = move_result(400, sensor_data, 0, 0, &reason);
     90e:	60 91 18 09 	lds	r22, 0x0918
     912:	70 91 19 09 	lds	r23, 0x0919
     916:	8e 01       	movw	r16, r28
     918:	0b 5f       	subi	r16, 0xFB	; 251
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	80 e9       	ldi	r24, 0x90	; 144
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	b7 d6       	rcall	.+3438   	; 0x1694 <move_result>
     926:	9c 83       	std	Y+4, r25	; 0x04
     928:	8b 83       	std	Y+3, r24	; 0x03
				if (reason == COLOR) {
     92a:	8d 81       	ldd	r24, Y+5	; 0x05
     92c:	84 30       	cpi	r24, 0x04	; 4
     92e:	09 f0       	breq	.+2      	; 0x932 <autonomous+0x18a>
     930:	71 c0       	rjmp	.+226    	; 0xa14 <autonomous+0x26c>
					lprintf("WE WIN!");
     932:	86 ed       	ldi	r24, 0xD6	; 214
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	ee d2       	rcall	.+1500   	; 0xf18 <lprintf>
					send_msg("WE WIN2!\r\n");
     93c:	89 ee       	ldi	r24, 0xE9	; 233
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	4d dc       	rcall	.-1894   	; 0x1dc <send_msg>
					songs(DARTHVADER);
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	1a d2       	rcall	.+1076   	; 0xd7a <songs>
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	ff cf       	rjmp	.-2      	; 0x94a <autonomous+0x1a2>
					while (1) {}
				}
			}
		} else {
			// Did not find a small object.  Explore
			if ((index = path_blocked_w_data(EXPLORE_DIST, objects, count)) != -1) {
     94c:	49 81       	ldd	r20, Y+1	; 0x01
     94e:	5a 81       	ldd	r21, Y+2	; 0x02
     950:	b8 01       	movw	r22, r16
     952:	84 ef       	ldi	r24, 0xF4	; 244
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	49 de       	rcall	.-878    	; 0x5ea <path_blocked_w_data>
     958:	5c 01       	movw	r10, r24
     95a:	8f 3f       	cpi	r24, 0xFF	; 255
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	92 07       	cpc	r25, r18
     960:	91 f1       	breq	.+100    	; 0x9c6 <autonomous+0x21e>
				send_msg("Path blocked\r\n");
     962:	86 e7       	ldi	r24, 0x76	; 118
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	3a dc       	rcall	.-1932   	; 0x1dc <send_msg>
				// Path is blocked
				int offset_angle = side_side_side(10 + objects[index].width / 2, objects[index].dist);
     968:	f5 01       	movw	r30, r10
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e0 0f       	add	r30, r16
     978:	f1 1f       	adc	r31, r17
     97a:	62 81       	ldd	r22, Z+2	; 0x02
     97c:	73 81       	ldd	r23, Z+3	; 0x03
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	99 23       	and	r25, r25
     984:	0c f4       	brge	.+2      	; 0x988 <autonomous+0x1e0>
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	95 95       	asr	r25
     98a:	87 95       	ror	r24
     98c:	0a 96       	adiw	r24, 0x0a	; 10
     98e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <side_side_side>
     992:	08 2f       	mov	r16, r24
     994:	19 2f       	mov	r17, r25
				sprintf(msg, "Path blocked in exploration, rotating %d to avoid object\r\n", offset_angle);
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	df 92       	push	r13
     99c:	cf 92       	push	r12
     99e:	ff 92       	push	r15
     9a0:	ef 92       	push	r14
     9a2:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
				send_msg(msg);
     9a6:	86 2d       	mov	r24, r6
     9a8:	97 2d       	mov	r25, r7
     9aa:	18 dc       	rcall	.-2000   	; 0x1dc <send_msg>
				rotate_deg(offset_angle, sensor_data);
     9ac:	60 91 18 09 	lds	r22, 0x0918
     9b0:	70 91 19 09 	lds	r23, 0x0919
     9b4:	80 2f       	mov	r24, r16
     9b6:	91 2f       	mov	r25, r17
     9b8:	dc d4       	rcall	.+2488   	; 0x1372 <rotate_deg>
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
			}
			// Path is not blocked.  Continue
			dist = move_result(EXPLORE_DIST, sensor_data, 0, 0, &reason);
     9c6:	60 91 18 09 	lds	r22, 0x0918
     9ca:	70 91 19 09 	lds	r23, 0x0919
     9ce:	8e 01       	movw	r16, r28
     9d0:	0b 5f       	subi	r16, 0xFB	; 251
     9d2:	1f 4f       	sbci	r17, 0xFF	; 255
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	84 ef       	ldi	r24, 0xF4	; 244
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	5b d6       	rcall	.+3254   	; 0x1694 <move_result>
     9de:	9c 83       	std	Y+4, r25	; 0x04
     9e0:	8b 83       	std	Y+3, r24	; 0x03
			sprintf(msg, "Reason: %s\r\n", stop_reason_descrip[reason]);
     9e2:	ed 81       	ldd	r30, Y+5	; 0x05
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	e2 55       	subi	r30, 0x52	; 82
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	8f 93       	push	r24
     9f2:	80 81       	ld	r24, Z
     9f4:	8f 93       	push	r24
     9f6:	5f 92       	push	r5
     9f8:	4f 92       	push	r4
     9fa:	ff 92       	push	r15
     9fc:	ef 92       	push	r14
     9fe:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
			send_msg(msg);
     a02:	86 2d       	mov	r24, r6
     a04:	97 2d       	mov	r25, r7
     a06:	ea db       	rcall	.-2092   	; 0x1dc <send_msg>
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
		}
		static char rred = 0;
		switch (reason) {
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	82 30       	cpi	r24, 0x02	; 2
     a18:	49 f1       	breq	.+82     	; 0xa6c <autonomous+0x2c4>
     a1a:	28 f4       	brcc	.+10     	; 0xa26 <autonomous+0x27e>
     a1c:	88 23       	and	r24, r24
     a1e:	69 f0       	breq	.+26     	; 0xa3a <autonomous+0x292>
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	49 f0       	breq	.+18     	; 0xa36 <autonomous+0x28e>
     a24:	e4 ce       	rjmp	.-568    	; 0x7ee <autonomous+0x46>
     a26:	83 30       	cpi	r24, 0x03	; 3
     a28:	21 f0       	breq	.+8      	; 0xa32 <autonomous+0x28a>
     a2a:	84 30       	cpi	r24, 0x04	; 4
     a2c:	09 f4       	brne	.+2      	; 0xa30 <autonomous+0x288>
     a2e:	37 c0       	rjmp	.+110    	; 0xa9e <autonomous+0x2f6>
     a30:	de ce       	rjmp	.-580    	; 0x7ee <autonomous+0x46>
	char left_evasive;
	
	while (1) {
		lprintf("Scanning area");
		send_msg("Scanning area\r\n");
		left_evasive = 1;
     a32:	11 e0       	ldi	r17, 0x01	; 1
     a34:	1c c0       	rjmp	.+56     	; 0xa6e <autonomous+0x2c6>
     a36:	11 e0       	ldi	r17, 0x01	; 1
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <autonomous+0x294>
			send_msg(msg);
		}
		static char rred = 0;
		switch (reason) {
		case BUMP_L:
			left_evasive = 0;
     a3a:	10 e0       	ldi	r17, 0x00	; 0
		case BUMP_R:
			// Evasive action
			send_msg("That's an object.\r\n");
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	cd db       	rcall	.-2150   	; 0x1dc <send_msg>
			lprintf("Ouch!");
     a42:	85 e1       	ldi	r24, 0x15	; 21
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	66 d2       	rcall	.+1228   	; 0xf18 <lprintf>
			if (rred == 0) { songs(RICKROLLED); }
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	80 91 1a 08 	lds	r24, 0x081A
     a54:	81 11       	cpse	r24, r1
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <autonomous+0x2b4>
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	8f d1       	rcall	.+798    	; 0xd7a <songs>
			rred = 1;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 1a 08 	sts	0x081A, r24
			evasive_action(200, left_evasive);
     a62:	61 2f       	mov	r22, r17
     a64:	88 ec       	ldi	r24, 0xC8	; 200
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a8 dd       	rcall	.-1200   	; 0x5ba <evasive_action>
			break;
     a6a:	bb ce       	rjmp	.-650    	; 0x7e2 <autonomous+0x3a>
		case CLIFF_L:
			left_evasive = 0;
     a6c:	10 e0       	ldi	r17, 0x00	; 0
		case CLIFF_R:
			// Evasive action
			send_msg("That's a cliff.\r\n");
     a6e:	8b e1       	ldi	r24, 0x1B	; 27
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	b4 db       	rcall	.-2200   	; 0x1dc <send_msg>
			lprintf("That's a cliff");
     a74:	8d e2       	ldi	r24, 0x2D	; 45
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	4d d2       	rcall	.+1178   	; 0xf18 <lprintf>
			if (rred == 0) { songs(RICKROLLED); }
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	80 91 1a 08 	lds	r24, 0x081A
     a86:	81 11       	cpse	r24, r1
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <autonomous+0x2e6>
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	76 d1       	rcall	.+748    	; 0xd7a <songs>
			rred = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 1a 08 	sts	0x081A, r24
			evasive_action(500, left_evasive);
     a94:	61 2f       	mov	r22, r17
     a96:	84 ef       	ldi	r24, 0xF4	; 244
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	8f dd       	rcall	.-1250   	; 0x5ba <evasive_action>
			break;
     a9c:	a2 ce       	rjmp	.-700    	; 0x7e2 <autonomous+0x3a>
		case COLOR:
			send_msg("Found an edge.\r\n");
     a9e:	8c e3       	ldi	r24, 0x3C	; 60
     aa0:	93 e0       	ldi	r25, 0x03	; 3
     aa2:	9c db       	rcall	.-2248   	; 0x1dc <send_msg>
			char obj_in_range = 0;
			objects = do_scan(&count);
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <do_scan>
			for (int i = 0; i < count; i++) {
     aac:	49 81       	ldd	r20, Y+1	; 0x01
     aae:	5a 81       	ldd	r21, Y+2	; 0x02
     ab0:	14 16       	cp	r1, r20
     ab2:	15 06       	cpc	r1, r21
     ab4:	94 f5       	brge	.+100    	; 0xb1a <autonomous+0x372>
     ab6:	e8 2f       	mov	r30, r24
     ab8:	f9 2f       	mov	r31, r25
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
			rred = 1;
			evasive_action(500, left_evasive);
			break;
		case COLOR:
			send_msg("Found an edge.\r\n");
			char obj_in_range = 0;
     abe:	60 e0       	ldi	r22, 0x00	; 0
			objects = do_scan(&count);
			for (int i = 0; i < count; i++) {
				if (objects[i].dist < 50 && objects[i].angular_location < 90) {
					obj_in_range = 1;
     ac0:	71 e0       	ldi	r23, 0x01	; 1
		case COLOR:
			send_msg("Found an edge.\r\n");
			char obj_in_range = 0;
			objects = do_scan(&count);
			for (int i = 0; i < count; i++) {
				if (objects[i].dist < 50 && objects[i].angular_location < 90) {
     ac2:	22 81       	ldd	r18, Z+2	; 0x02
     ac4:	33 81       	ldd	r19, Z+3	; 0x03
     ac6:	22 33       	cpi	r18, 0x32	; 50
     ac8:	31 05       	cpc	r19, r1
     aca:	14 f5       	brge	.+68     	; 0xb10 <autonomous+0x368>
     acc:	24 81       	ldd	r18, Z+4	; 0x04
     ace:	35 81       	ldd	r19, Z+5	; 0x05
     ad0:	2a 35       	cpi	r18, 0x5A	; 90
     ad2:	31 05       	cpc	r19, r1
     ad4:	9c f5       	brge	.+102    	; 0xb3c <autonomous+0x394>
					obj_in_range = 1;
     ad6:	67 2f       	mov	r22, r23
				}
				if (obj_in_range && objects[i].dist < 50 && objects[i].angular_location > 90) {
     ad8:	2b 35       	cpi	r18, 0x5B	; 91
     ada:	31 05       	cpc	r19, r1
     adc:	cc f0       	brlt	.+50     	; 0xb10 <autonomous+0x368>
					lprintf("WE WIN!");
     ade:	86 ed       	ldi	r24, 0xD6	; 214
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	18 d2       	rcall	.+1072   	; 0xf18 <lprintf>
					send_msg("WE WIN\r\n");
     ae8:	8d e4       	ldi	r24, 0x4D	; 77
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	77 db       	rcall	.-2322   	; 0x1dc <send_msg>
					move_result(150, sensor_data, 0, 1, &reason);
     aee:	60 91 18 09 	lds	r22, 0x0918
     af2:	70 91 19 09 	lds	r23, 0x0919
     af6:	8e 01       	movw	r16, r28
     af8:	0b 5f       	subi	r16, 0xFB	; 251
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	86 e9       	ldi	r24, 0x96	; 150
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	c7 d5       	rcall	.+2958   	; 0x1694 <move_result>
					songs(DARTHVADER);
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	38 d1       	rcall	.+624    	; 0xd7a <songs>
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	ff cf       	rjmp	.-2      	; 0xb0e <autonomous+0x366>
			break;
		case COLOR:
			send_msg("Found an edge.\r\n");
			char obj_in_range = 0;
			objects = do_scan(&count);
			for (int i = 0; i < count; i++) {
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	38 96       	adiw	r30, 0x08	; 8
     b14:	84 17       	cp	r24, r20
     b16:	95 07       	cpc	r25, r21
     b18:	a1 f6       	brne	.-88     	; 0xac2 <autonomous+0x31a>
					move_result(150, sensor_data, 0, 1, &reason);
					songs(DARTHVADER);
					while (1) {}
				}
			}
			lprintf("I don't want to go there");
     b1a:	86 e5       	ldi	r24, 0x56	; 86
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	fa d1       	rcall	.+1012   	; 0xf18 <lprintf>
			if (rand() % 1) {
     b24:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <rand>
				rotate_deg(100, sensor_data);
			} else {
				rotate_deg(-100, sensor_data);
     b28:	60 91 18 09 	lds	r22, 0x0918
     b2c:	70 91 19 09 	lds	r23, 0x0919
     b30:	8c e9       	ldi	r24, 0x9C	; 156
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	1e d4       	rcall	.+2108   	; 0x1372 <rotate_deg>
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	53 ce       	rjmp	.-858    	; 0x7e2 <autonomous+0x3a>
			objects = do_scan(&count);
			for (int i = 0; i < count; i++) {
				if (objects[i].dist < 50 && objects[i].angular_location < 90) {
					obj_in_range = 1;
				}
				if (obj_in_range && objects[i].dist < 50 && objects[i].angular_location > 90) {
     b3c:	61 11       	cpse	r22, r1
     b3e:	cc cf       	rjmp	.-104    	; 0xad8 <autonomous+0x330>
     b40:	e7 cf       	rjmp	.-50     	; 0xb10 <autonomous+0x368>

00000b42 <ui_control>:

/// Hidden mode for GUI frontend interface
/**
 * This is a hidden menu that is designed for our GUI frontend to communicate with.  It has simplified commands to reduce frontend parsing and USART transmission sizes.
 */
void ui_control(void) {
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	c5 56       	subi	r28, 0x65	; 101
     b4c:	d1 09       	sbc	r29, r1
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
	in_program_ui = 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 17 09 	sts	0x0917, r24
	stop_reason reason;
	int result;
	char ignore_sensors;
	char msg[80];
	init_servo();
     b5e:	50 d1       	rcall	.+672    	; 0xe00 <init_servo>
	init_ir();
     b60:	60 d1       	rcall	.+704    	; 0xe22 <init_ir>
	
	char user_input[20];
	while (1) {
		ignore_sensors = 0;
		read_line(user_input, 20);
     b62:	7e 01       	movw	r14, r28
     b64:	82 e5       	ldi	r24, 0x52	; 82
     b66:	e8 0e       	add	r14, r24
     b68:	f1 1c       	adc	r15, r1
     b6a:	4e 2c       	mov	r4, r14
     b6c:	5f 2c       	mov	r5, r15
			sprintf(msg, "m,%d,%s.", result, stop_reason_descrip[reason]);
			send_msg(msg);
			break;
		case 'r':
			// Rotate
			result = rotate_deg(atoi(user_input + 2), sensor_data);
     b6e:	47 01       	movw	r8, r14
     b70:	92 e0       	ldi	r25, 0x02	; 2
     b72:	89 0e       	add	r8, r25
     b74:	91 1c       	adc	r9, r1
			sprintf(msg, "r,%d.", result);
     b76:	6e 01       	movw	r12, r28
     b78:	a2 e0       	ldi	r26, 0x02	; 2
     b7a:	ca 0e       	add	r12, r26
     b7c:	d1 1c       	adc	r13, r1
			// Move ignoring sensors
			ignore_sensors = 1;
		case 'm':
			// Move
			result = move_result(atoi(user_input + 2), sensor_data, ignore_sensors, ignore_sensors, &reason);
			sprintf(msg, "m,%d,%s.", result, stop_reason_descrip[reason]);
     b7e:	0f 2e       	mov	r0, r31
     b80:	ff e6       	ldi	r31, 0x6F	; 111
     b82:	af 2e       	mov	r10, r31
     b84:	f3 e0       	ldi	r31, 0x03	; 3
     b86:	bf 2e       	mov	r11, r31
     b88:	f0 2d       	mov	r31, r0
	init_servo();
	init_ir();
	
	char user_input[20];
	while (1) {
		ignore_sensors = 0;
     b8a:	21 2c       	mov	r2, r1
		read_line(user_input, 20);
     b8c:	64 e1       	ldi	r22, 0x14	; 20
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	84 2d       	mov	r24, r4
     b92:	95 2d       	mov	r25, r5
     b94:	46 db       	rcall	.-2420   	; 0x222 <read_line>
		switch (user_input[0]) {
     b96:	f7 01       	movw	r30, r14
     b98:	80 81       	ld	r24, Z
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	fc 01       	movw	r30, r24
     b9e:	e1 56       	subi	r30, 0x61	; 97
     ba0:	f1 09       	sbc	r31, r1
     ba2:	e2 31       	cpi	r30, 0x12	; 18
     ba4:	f1 05       	cpc	r31, r1
     ba6:	90 f7       	brcc	.-28     	; 0xb8c <ui_control+0x4a>
     ba8:	ea 5b       	subi	r30, 0xBA	; 186
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__tablejump2__>
	init_servo();
	init_ir();
	
	char user_input[20];
	while (1) {
		ignore_sensors = 0;
     bb0:	32 2c       	mov	r3, r2
     bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <ui_control+0x86>
		read_line(user_input, 20);
		switch (user_input[0]) {
		case 'a':
			autonomous();
     bb4:	f9 dd       	rcall	.-1038   	; 0x7a8 <autonomous>
		case 'e':
			// Send sensor data
			show_sensors(sensor_data);
     bb6:	80 91 18 09 	lds	r24, 0x0918
     bba:	90 91 19 09 	lds	r25, 0x0919
     bbe:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <show_sensors>
			break;
     bc2:	e4 cf       	rjmp	.-56     	; 0xb8c <ui_control+0x4a>
		case 'i':
			// Move ignoring sensors
			ignore_sensors = 1;
     bc4:	33 24       	eor	r3, r3
     bc6:	33 94       	inc	r3
		case 'm':
			// Move
			result = move_result(atoi(user_input + 2), sensor_data, ignore_sensors, ignore_sensors, &reason);
     bc8:	60 90 18 09 	lds	r6, 0x0918
     bcc:	70 90 19 09 	lds	r7, 0x0919
     bd0:	c4 01       	movw	r24, r8
     bd2:	0e 94 08 17 	call	0x2e10	; 0x2e10 <atoi>
     bd6:	8e 01       	movw	r16, r28
     bd8:	0f 5f       	subi	r16, 0xFF	; 255
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	23 2d       	mov	r18, r3
     bde:	43 2d       	mov	r20, r3
     be0:	b3 01       	movw	r22, r6
     be2:	58 d5       	rcall	.+2736   	; 0x1694 <move_result>
			sprintf(msg, "m,%d,%s.", result, stop_reason_descrip[reason]);
     be4:	e9 81       	ldd	r30, Y+1	; 0x01
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e2 55       	subi	r30, 0x52	; 82
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	21 81       	ldd	r18, Z+1	; 0x01
     bf2:	2f 93       	push	r18
     bf4:	20 81       	ld	r18, Z
     bf6:	2f 93       	push	r18
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	bf 92       	push	r11
     bfe:	af 92       	push	r10
     c00:	df 92       	push	r13
     c02:	cf 92       	push	r12
     c04:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
			send_msg(msg);
     c08:	c6 01       	movw	r24, r12
     c0a:	e8 da       	rcall	.-2608   	; 0x1dc <send_msg>
			break;
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	ba cf       	rjmp	.-140    	; 0xb8c <ui_control+0x4a>
		case 'r':
			// Rotate
			result = rotate_deg(atoi(user_input + 2), sensor_data);
     c18:	60 90 18 09 	lds	r6, 0x0918
     c1c:	70 90 19 09 	lds	r7, 0x0919
     c20:	c4 01       	movw	r24, r8
     c22:	0e 94 08 17 	call	0x2e10	; 0x2e10 <atoi>
     c26:	b3 01       	movw	r22, r6
     c28:	a4 d3       	rcall	.+1864   	; 0x1372 <rotate_deg>
			sprintf(msg, "r,%d.", result);
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	a8 e7       	ldi	r26, 0x78	; 120
     c30:	b3 e0       	ldi	r27, 0x03	; 3
     c32:	bf 93       	push	r27
     c34:	af 93       	push	r26
     c36:	df 92       	push	r13
     c38:	cf 92       	push	r12
     c3a:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
			send_msg(msg);
     c3e:	c6 01       	movw	r24, r12
     c40:	cd da       	rcall	.-2662   	; 0x1dc <send_msg>
			break;
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	9e cf       	rjmp	.-196    	; 0xb8c <ui_control+0x4a>
		case 'c':
			// Scan
			show_objects();
     c50:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <show_objects>
			break;
     c54:	9b cf       	rjmp	.-202    	; 0xb8c <ui_control+0x4a>
		case  'o':
			songs(DARTHVADER);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	90 d0       	rcall	.+288    	; 0xd7a <songs>
			break;
     c5a:	98 cf       	rjmp	.-208    	; 0xb8c <ui_control+0x4a>

00000c5c <main>:
int main(void)
{
	int initialzed = 0;
		
	// Init hardware
	init_UART();
     c5c:	bb d0       	rcall	.+374    	; 0xdd4 <init_UART>
	lcd_init();
     c5e:	0b d1       	rcall	.+534    	; 0xe76 <lcd_init>
	sensor_data = init_iRobot();
     c60:	c6 d0       	rcall	.+396    	; 0xdee <init_iRobot>
     c62:	90 93 19 09 	sts	0x0919, r25
     c66:	80 93 18 09 	sts	0x0918, r24
	
	lprintf("Welcome to\nBlastOffToMars.c!");
     c6a:	8e e7       	ldi	r24, 0x7E	; 126
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	9f 93       	push	r25
     c70:	8f 93       	push	r24
     c72:	52 d1       	rcall	.+676    	; 0xf18 <lprintf>
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
/**
 * This is the main function for the robot.  It handles the main user input loop.
 */
int main(void)
{
	int initialzed = 0;
     c78:	c0 e0       	ldi	r28, 0x00	; 0
     c7a:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else if (user_choice==SCAN){
			if (!initialzed) {
				send_msg("Please initialize the robot first.\r\n");
			} else {
				lprintf("Scanning the area");
     c7c:	0f 2e       	mov	r0, r31
     c7e:	fa ee       	ldi	r31, 0xEA	; 234
     c80:	af 2e       	mov	r10, r31
     c82:	f4 e0       	ldi	r31, 0x04	; 4
     c84:	bf 2e       	mov	r11, r31
     c86:	f0 2d       	mov	r31, r0
			songs(DARTHVADER);
			lprintf("The robot has reached the retrieval zone");
		}
		else if (user_choice==ZONE_IDENTIFY){
			send_msg("The robot has identified the retrieval zone\r\n");
			lprintf("The robot has identified the retrieval zone");
     c88:	0f 2e       	mov	r0, r31
     c8a:	f9 e9       	ldi	r31, 0x99	; 153
     c8c:	cf 2e       	mov	r12, r31
     c8e:	f4 e0       	ldi	r31, 0x04	; 4
     c90:	df 2e       	mov	r13, r31
     c92:	f0 2d       	mov	r31, r0
			initialzed = 1;
		}
		else if (user_choice==STANDBY){
			send_msg("The robot has reached the retrieval zone\r\n");
			songs(DARTHVADER);
			lprintf("The robot has reached the retrieval zone");
     c94:	0f 2e       	mov	r0, r31
     c96:	f2 e4       	ldi	r31, 0x42	; 66
     c98:	ef 2e       	mov	r14, r31
     c9a:	f4 e0       	ldi	r31, 0x04	; 4
     c9c:	ff 2e       	mov	r15, r31
     c9e:	f0 2d       	mov	r31, r0
	{
		menu_option user_choice = main_menu();
		if (user_choice == INIT){
			send_msg("Welcome to IRobot Mars Robot interface\r\n");
			send_msg("The servo and IR sensor are being initialized\r\n");
			lprintf("The hardware has been initialized.");
     ca0:	04 ef       	ldi	r16, 0xF4	; 244
     ca2:	13 e0       	ldi	r17, 0x03	; 3
			//init hardware methods
			init_servo();
			init_ir();
			songs(MARIO);
			initialzed = 1;
     ca4:	88 24       	eor	r8, r8
     ca6:	83 94       	inc	r8
     ca8:	91 2c       	mov	r9, r1
	
	lprintf("Welcome to\nBlastOffToMars.c!");
	
    while(1)
	{
		menu_option user_choice = main_menu();
     caa:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <main_menu>
		if (user_choice == INIT){
     cae:	81 11       	cpse	r24, r1
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <main+0x7a>
			send_msg("Welcome to IRobot Mars Robot interface\r\n");
     cb2:	8b e9       	ldi	r24, 0x9B	; 155
     cb4:	93 e0       	ldi	r25, 0x03	; 3
     cb6:	92 da       	rcall	.-2780   	; 0x1dc <send_msg>
			send_msg("The servo and IR sensor are being initialized\r\n");
     cb8:	84 ec       	ldi	r24, 0xC4	; 196
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	8f da       	rcall	.-2786   	; 0x1dc <send_msg>
			lprintf("The hardware has been initialized.");
     cbe:	1f 93       	push	r17
     cc0:	0f 93       	push	r16
     cc2:	2a d1       	rcall	.+596    	; 0xf18 <lprintf>
			//init hardware methods
			init_servo();
     cc4:	9d d0       	rcall	.+314    	; 0xe00 <init_servo>
			init_ir();
     cc6:	ad d0       	rcall	.+346    	; 0xe22 <init_ir>
			songs(MARIO);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	57 d0       	rcall	.+174    	; 0xd7a <songs>
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
			initialzed = 1;
     cd0:	c8 2d       	mov	r28, r8
     cd2:	d9 2d       	mov	r29, r9
     cd4:	ea cf       	rjmp	.-44     	; 0xcaa <main+0x4e>
		}
		else if (user_choice==STANDBY){
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	59 f4       	brne	.+22     	; 0xcf0 <main+0x94>
			send_msg("The robot has reached the retrieval zone\r\n");
     cda:	87 e1       	ldi	r24, 0x17	; 23
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	7e da       	rcall	.-2820   	; 0x1dc <send_msg>
			songs(DARTHVADER);
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	4b d0       	rcall	.+150    	; 0xd7a <songs>
			lprintf("The robot has reached the retrieval zone");
     ce4:	ff 92       	push	r15
     ce6:	ef 92       	push	r14
     ce8:	17 d1       	rcall	.+558    	; 0xf18 <lprintf>
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	dd cf       	rjmp	.-70     	; 0xcaa <main+0x4e>
		}
		else if (user_choice==ZONE_IDENTIFY){
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	49 f4       	brne	.+18     	; 0xd06 <main+0xaa>
			send_msg("The robot has identified the retrieval zone\r\n");
     cf4:	8b e6       	ldi	r24, 0x6B	; 107
     cf6:	94 e0       	ldi	r25, 0x04	; 4
     cf8:	71 da       	rcall	.-2846   	; 0x1dc <send_msg>
			lprintf("The robot has identified the retrieval zone");
     cfa:	df 92       	push	r13
     cfc:	cf 92       	push	r12
     cfe:	0c d1       	rcall	.+536    	; 0xf18 <lprintf>
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	d2 cf       	rjmp	.-92     	; 0xcaa <main+0x4e>
		}
		else if (user_choice==MOVEMENT){
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	71 f4       	brne	.+28     	; 0xd26 <main+0xca>
			if (!initialzed) {
     d0a:	20 97       	sbiw	r28, 0x00	; 0
     d0c:	21 f4       	brne	.+8      	; 0xd16 <main+0xba>
				send_msg("Please initialize the robot first.\r\n");
     d0e:	85 ec       	ldi	r24, 0xC5	; 197
     d10:	94 e0       	ldi	r25, 0x04	; 4
     d12:	64 da       	rcall	.-2872   	; 0x1dc <send_msg>
     d14:	ca cf       	rjmp	.-108    	; 0xcaa <main+0x4e>
			} else {
				move_menu(sensor_data, 0);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	80 91 18 09 	lds	r24, 0x0918
     d1c:	90 91 19 09 	lds	r25, 0x0919
     d20:	0e 94 98 10 	call	0x2130	; 0x2130 <move_menu>
     d24:	c2 cf       	rjmp	.-124    	; 0xcaa <main+0x4e>
			}
		} else if (user_choice==MOVEMENT_NO_SENSOR) {
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	41 f4       	brne	.+16     	; 0xd3a <main+0xde>
			move_menu(sensor_data, 1);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	80 91 18 09 	lds	r24, 0x0918
     d30:	90 91 19 09 	lds	r25, 0x0919
     d34:	0e 94 98 10 	call	0x2130	; 0x2130 <move_menu>
     d38:	b8 cf       	rjmp	.-144    	; 0xcaa <main+0x4e>
		}
		else if (user_choice==SCAN){
     d3a:	85 30       	cpi	r24, 0x05	; 5
     d3c:	b9 f4       	brne	.+46     	; 0xd6c <main+0x110>
			if (!initialzed) {
     d3e:	20 97       	sbiw	r28, 0x00	; 0
     d40:	21 f4       	brne	.+8      	; 0xd4a <main+0xee>
				send_msg("Please initialize the robot first.\r\n");
     d42:	85 ec       	ldi	r24, 0xC5	; 197
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	4a da       	rcall	.-2924   	; 0x1dc <send_msg>
     d48:	b0 cf       	rjmp	.-160    	; 0xcaa <main+0x4e>
			} else {
				lprintf("Scanning the area");
     d4a:	bf 92       	push	r11
     d4c:	af 92       	push	r10
     d4e:	e4 d0       	rcall	.+456    	; 0xf18 <lprintf>
								
				show_sensors(sensor_data);
     d50:	80 91 18 09 	lds	r24, 0x0918
     d54:	90 91 19 09 	lds	r25, 0x0919
     d58:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <show_sensors>
				send_msg("Scanning the area...\r\n");
     d5c:	8c ef       	ldi	r24, 0xFC	; 252
     d5e:	94 e0       	ldi	r25, 0x04	; 4
     d60:	3d da       	rcall	.-2950   	; 0x1dc <send_msg>
				show_objects();
     d62:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <show_objects>
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	9f cf       	rjmp	.-194    	; 0xcaa <main+0x4e>
			}
		} else if (user_choice == AUTO) {
     d6c:	86 30       	cpi	r24, 0x06	; 6
     d6e:	09 f4       	brne	.+2      	; 0xd72 <main+0x116>
			// AUTO
			autonomous();
     d70:	1b dd       	rcall	.-1482   	; 0x7a8 <autonomous>
		} else if (user_choice == PROGRAM_UI) {
     d72:	87 30       	cpi	r24, 0x07	; 7
     d74:	09 f0       	breq	.+2      	; 0xd78 <main+0x11c>
     d76:	99 cf       	rjmp	.-206    	; 0xcaa <main+0x4e>
			ui_control();
     d78:	e4 de       	rcall	.-568    	; 0xb42 <ui_control>

00000d7a <songs>:
* @param id The song id to load the song associated with it.
*/
void songs(uint8_t id)
{
		// This will load the song associated with the id.
		switch (id) 
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	89 f0       	breq	.+34     	; 0xda0 <songs+0x26>
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	e1 f0       	breq	.+56     	; 0xdba <songs+0x40>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	31 f5       	brne	.+76     	; 0xdd2 <songs+0x58>
		{
		case MARIO: //This will play the Mario song.
			oi_load_song(MARIO, marioNumNotes, marioNotes, marioDuration);
     d86:	26 e2       	ldi	r18, 0x26	; 38
     d88:	31 e0       	ldi	r19, 0x01	; 1
     d8a:	47 e5       	ldi	r20, 0x57	; 87
     d8c:	51 e0       	ldi	r21, 0x01	; 1
     d8e:	61 e3       	ldi	r22, 0x31	; 49
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	7c d1       	rcall	.+760    	; 0x1090 <oi_load_song>
			oi_play_song(MARIO);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	aa c1       	rjmp	.+852    	; 0x10f2 <oi_play_song>
			break;
     d9e:	08 95       	ret
		case DARTHVADER: //This will play the Star wars song.
			oi_load_song(DARTHVADER, StarwarsNumNotes,StarwarsNotes, StarwarsDurations);
     da0:	28 e8       	ldi	r18, 0x88	; 136
     da2:	31 e0       	ldi	r19, 0x01	; 1
     da4:	4b e9       	ldi	r20, 0x9B	; 155
     da6:	51 e0       	ldi	r21, 0x01	; 1
     da8:	63 e1       	ldi	r22, 0x13	; 19
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	6f d1       	rcall	.+734    	; 0x1090 <oi_load_song>
			oi_play_song(DARTHVADER);
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9d c1       	rjmp	.+826    	; 0x10f2 <oi_play_song>
			break;
     db8:	08 95       	ret
		case RICKROLLED: //This will play the Rick Roll song.
			oi_load_song(RICKROLLED, rickrollNumNotes, rickrollNotes, rickrollDurations);
     dba:	20 e1       	ldi	r18, 0x10	; 16
     dbc:	31 e0       	ldi	r19, 0x01	; 1
     dbe:	4b e1       	ldi	r20, 0x1B	; 27
     dc0:	51 e0       	ldi	r21, 0x01	; 1
     dc2:	6b e0       	ldi	r22, 0x0B	; 11
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	62 d1       	rcall	.+708    	; 0x1090 <oi_load_song>
			oi_play_song(RICKROLLED);
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	90 c1       	rjmp	.+800    	; 0x10f2 <oi_play_song>
     dd2:	08 95       	ret

00000dd4 <init_UART>:
 * Initializes the UART for 2 way communication with the values specified in definitions.h.
 * Interrupts are enabled.
 */
void init_UART() {
	// Set the double transmit speed
	UCSR0A = _BV(U2X) * USART_DOUBLE_TRANSMIT;
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	8b b9       	out	0x0b, r24	; 11
	// RX & TX interrupts and communication enabled
	UCSR0B = _BV(RXCIE) | _BV(TXCIE) | _BV(RXEN) | _BV(TXEN);
     dd8:	88 ed       	ldi	r24, 0xD8	; 216
     dda:	8a b9       	out	0x0a, r24	; 10
	// Mode select, Parity, Stop Bits, and character size
	UCSR0C = (_BV(UMSEL) * USART_SYNCHRONOUS) | (USART_PARITY << UPM0) | (USART_STOP_BITS << USBS) | (USART_DATA_BITS << UCSZ0);
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	80 93 95 00 	sts	0x0095, r24

	// Set BAUD rate
	UBRR0H = USART_UBRR_BAUD >> 8;
     de2:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = USART_UBRR_BAUD & 0xFF;
     de6:	82 e2       	ldi	r24, 0x22	; 34
     de8:	89 b9       	out	0x09, r24	; 9
	
	sei();  // enable interrupts
     dea:	78 94       	sei
     dec:	08 95       	ret

00000dee <init_iRobot>:
/**
 * Initializes the data transfer between the microcontroller and the robot. Initializes all the necessary
 * registers and components for the cliff sensors, the motors, and the bump sensors.
 */
oi_t* init_iRobot()
{
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
    //This will need to be passed around
    oi_t *sensor_data = oi_alloc();
     df2:	0c d1       	rcall	.+536    	; 0x100c <oi_alloc>
     df4:	ec 01       	movw	r28, r24
    oi_init(sensor_data);
     df6:	48 d2       	rcall	.+1168   	; 0x1288 <oi_init>
	return sensor_data;
}
     df8:	ce 01       	movw	r24, r28
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <init_servo>:
/**
 * Initializes Port E pin 4 for output of the PWM signal.  Sets the TOP value to a value that
 * is compatible with the calculations in scan.c.  Sets the servo to 90 degrees.
 */
void init_servo() {
	DDRE |= _BV(4);		// Set port E pin 4 as an output
     e00:	14 9a       	sbi	0x02, 4	; 2
	OCR3A = 43000 - 1;	// TOP - number of cycles in the interval
     e02:	87 ef       	ldi	r24, 0xF7	; 247
     e04:	97 ea       	ldi	r25, 0xA7	; 167
     e06:	90 93 87 00 	sts	0x0087, r25
     e0a:	80 93 86 00 	sts	0x0086, r24
	set_servo_pos(90);		// move servo to the middle
     e0e:	8a e5       	ldi	r24, 0x5A	; 90
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	24 d6       	rcall	.+3144   	; 0x1a5c <set_servo_pos>
	TCCR3A = 0x23;		// set COM and WGM (bits 3 and 2)
     e14:	83 e2       	ldi	r24, 0x23	; 35
     e16:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0x1A;		// set WGM (bits 1 and 0) and CS
     e1a:	8a e1       	ldi	r24, 0x1A	; 26
     e1c:	80 93 8a 00 	sts	0x008A, r24
     e20:	08 95       	ret

00000e22 <init_ir>:
/**
 * Initializes the ADC for a reference voltage of 2.56 V, using input 2, and a prescaler of /128
 */
void init_ir() {
	// Reference voltage is 2.56 V and the MUX to 2
	ADMUX = _BV(REFS1) | _BV(REFS0) | 2; // 0xC2;
     e22:	82 ec       	ldi	r24, 0xC2	; 194
     e24:	87 b9       	out	0x07, r24	; 7
	// Enables the ADC and sets the prescaler to /128
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // 0x87;
     e26:	87 e8       	ldi	r24, 0x87	; 135
     e28:	86 b9       	out	0x06, r24	; 6
     e2a:	08 95       	ret

00000e2c <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     e2c:	de 9a       	sbi	0x1b, 6	; 27
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	73 d2       	rcall	.+1254   	; 0x1318 <wait_ms>
     e32:	de 98       	cbi	0x1b, 6	; 27
     e34:	8b b3       	in	r24, 0x1b	; 27
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8b bb       	out	0x1b, r24	; 27
     e3a:	08 95       	ret

00000e3c <lcd_command>:
     e3c:	cf 93       	push	r28
     e3e:	c8 2f       	mov	r28, r24
     e40:	dc 98       	cbi	0x1b, 4	; 27
     e42:	8b b3       	in	r24, 0x1b	; 27
     e44:	9c 2f       	mov	r25, r28
     e46:	92 95       	swap	r25
     e48:	9f 70       	andi	r25, 0x0F	; 15
     e4a:	89 2b       	or	r24, r25
     e4c:	8b bb       	out	0x1b, r24	; 27
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	ed df       	rcall	.-38     	; 0xe2c <lcd_toggle_clear>
     e52:	8b b3       	in	r24, 0x1b	; 27
     e54:	cf 70       	andi	r28, 0x0F	; 15
     e56:	c8 2b       	or	r28, r24
     e58:	cb bb       	out	0x1b, r28	; 27
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	e7 df       	rcall	.-50     	; 0xe2c <lcd_toggle_clear>
     e5e:	dc 9a       	sbi	0x1b, 4	; 27
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <lcd_clear>:
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	ea df       	rcall	.-44     	; 0xe3c <lcd_command>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	55 c2       	rjmp	.+1194   	; 0x1318 <wait_ms>
     e6e:	08 95       	ret

00000e70 <lcd_home_line1>:
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	e4 cf       	rjmp	.-56     	; 0xe3c <lcd_command>
     e74:	08 95       	ret

00000e76 <lcd_init>:
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	8a bb       	out	0x1a, r24	; 26
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	8b bb       	out	0x1b, r24	; 27
     e7e:	de 9a       	sbi	0x1b, 6	; 27
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	49 d2       	rcall	.+1170   	; 0x1318 <wait_ms>
     e86:	de 98       	cbi	0x1b, 6	; 27
     e88:	85 e0       	ldi	r24, 0x05	; 5
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	45 d2       	rcall	.+1162   	; 0x1318 <wait_ms>
     e8e:	de 9a       	sbi	0x1b, 6	; 27
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	41 d2       	rcall	.+1154   	; 0x1318 <wait_ms>
     e96:	de 98       	cbi	0x1b, 6	; 27
     e98:	de 9a       	sbi	0x1b, 6	; 27
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	3c d2       	rcall	.+1144   	; 0x1318 <wait_ms>
     ea0:	de 98       	cbi	0x1b, 6	; 27
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	8b bb       	out	0x1b, r24	; 27
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	c1 df       	rcall	.-126    	; 0xe2c <lcd_toggle_clear>
     eaa:	8b b3       	in	r24, 0x1b	; 27
     eac:	8b bb       	out	0x1b, r24	; 27
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	bd df       	rcall	.-134    	; 0xe2c <lcd_toggle_clear>
     eb2:	8b b3       	in	r24, 0x1b	; 27
     eb4:	8e 60       	ori	r24, 0x0E	; 14
     eb6:	8b bb       	out	0x1b, r24	; 27
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	b8 df       	rcall	.-144    	; 0xe2c <lcd_toggle_clear>
     ebc:	8b b3       	in	r24, 0x1b	; 27
     ebe:	8b bb       	out	0x1b, r24	; 27
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	b4 df       	rcall	.-152    	; 0xe2c <lcd_toggle_clear>
     ec4:	8b b3       	in	r24, 0x1b	; 27
     ec6:	86 60       	ori	r24, 0x06	; 6
     ec8:	8b bb       	out	0x1b, r24	; 27
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	af df       	rcall	.-162    	; 0xe2c <lcd_toggle_clear>
     ece:	8b b3       	in	r24, 0x1b	; 27
     ed0:	8b bb       	out	0x1b, r24	; 27
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	ab df       	rcall	.-170    	; 0xe2c <lcd_toggle_clear>
     ed6:	d8 9a       	sbi	0x1b, 0	; 27
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	a8 df       	rcall	.-176    	; 0xe2c <lcd_toggle_clear>
     edc:	dc 9a       	sbi	0x1b, 4	; 27
     ede:	c8 cf       	rjmp	.-112    	; 0xe70 <lcd_home_line1>
     ee0:	08 95       	ret

00000ee2 <lcd_home_line2>:
     ee2:	80 ec       	ldi	r24, 0xC0	; 192
     ee4:	ab cf       	rjmp	.-170    	; 0xe3c <lcd_command>
     ee6:	08 95       	ret

00000ee8 <lcd_home_line3>:
     ee8:	84 e9       	ldi	r24, 0x94	; 148
     eea:	a8 cf       	rjmp	.-176    	; 0xe3c <lcd_command>
     eec:	08 95       	ret

00000eee <lcd_home_line4>:
     eee:	84 ed       	ldi	r24, 0xD4	; 212
     ef0:	a5 cf       	rjmp	.-182    	; 0xe3c <lcd_command>
     ef2:	08 95       	ret

00000ef4 <lcd_putc>:
     ef4:	cf 93       	push	r28
     ef6:	c8 2f       	mov	r28, r24
     ef8:	8b b3       	in	r24, 0x1b	; 27
     efa:	9c 2f       	mov	r25, r28
     efc:	92 95       	swap	r25
     efe:	9f 70       	andi	r25, 0x0F	; 15
     f00:	89 2b       	or	r24, r25
     f02:	8b bb       	out	0x1b, r24	; 27
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	92 df       	rcall	.-220    	; 0xe2c <lcd_toggle_clear>
     f08:	8b b3       	in	r24, 0x1b	; 27
     f0a:	cf 70       	andi	r28, 0x0F	; 15
     f0c:	c8 2b       	or	r28, r24
     f0e:	cb bb       	out	0x1b, r28	; 27
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	8c df       	rcall	.-232    	; 0xe2c <lcd_toggle_clear>
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	c1 55       	subi	r28, 0x51	; 81
     f2e:	d1 09       	sbc	r29, r1
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	fe 01       	movw	r30, r28
     f3c:	e4 5a       	subi	r30, 0xA4	; 164
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	41 91       	ld	r20, Z+
     f42:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     f44:	9f 01       	movw	r18, r30
     f46:	61 e5       	ldi	r22, 0x51	; 81
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     f52:	be 01       	movw	r22, r28
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8b e1       	ldi	r24, 0x1B	; 27
     f5a:	98 e0       	ldi	r25, 0x08	; 8
     f5c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <strcmp>
     f60:	89 2b       	or	r24, r25
     f62:	09 f4       	brne	.+2      	; 0xf66 <lprintf+0x4e>
     f64:	43 c0       	rjmp	.+134    	; 0xfec <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     f66:	be 01       	movw	r22, r28
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8b e1       	ldi	r24, 0x1B	; 27
     f6e:	98 e0       	ldi	r25, 0x08	; 8
     f70:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <strcpy>
	lcd_clear();
     f74:	77 df       	rcall	.-274    	; 0xe64 <lcd_clear>
     f76:	9e 01       	movw	r18, r28
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     f82:	0f 2e       	mov	r0, r31
     f84:	f4 e1       	ldi	r31, 0x14	; 20
     f86:	ef 2e       	mov	r14, r31
     f88:	f1 2c       	mov	r15, r1
     f8a:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     f8c:	27 c0       	rjmp	.+78     	; 0xfdc <lprintf+0xc4>
		if (*str == '\n') {
     f8e:	8a 30       	cpi	r24, 0x0A	; 10
     f90:	51 f4       	brne	.+20     	; 0xfa6 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     f92:	c8 01       	movw	r24, r16
     f94:	b7 01       	movw	r22, r14
     f96:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__divmodhi4>
     f9a:	f7 01       	movw	r30, r14
     f9c:	e8 1b       	sub	r30, r24
     f9e:	f9 0b       	sbc	r31, r25
     fa0:	0e 0f       	add	r16, r30
     fa2:	1f 1f       	adc	r17, r31
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <lprintf+0x94>
		} else {
			lcd_putc(*str);
     fa6:	a6 df       	rcall	.-180    	; 0xef4 <lcd_putc>
			charnum++;
     fa8:	0f 5f       	subi	r16, 0xFF	; 255
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     fac:	c8 01       	movw	r24, r16
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__divmodhi4>
     fb4:	89 2b       	or	r24, r25
     fb6:	91 f4       	brne	.+36     	; 0xfdc <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     fb8:	c8 01       	movw	r24, r16
     fba:	b7 01       	movw	r22, r14
     fbc:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__divmodhi4>
     fc0:	62 30       	cpi	r22, 0x02	; 2
     fc2:	71 05       	cpc	r23, r1
     fc4:	41 f0       	breq	.+16     	; 0xfd6 <lprintf+0xbe>
     fc6:	63 30       	cpi	r22, 0x03	; 3
     fc8:	71 05       	cpc	r23, r1
     fca:	39 f0       	breq	.+14     	; 0xfda <lprintf+0xc2>
     fcc:	61 30       	cpi	r22, 0x01	; 1
     fce:	71 05       	cpc	r23, r1
     fd0:	29 f4       	brne	.+10     	; 0xfdc <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     fd2:	87 df       	rcall	.-242    	; 0xee2 <lcd_home_line2>
				break;
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     fd6:	88 df       	rcall	.-240    	; 0xee8 <lcd_home_line3>
				break;
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     fda:	89 df       	rcall	.-238    	; 0xeee <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     fdc:	f6 01       	movw	r30, r12
     fde:	81 91       	ld	r24, Z+
     fe0:	6f 01       	movw	r12, r30
     fe2:	88 23       	and	r24, r24
     fe4:	19 f0       	breq	.+6      	; 0xfec <lprintf+0xd4>
     fe6:	00 35       	cpi	r16, 0x50	; 80
     fe8:	11 05       	cpc	r17, r1
     fea:	8c f2       	brlt	.-94     	; 0xf8e <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     fec:	cf 5a       	subi	r28, 0xAF	; 175
     fee:	df 4f       	sbci	r29, 0xFF	; 255
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	08 95       	ret

0000100c <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
    100c:	64 e3       	ldi	r22, 0x34	; 52
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <calloc>
    1018:	08 95       	ret

0000101a <oi_byte_tx>:
    101a:	eb e9       	ldi	r30, 0x9B	; 155
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	90 81       	ld	r25, Z
    1020:	95 ff       	sbrs	r25, 5
    1022:	fd cf       	rjmp	.-6      	; 0x101e <oi_byte_tx+0x4>
    1024:	80 93 9c 00 	sts	0x009C, r24
    1028:	08 95       	ret

0000102a <oi_set_leds>:
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	08 2f       	mov	r16, r24
    1034:	16 2f       	mov	r17, r22
    1036:	d4 2f       	mov	r29, r20
    1038:	c2 2f       	mov	r28, r18
    103a:	8b e8       	ldi	r24, 0x8B	; 139
    103c:	ee df       	rcall	.-36     	; 0x101a <oi_byte_tx>
    103e:	11 23       	and	r17, r17
    1040:	29 f0       	breq	.+10     	; 0x104c <oi_set_leds+0x22>
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	01 11       	cpse	r16, r1
    1046:	03 c0       	rjmp	.+6      	; 0x104e <oi_set_leds+0x24>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	01 c0       	rjmp	.+2      	; 0x104e <oi_set_leds+0x24>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	e5 df       	rcall	.-54     	; 0x101a <oi_byte_tx>
    1050:	8d 2f       	mov	r24, r29
    1052:	e3 df       	rcall	.-58     	; 0x101a <oi_byte_tx>
    1054:	8c 2f       	mov	r24, r28
    1056:	e1 df       	rcall	.-62     	; 0x101a <oi_byte_tx>
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <oi_set_wheels>:
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	18 2f       	mov	r17, r24
    106c:	09 2f       	mov	r16, r25
    106e:	c6 2f       	mov	r28, r22
    1070:	d7 2f       	mov	r29, r23
    1072:	81 e9       	ldi	r24, 0x91	; 145
    1074:	d2 df       	rcall	.-92     	; 0x101a <oi_byte_tx>
    1076:	80 2f       	mov	r24, r16
    1078:	d0 df       	rcall	.-96     	; 0x101a <oi_byte_tx>
    107a:	81 2f       	mov	r24, r17
    107c:	ce df       	rcall	.-100    	; 0x101a <oi_byte_tx>
    107e:	8d 2f       	mov	r24, r29
    1080:	cc df       	rcall	.-104    	; 0x101a <oi_byte_tx>
    1082:	8c 2f       	mov	r24, r28
    1084:	ca df       	rcall	.-108    	; 0x101a <oi_byte_tx>
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <oi_load_song>:
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	c8 2f       	mov	r28, r24
    10a6:	7b 01       	movw	r14, r22
    10a8:	6a 01       	movw	r12, r20
    10aa:	a2 2e       	mov	r10, r18
    10ac:	b3 2e       	mov	r11, r19
    10ae:	8c e8       	ldi	r24, 0x8C	; 140
    10b0:	b4 df       	rcall	.-152    	; 0x101a <oi_byte_tx>
    10b2:	8c 2f       	mov	r24, r28
    10b4:	b2 df       	rcall	.-156    	; 0x101a <oi_byte_tx>
    10b6:	8e 2d       	mov	r24, r14
    10b8:	b0 df       	rcall	.-160    	; 0x101a <oi_byte_tx>
    10ba:	1e 14       	cp	r1, r14
    10bc:	1f 04       	cpc	r1, r15
    10be:	74 f4       	brge	.+28     	; 0x10dc <oi_load_song+0x4c>
    10c0:	e6 01       	movw	r28, r12
    10c2:	0a 2d       	mov	r16, r10
    10c4:	1b 2d       	mov	r17, r11
    10c6:	ec 0c       	add	r14, r12
    10c8:	fd 1c       	adc	r15, r13
    10ca:	89 91       	ld	r24, Y+
    10cc:	a6 df       	rcall	.-180    	; 0x101a <oi_byte_tx>
    10ce:	f8 01       	movw	r30, r16
    10d0:	81 91       	ld	r24, Z+
    10d2:	8f 01       	movw	r16, r30
    10d4:	a2 df       	rcall	.-188    	; 0x101a <oi_byte_tx>
    10d6:	ce 15       	cp	r28, r14
    10d8:	df 05       	cpc	r29, r15
    10da:	b9 f7       	brne	.-18     	; 0x10ca <oi_load_song+0x3a>
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	08 95       	ret

000010f2 <oi_play_song>:
    10f2:	cf 93       	push	r28
    10f4:	c8 2f       	mov	r28, r24
    10f6:	8d e8       	ldi	r24, 0x8D	; 141
    10f8:	90 df       	rcall	.-224    	; 0x101a <oi_byte_tx>
    10fa:	8c 2f       	mov	r24, r28
    10fc:	8e df       	rcall	.-228    	; 0x101a <oi_byte_tx>
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
    1102:	eb e9       	ldi	r30, 0x9B	; 155
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 23       	and	r24, r24
    110a:	ec f7       	brge	.-6      	; 0x1106 <oi_byte_rx+0x4>

	return UDR1;
    110c:	80 91 9c 00 	lds	r24, 0x009C
}
    1110:	08 95       	ret

00001112 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC))
    1120:	80 91 9b 00 	lds	r24, 0x009B
    1124:	88 23       	and	r24, r24
    1126:	44 f4       	brge	.+16     	; 0x1138 <oi_update+0x26>
	i = UDR1;
    1128:	ac e9       	ldi	r26, 0x9C	; 156
    112a:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC))
    112c:	eb e9       	ldi	r30, 0x9B	; 155
    112e:	f0 e0       	ldi	r31, 0x00	; 0
	i = UDR1;
    1130:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC))
    1132:	80 81       	ld	r24, Z
    1134:	88 23       	and	r24, r24
    1136:	e4 f3       	brlt	.-8      	; 0x1130 <oi_update+0x1e>
	i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
    1138:	8e e8       	ldi	r24, 0x8E	; 142
    113a:	6f df       	rcall	.-290    	; 0x101a <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6);
    113c:	86 e0       	ldi	r24, 0x06	; 6
    113e:	6d df       	rcall	.-294    	; 0x101a <oi_byte_tx>
    1140:	e7 01       	movw	r28, r14
    1142:	87 01       	movw	r16, r14
    1144:	0c 5c       	subi	r16, 0xCC	; 204
    1146:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
    1148:	dc df       	rcall	.-72     	; 0x1102 <oi_byte_rx>
    114a:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6);

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
    114c:	c0 17       	cp	r28, r16
    114e:	d1 07       	cpc	r29, r17
    1150:	d9 f7       	brne	.-10     	; 0x1148 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
    1152:	f7 01       	movw	r30, r14
    1154:	84 85       	ldd	r24, Z+12	; 0x0c
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	98 2f       	mov	r25, r24
    115a:	88 27       	eor	r24, r24
    115c:	25 85       	ldd	r18, Z+13	; 0x0d
    115e:	82 0f       	add	r24, r18
    1160:	91 1d       	adc	r25, r1
    1162:	95 87       	std	Z+13, r25	; 0x0d
    1164:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
    1166:	86 85       	ldd	r24, Z+14	; 0x0e
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	98 2f       	mov	r25, r24
    116c:	88 27       	eor	r24, r24
    116e:	27 85       	ldd	r18, Z+15	; 0x0f
    1170:	82 0f       	add	r24, r18
    1172:	91 1d       	adc	r25, r1
    1174:	97 87       	std	Z+15, r25	; 0x0f
    1176:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
    1178:	81 89       	ldd	r24, Z+17	; 0x11
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	98 2f       	mov	r25, r24
    117e:	88 27       	eor	r24, r24
    1180:	22 89       	ldd	r18, Z+18	; 0x12
    1182:	82 0f       	add	r24, r18
    1184:	91 1d       	adc	r25, r1
    1186:	92 8b       	std	Z+18, r25	; 0x12
    1188:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
    118a:	83 89       	ldd	r24, Z+19	; 0x13
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	98 2f       	mov	r25, r24
    1190:	88 27       	eor	r24, r24
    1192:	24 89       	ldd	r18, Z+20	; 0x14
    1194:	82 0f       	add	r24, r18
    1196:	91 1d       	adc	r25, r1
    1198:	94 8b       	std	Z+20, r25	; 0x14
    119a:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
    119c:	86 89       	ldd	r24, Z+22	; 0x16
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	98 2f       	mov	r25, r24
    11a2:	88 27       	eor	r24, r24
    11a4:	27 89       	ldd	r18, Z+23	; 0x17
    11a6:	82 0f       	add	r24, r18
    11a8:	91 1d       	adc	r25, r1
    11aa:	97 8b       	std	Z+23, r25	; 0x17
    11ac:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
    11ae:	80 8d       	ldd	r24, Z+24	; 0x18
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	98 2f       	mov	r25, r24
    11b4:	88 27       	eor	r24, r24
    11b6:	21 8d       	ldd	r18, Z+25	; 0x19
    11b8:	82 0f       	add	r24, r18
    11ba:	91 1d       	adc	r25, r1
    11bc:	91 8f       	std	Z+25, r25	; 0x19
    11be:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
    11c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	98 2f       	mov	r25, r24
    11c6:	88 27       	eor	r24, r24
    11c8:	23 8d       	ldd	r18, Z+27	; 0x1b
    11ca:	82 0f       	add	r24, r18
    11cc:	91 1d       	adc	r25, r1
    11ce:	93 8f       	std	Z+27, r25	; 0x1b
    11d0:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
    11d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	98 2f       	mov	r25, r24
    11d8:	88 27       	eor	r24, r24
    11da:	25 8d       	ldd	r18, Z+29	; 0x1d
    11dc:	82 0f       	add	r24, r18
    11de:	91 1d       	adc	r25, r1
    11e0:	95 8f       	std	Z+29, r25	; 0x1d
    11e2:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31];
    11e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	98 2f       	mov	r25, r24
    11ea:	88 27       	eor	r24, r24
    11ec:	27 8d       	ldd	r18, Z+31	; 0x1f
    11ee:	82 0f       	add	r24, r18
    11f0:	91 1d       	adc	r25, r1
    11f2:	97 8f       	std	Z+31, r25	; 0x1f
    11f4:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
    11f6:	80 a1       	ldd	r24, Z+32	; 0x20
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	98 2f       	mov	r25, r24
    11fc:	88 27       	eor	r24, r24
    11fe:	21 a1       	ldd	r18, Z+33	; 0x21
    1200:	82 0f       	add	r24, r18
    1202:	91 1d       	adc	r25, r1
    1204:	91 a3       	std	Z+33, r25	; 0x21
    1206:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
    1208:	82 a1       	ldd	r24, Z+34	; 0x22
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	98 2f       	mov	r25, r24
    120e:	88 27       	eor	r24, r24
    1210:	23 a1       	ldd	r18, Z+35	; 0x23
    1212:	82 0f       	add	r24, r18
    1214:	91 1d       	adc	r25, r1
    1216:	93 a3       	std	Z+35, r25	; 0x23
    1218:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
    121a:	82 a5       	ldd	r24, Z+42	; 0x2a
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	21 a5       	ldd	r18, Z+41	; 0x29
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	32 2f       	mov	r19, r18
    1224:	22 27       	eor	r18, r18
    1226:	28 0f       	add	r18, r24
    1228:	39 1f       	adc	r19, r25
    122a:	36 a3       	std	Z+38, r19	; 0x26
    122c:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
    122e:	20 a9       	ldd	r18, Z+48	; 0x30
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	32 2f       	mov	r19, r18
    1234:	22 27       	eor	r18, r18
    1236:	82 0f       	add	r24, r18
    1238:	93 1f       	adc	r25, r19
    123a:	95 a7       	std	Z+45, r25	; 0x2d
    123c:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
    123e:	82 a9       	ldd	r24, Z+50	; 0x32
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	98 2f       	mov	r25, r24
    1244:	88 27       	eor	r24, r24
    1246:	23 a9       	ldd	r18, Z+51	; 0x33
    1248:	82 0f       	add	r24, r18
    124a:	91 1d       	adc	r25, r1
    124c:	97 a7       	std	Z+47, r25	; 0x2f
    124e:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    1250:	84 a9       	ldd	r24, Z+52	; 0x34
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	98 2f       	mov	r25, r24
    1256:	88 27       	eor	r24, r24
    1258:	25 a9       	ldd	r18, Z+53	; 0x35
    125a:	82 0f       	add	r24, r18
    125c:	91 1d       	adc	r25, r1
    125e:	91 ab       	std	Z+49, r25	; 0x31
    1260:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    1262:	86 a9       	ldd	r24, Z+54	; 0x36
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	98 2f       	mov	r25, r24
    1268:	88 27       	eor	r24, r24
    126a:	27 a9       	ldd	r18, Z+55	; 0x37
    126c:	82 0f       	add	r24, r18
    126e:	91 1d       	adc	r25, r1
    1270:	93 ab       	std	Z+51, r25	; 0x33
    1272:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(10); // reduces USART errors that occur when continuously transmitting/receiving
    1274:	8a e0       	ldi	r24, 0x0A	; 10
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	4f d0       	rcall	.+158    	; 0x1318 <wait_ms>
}
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	08 95       	ret

00001288 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    1292:	09 e9       	ldi	r16, 0x99	; 153
    1294:	10 e0       	ldi	r17, 0x00	; 0
    1296:	80 e1       	ldi	r24, 0x10	; 16
    1298:	f8 01       	movw	r30, r16
    129a:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    129c:	88 e1       	ldi	r24, 0x18	; 24
    129e:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    12a2:	86 e0       	ldi	r24, 0x06	; 6
    12a4:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	b7 de       	rcall	.-658    	; 0x101a <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    12ac:	81 e8       	ldi	r24, 0x81	; 129
    12ae:	b5 de       	rcall	.-662    	; 0x101a <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    12b0:	88 e0       	ldi	r24, 0x08	; 8
    12b2:	b3 de       	rcall	.-666    	; 0x101a <oi_byte_tx>
	wait_ms(100);
    12b4:	84 e6       	ldi	r24, 0x64	; 100
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2f d0       	rcall	.+94     	; 0x1318 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    12ba:	81 e2       	ldi	r24, 0x21	; 33
    12bc:	f8 01       	movw	r30, r16
    12be:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    12c0:	84 e8       	ldi	r24, 0x84	; 132
    12c2:	ab de       	rcall	.-682    	; 0x101a <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    12c4:	2f ef       	ldi	r18, 0xFF	; 255
    12c6:	47 e0       	ldi	r20, 0x07	; 7
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	ae de       	rcall	.-676    	; 0x102a <oi_set_leds>
	
	oi_update(self);
    12ce:	ce 01       	movw	r24, r28
    12d0:	20 df       	rcall	.-448    	; 0x1112 <oi_update>
	oi_update(self); // call twice to clear distance/angle
    12d2:	ce 01       	movw	r24, r28
    12d4:	1e df       	rcall	.-452    	; 0x1112 <oi_update>
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
    12e0:	10 92 1b 09 	sts	0x091B, r1
    12e4:	10 92 1a 09 	sts	0x091A, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    12e8:	81 11       	cpse	r24, r1
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    12ec:	8b e0       	ldi	r24, 0x0B	; 11
    12ee:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    12f0:	87 b7       	in	r24, 0x37	; 55
    12f2:	80 68       	ori	r24, 0x80	; 128
    12f4:	87 bf       	out	0x37, r24	; 55
    12f6:	07 c0       	rjmp	.+14     	; 0x1306 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	29 f4       	brne	.+10     	; 0x1306 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    12fc:	89 e0       	ldi	r24, 0x09	; 9
    12fe:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    1300:	87 b7       	in	r24, 0x37	; 55
    1302:	80 68       	ori	r24, 0x80	; 128
    1304:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    1306:	78 94       	sei
    1308:	08 95       	ret

0000130a <timer2_stop>:
}


// Stop timer2
void timer2_stop(void) {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    130a:	87 b7       	in	r24, 0x37	; 55
    130c:	8f 77       	andi	r24, 0x7F	; 127
    130e:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    1310:	85 b5       	in	r24, 0x25	; 37
    1312:	8f 77       	andi	r24, 0x7F	; 127
    1314:	85 bd       	out	0x25, r24	; 37
    1316:	08 95       	ret

00001318 <wait_ms>:
void timer2_start(char unit);
void timer2_stop(void);


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    131e:	8a ef       	ldi	r24, 0xFA	; 250
    1320:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    1322:	10 92 1b 09 	sts	0x091B, r1
    1326:	10 92 1a 09 	sts	0x091A, r1
	timer2_start(0);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	d9 df       	rcall	.-78     	; 0x12e0 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    132e:	20 91 1a 09 	lds	r18, 0x091A
    1332:	30 91 1b 09 	lds	r19, 0x091B
    1336:	2c 17       	cp	r18, r28
    1338:	3d 07       	cpc	r19, r29
    133a:	c8 f3       	brcs	.-14     	; 0x132e <wait_ms+0x16>

	timer2_stop();
    133c:	e6 df       	rcall	.-52     	; 0x130a <timer2_stop>
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    1344:	1f 92       	push	r1
    1346:	0f 92       	push	r0
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	0f 92       	push	r0
    134c:	11 24       	eor	r1, r1
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
	timer2_tick++;
    1352:	80 91 1a 09 	lds	r24, 0x091A
    1356:	90 91 1b 09 	lds	r25, 0x091B
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	90 93 1b 09 	sts	0x091B, r25
    1360:	80 93 1a 09 	sts	0x091A, r24
}
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <rotate_deg>:
 * Positive angles are counter clockwise; negative angles are clockwise.
 * @param deg angle in degrees for the roboto to rotate
 * @param sensor_data the oi_t struct containing all the robots data
 */
int rotate_deg(int deg, oi_t* sensor_data)
{
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	7c 01       	movw	r14, r24
    1380:	8b 01       	movw	r16, r22
	int degree = 0;
    if(deg < 0)
    1382:	99 23       	and	r25, r25
    1384:	94 f4       	brge	.+36     	; 0x13aa <rotate_deg+0x38>
    {
        //For turning cw
		oi_set_wheels(-200, 200);
    1386:	68 ec       	ldi	r22, 0xC8	; 200
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	88 e3       	ldi	r24, 0x38	; 56
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    138e:	69 de       	rcall	.-814    	; 0x1062 <oi_set_wheels>
 * @param deg angle in degrees for the roboto to rotate
 * @param sensor_data the oi_t struct containing all the robots data
 */
int rotate_deg(int deg, oi_t* sensor_data)
{
	int degree = 0;
    1390:	c0 e0       	ldi	r28, 0x00	; 0
    1392:	d0 e0       	ldi	r29, 0x00	; 0
    {
        //For turning cw
		oi_set_wheels(-200, 200);
        while (degree > deg)
        {
            oi_update(sensor_data);
    1394:	c8 01       	movw	r24, r16
    1396:	bd de       	rcall	.-646    	; 0x1112 <oi_update>
            degree += sensor_data->angle;
    1398:	f8 01       	movw	r30, r16
    139a:	86 85       	ldd	r24, Z+14	; 0x0e
    139c:	97 85       	ldd	r25, Z+15	; 0x0f
    139e:	c8 0f       	add	r28, r24
    13a0:	d9 1f       	adc	r29, r25
	int degree = 0;
    if(deg < 0)
    {
        //For turning cw
		oi_set_wheels(-200, 200);
        while (degree > deg)
    13a2:	ec 16       	cp	r14, r28
    13a4:	fd 06       	cpc	r15, r29
    13a6:	b4 f3       	brlt	.-20     	; 0x1394 <rotate_deg+0x22>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <rotate_deg+0x60>

        }
    }
    else{
        //For turning ccw
		oi_set_wheels(200, -200);
    13aa:	68 e3       	ldi	r22, 0x38	; 56
    13ac:	7f ef       	ldi	r23, 0xFF	; 255
    13ae:	88 ec       	ldi	r24, 0xC8	; 200
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	57 de       	rcall	.-850    	; 0x1062 <oi_set_wheels>
        while (degree < deg)
    13b4:	1e 14       	cp	r1, r14
    13b6:	1f 04       	cpc	r1, r15
    13b8:	64 f4       	brge	.+24     	; 0x13d2 <rotate_deg+0x60>
 * @param deg angle in degrees for the roboto to rotate
 * @param sensor_data the oi_t struct containing all the robots data
 */
int rotate_deg(int deg, oi_t* sensor_data)
{
	int degree = 0;
    13ba:	c0 e0       	ldi	r28, 0x00	; 0
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
    else{
        //For turning ccw
		oi_set_wheels(200, -200);
        while (degree < deg)
        {
            oi_update(sensor_data);
    13be:	c8 01       	movw	r24, r16
    13c0:	a8 de       	rcall	.-688    	; 0x1112 <oi_update>
            degree += sensor_data->angle;
    13c2:	f8 01       	movw	r30, r16
    13c4:	26 85       	ldd	r18, Z+14	; 0x0e
    13c6:	37 85       	ldd	r19, Z+15	; 0x0f
    13c8:	c2 0f       	add	r28, r18
    13ca:	d3 1f       	adc	r29, r19
        }
    }
    else{
        //For turning ccw
		oi_set_wheels(200, -200);
        while (degree < deg)
    13cc:	ce 15       	cp	r28, r14
    13ce:	df 05       	cpc	r29, r15
    13d0:	b4 f3       	brlt	.-20     	; 0x13be <rotate_deg+0x4c>
            oi_update(sensor_data);
            degree += sensor_data->angle;

        }
    }
    oi_set_wheels(0, 0);
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	43 de       	rcall	.-890    	; 0x1062 <oi_set_wheels>
	return deg;
}
    13dc:	c7 01       	movw	r24, r14
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	08 95       	ret

000013ec <read_cliff_signals>:
 * When a color is sensed in the cliff signals, and the value is greater than 500, the robot stops and backs up,
 * ignoring color and cliffs and bumps.
 * @param sensor_data the oi_t struct containing all the robots data
 */
int read_cliff_signals( oi_t* sensor_data)
{
    13ec:	6f 92       	push	r6
    13ee:	7f 92       	push	r7
    13f0:	8f 92       	push	r8
    13f2:	9f 92       	push	r9
    13f4:	af 92       	push	r10
    13f6:	bf 92       	push	r11
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	ec 01       	movw	r28, r24
	static uint16_t average_fright_signal=0;
	static uint16_t last_left_signal[5];
	static uint16_t last_fleft_signal[5];
	static uint16_t last_fright_signal[5];
	static uint16_t last_right_signal[5];
	lprintf("%d, %d, %d, %d",average_left_signal,average_fleft_signal,average_right_signal,average_fright_signal);
    140a:	80 91 9e 08 	lds	r24, 0x089E
    140e:	8f 93       	push	r24
    1410:	80 91 9d 08 	lds	r24, 0x089D
    1414:	8f 93       	push	r24
    1416:	80 91 9c 08 	lds	r24, 0x089C
    141a:	8f 93       	push	r24
    141c:	80 91 9b 08 	lds	r24, 0x089B
    1420:	8f 93       	push	r24
    1422:	80 91 9a 08 	lds	r24, 0x089A
    1426:	8f 93       	push	r24
    1428:	80 91 99 08 	lds	r24, 0x0899
    142c:	8f 93       	push	r24
    142e:	80 91 98 08 	lds	r24, 0x0898
    1432:	8f 93       	push	r24
    1434:	80 91 97 08 	lds	r24, 0x0897
    1438:	8f 93       	push	r24
    143a:	83 e1       	ldi	r24, 0x13	; 19
    143c:	95 e0       	ldi	r25, 0x05	; 5
    143e:	9f 93       	push	r25
    1440:	8f 93       	push	r24
    1442:	6a dd       	rcall	.-1324   	; 0xf18 <lprintf>

	if (initialized) {
    1444:	8d b7       	in	r24, 0x3d	; 61
    1446:	9e b7       	in	r25, 0x3e	; 62
    1448:	0a 96       	adiw	r24, 0x0a	; 10
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	9e bf       	out	0x3e, r25	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	8d bf       	out	0x3d, r24	; 61
    1454:	80 91 96 08 	lds	r24, 0x0896
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <read_cliff_signals+0x72>
    145c:	54 c0       	rjmp	.+168    	; 0x1506 <read_cliff_signals+0x11a>
		if (sensor_data->cliff_left_signal > average_left_signal * 2) {
    145e:	80 91 97 08 	lds	r24, 0x0897
    1462:	90 91 98 08 	lds	r25, 0x0898
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    146c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    146e:	82 17       	cp	r24, r18
    1470:	93 07       	cpc	r25, r19
    1472:	50 f4       	brcc	.+20     	; 0x1488 <read_cliff_signals+0x9c>
			result = move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    1474:	00 e0       	ldi	r16, 0x00	; 0
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	be 01       	movw	r22, r28
    147e:	8c e9       	ldi	r24, 0x9C	; 156
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	08 d1       	rcall	.+528    	; 0x1694 <move_result>
    1484:	5c 01       	movw	r10, r24
    1486:	6c c0       	rjmp	.+216    	; 0x1560 <read_cliff_signals+0x174>
			} else if (sensor_data->cliff_frontleft_signal > average_fleft_signal * 2) {
    1488:	80 91 99 08 	lds	r24, 0x0899
    148c:	90 91 9a 08 	lds	r25, 0x089A
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1496:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1498:	82 17       	cp	r24, r18
    149a:	93 07       	cpc	r25, r19
    149c:	50 f4       	brcc	.+20     	; 0x14b2 <read_cliff_signals+0xc6>
			result = move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    149e:	00 e0       	ldi	r16, 0x00	; 0
    14a0:	10 e0       	ldi	r17, 0x00	; 0
    14a2:	21 e0       	ldi	r18, 0x01	; 1
    14a4:	41 e0       	ldi	r20, 0x01	; 1
    14a6:	be 01       	movw	r22, r28
    14a8:	8c e9       	ldi	r24, 0x9C	; 156
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	f3 d0       	rcall	.+486    	; 0x1694 <move_result>
    14ae:	5c 01       	movw	r10, r24
    14b0:	57 c0       	rjmp	.+174    	; 0x1560 <read_cliff_signals+0x174>
			} else if (sensor_data->cliff_right_signal > average_right_signal * 2) {
    14b2:	80 91 9b 08 	lds	r24, 0x089B
    14b6:	90 91 9c 08 	lds	r25, 0x089C
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	2a a1       	ldd	r18, Y+34	; 0x22
    14c0:	3b a1       	ldd	r19, Y+35	; 0x23
    14c2:	82 17       	cp	r24, r18
    14c4:	93 07       	cpc	r25, r19
    14c6:	50 f4       	brcc	.+20     	; 0x14dc <read_cliff_signals+0xf0>
			result = move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    14c8:	00 e0       	ldi	r16, 0x00	; 0
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	be 01       	movw	r22, r28
    14d2:	8c e9       	ldi	r24, 0x9C	; 156
    14d4:	9f ef       	ldi	r25, 0xFF	; 255
    14d6:	de d0       	rcall	.+444    	; 0x1694 <move_result>
    14d8:	5c 01       	movw	r10, r24
    14da:	42 c0       	rjmp	.+132    	; 0x1560 <read_cliff_signals+0x174>
			} else if (sensor_data->cliff_frontright_signal > average_fright_signal * 2) {
    14dc:	80 91 9d 08 	lds	r24, 0x089D
    14e0:	90 91 9e 08 	lds	r25, 0x089E
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	28 a1       	ldd	r18, Y+32	; 0x20
    14ea:	39 a1       	ldd	r19, Y+33	; 0x21
    14ec:	82 17       	cp	r24, r18
    14ee:	93 07       	cpc	r25, r19
    14f0:	90 f5       	brcc	.+100    	; 0x1556 <read_cliff_signals+0x16a>
			result = move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    14f2:	00 e0       	ldi	r16, 0x00	; 0
    14f4:	10 e0       	ldi	r17, 0x00	; 0
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	be 01       	movw	r22, r28
    14fc:	8c e9       	ldi	r24, 0x9C	; 156
    14fe:	9f ef       	ldi	r25, 0xFF	; 255
    1500:	c9 d0       	rcall	.+402    	; 0x1694 <move_result>
    1502:	5c 01       	movw	r10, r24
    1504:	2d c0       	rjmp	.+90     	; 0x1560 <read_cliff_signals+0x174>
	}
	else
	{
		for(int k=0;k<5;k++)
		{
			last_left_signal[k]=sensor_data->cliff_left_signal;
    1506:	cc 8c       	ldd	r12, Y+28	; 0x1c
    1508:	dd 8c       	ldd	r13, Y+29	; 0x1d
			last_fleft_signal[k]=sensor_data->cliff_frontleft_signal;
    150a:	ee 8c       	ldd	r14, Y+30	; 0x1e
    150c:	ff 8c       	ldd	r15, Y+31	; 0x1f
			last_right_signal[k]=sensor_data->cliff_right_signal;
    150e:	0a a1       	ldd	r16, Y+34	; 0x22
    1510:	1b a1       	ldd	r17, Y+35	; 0x23
			last_fright_signal[k]=sensor_data->cliff_frontright_signal;
    1512:	68 a1       	ldd	r22, Y+32	; 0x20
    1514:	79 a1       	ldd	r23, Y+33	; 0x21
    1516:	ec e8       	ldi	r30, 0x8C	; 140
    1518:	f8 e0       	ldi	r31, 0x08	; 8
    151a:	22 e8       	ldi	r18, 0x82	; 130
    151c:	38 e0       	ldi	r19, 0x08	; 8
    151e:	88 e7       	ldi	r24, 0x78	; 120
    1520:	98 e0       	ldi	r25, 0x08	; 8
    1522:	0f 2e       	mov	r0, r31
    1524:	fe e6       	ldi	r31, 0x6E	; 110
    1526:	af 2e       	mov	r10, r31
    1528:	f8 e0       	ldi	r31, 0x08	; 8
    152a:	bf 2e       	mov	r11, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	46 e9       	ldi	r20, 0x96	; 150
    1530:	58 e0       	ldi	r21, 0x08	; 8
	}
	else
	{
		for(int k=0;k<5;k++)
		{
			last_left_signal[k]=sensor_data->cliff_left_signal;
    1532:	c1 92       	st	Z+, r12
    1534:	d1 92       	st	Z+, r13
			last_fleft_signal[k]=sensor_data->cliff_frontleft_signal;
    1536:	d9 01       	movw	r26, r18
    1538:	ed 92       	st	X+, r14
    153a:	fd 92       	st	X+, r15
    153c:	9d 01       	movw	r18, r26
			last_right_signal[k]=sensor_data->cliff_right_signal;
    153e:	dc 01       	movw	r26, r24
    1540:	0d 93       	st	X+, r16
    1542:	1d 93       	st	X+, r17
    1544:	cd 01       	movw	r24, r26
			last_fright_signal[k]=sensor_data->cliff_frontright_signal;
    1546:	d5 01       	movw	r26, r10
    1548:	6d 93       	st	X+, r22
    154a:	7d 93       	st	X+, r23
    154c:	5d 01       	movw	r10, r26
			result = move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
		}
	}
	else
	{
		for(int k=0;k<5;k++)
    154e:	e4 17       	cp	r30, r20
    1550:	f5 07       	cpc	r31, r21
    1552:	79 f7       	brne	.-34     	; 0x1532 <read_cliff_signals+0x146>
    1554:	03 c0       	rjmp	.+6      	; 0x155c <read_cliff_signals+0x170>
 * ignoring color and cliffs and bumps.
 * @param sensor_data the oi_t struct containing all the robots data
 */
int read_cliff_signals( oi_t* sensor_data)
{
	int result = 0;
    1556:	a1 2c       	mov	r10, r1
    1558:	b1 2c       	mov	r11, r1
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <read_cliff_signals+0x174>
    155c:	a1 2c       	mov	r10, r1
    155e:	b1 2c       	mov	r11, r1
			last_fright_signal[k]=sensor_data->cliff_frontright_signal;
			
		}
		
	}
	last_left_signal[i] = sensor_data->cliff_left_signal;
    1560:	80 90 6c 08 	lds	r8, 0x086C
    1564:	90 90 6d 08 	lds	r9, 0x086D
    1568:	c4 01       	movw	r24, r8
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	fc 01       	movw	r30, r24
    1570:	e4 57       	subi	r30, 0x74	; 116
    1572:	f7 4f       	sbci	r31, 0xF7	; 247
    1574:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1576:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1578:	31 83       	std	Z+1, r19	; 0x01
    157a:	20 83       	st	Z, r18
	last_fleft_signal[i] = sensor_data->cliff_frontleft_signal;
    157c:	fc 01       	movw	r30, r24
    157e:	ee 57       	subi	r30, 0x7E	; 126
    1580:	f7 4f       	sbci	r31, 0xF7	; 247
    1582:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1584:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1586:	31 83       	std	Z+1, r19	; 0x01
    1588:	20 83       	st	Z, r18
	last_fright_signal[i] = sensor_data->cliff_frontright_signal;
    158a:	fc 01       	movw	r30, r24
    158c:	e2 59       	subi	r30, 0x92	; 146
    158e:	f7 4f       	sbci	r31, 0xF7	; 247
    1590:	28 a1       	ldd	r18, Y+32	; 0x20
    1592:	39 a1       	ldd	r19, Y+33	; 0x21
    1594:	31 83       	std	Z+1, r19	; 0x01
    1596:	20 83       	st	Z, r18
	last_right_signal[i] = sensor_data->cliff_right_signal;
    1598:	fc 01       	movw	r30, r24
    159a:	e8 58       	subi	r30, 0x88	; 136
    159c:	f7 4f       	sbci	r31, 0xF7	; 247
    159e:	2a a1       	ldd	r18, Y+34	; 0x22
    15a0:	3b a1       	ldd	r19, Y+35	; 0x23
    15a2:	31 83       	std	Z+1, r19	; 0x01
    15a4:	20 83       	st	Z, r18
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	e1 2c       	mov	r14, r1
    15ac:	f1 2c       	mov	r15, r1
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	ec e8       	ldi	r30, 0x8C	; 140
    15b4:	f8 e0       	ldi	r31, 0x08	; 8
    15b6:	82 e8       	ldi	r24, 0x82	; 130
    15b8:	98 e0       	ldi	r25, 0x08	; 8
    15ba:	c8 e7       	ldi	r28, 0x78	; 120
    15bc:	d8 e0       	ldi	r29, 0x08	; 8
    15be:	0f 2e       	mov	r0, r31
    15c0:	fe e6       	ldi	r31, 0x6E	; 110
    15c2:	6f 2e       	mov	r6, r31
    15c4:	f8 e0       	ldi	r31, 0x08	; 8
    15c6:	7f 2e       	mov	r7, r31
    15c8:	f0 2d       	mov	r31, r0
    15ca:	66 e9       	ldi	r22, 0x96	; 150
    15cc:	78 e0       	ldi	r23, 0x08	; 8
	average_left_signal = 0;
	average_fleft_signal = 0;
	average_right_signal = 0;
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
	average_fright_signal = 0;
	for(int j=0;j<5;j++)
	{
		average_left_signal+=last_left_signal[j];
    15d2:	c1 90       	ld	r12, Z+
    15d4:	d1 90       	ld	r13, Z+
    15d6:	2c 0d       	add	r18, r12
    15d8:	3d 1d       	adc	r19, r13
		average_fleft_signal+=last_fleft_signal[j];
    15da:	dc 01       	movw	r26, r24
    15dc:	cd 90       	ld	r12, X+
    15de:	dd 90       	ld	r13, X+
    15e0:	cd 01       	movw	r24, r26
    15e2:	ec 0c       	add	r14, r12
    15e4:	fd 1c       	adc	r15, r13
		average_right_signal+=last_right_signal[j];
    15e6:	c9 90       	ld	r12, Y+
    15e8:	d9 90       	ld	r13, Y+
    15ea:	0c 0d       	add	r16, r12
    15ec:	1d 1d       	adc	r17, r13
		average_fright_signal+=last_fright_signal[j];
    15ee:	d3 01       	movw	r26, r6
    15f0:	cd 90       	ld	r12, X+
    15f2:	dd 90       	ld	r13, X+
    15f4:	3d 01       	movw	r6, r26
    15f6:	4c 0d       	add	r20, r12
    15f8:	5d 1d       	adc	r21, r13
	last_right_signal[i] = sensor_data->cliff_right_signal;
	average_left_signal = 0;
	average_fleft_signal = 0;
	average_right_signal = 0;
	average_fright_signal = 0;
	for(int j=0;j<5;j++)
    15fa:	e6 17       	cp	r30, r22
    15fc:	f7 07       	cpc	r31, r23
    15fe:	49 f7       	brne	.-46     	; 0x15d2 <read_cliff_signals+0x1e6>
		average_left_signal+=last_left_signal[j];
		average_fleft_signal+=last_fleft_signal[j];
		average_right_signal+=last_right_signal[j];
		average_fright_signal+=last_fright_signal[j];
	}
	average_left_signal=average_left_signal/5;
    1600:	ad ec       	ldi	r26, 0xCD	; 205
    1602:	bc ec       	ldi	r27, 0xCC	; 204
    1604:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__umulhisi3>
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	90 93 98 08 	sts	0x0898, r25
    1614:	80 93 97 08 	sts	0x0897, r24
	average_fleft_signal=average_fleft_signal/5;
    1618:	97 01       	movw	r18, r14
    161a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__umulhisi3>
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	96 95       	lsr	r25
    1624:	87 95       	ror	r24
    1626:	90 93 9a 08 	sts	0x089A, r25
    162a:	80 93 99 08 	sts	0x0899, r24
	average_right_signal=average_right_signal/5;
    162e:	98 01       	movw	r18, r16
    1630:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__umulhisi3>
    1634:	96 95       	lsr	r25
    1636:	87 95       	ror	r24
    1638:	96 95       	lsr	r25
    163a:	87 95       	ror	r24
    163c:	90 93 9c 08 	sts	0x089C, r25
    1640:	80 93 9b 08 	sts	0x089B, r24
	average_fright_signal=average_fright_signal/5;
    1644:	9a 01       	movw	r18, r20
    1646:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__umulhisi3>
    164a:	96 95       	lsr	r25
    164c:	87 95       	ror	r24
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	90 93 9e 08 	sts	0x089E, r25
    1656:	80 93 9d 08 	sts	0x089D, r24
	i=(i+1)%5;
    165a:	c4 01       	movw	r24, r8
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	65 e0       	ldi	r22, 0x05	; 5
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__divmodhi4>
    1666:	90 93 6d 08 	sts	0x086D, r25
    166a:	80 93 6c 08 	sts	0x086C, r24
	initialized = 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	80 93 96 08 	sts	0x0896, r24
	return result;
}
    1674:	c5 01       	movw	r24, r10
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	7f 90       	pop	r7
    1690:	6f 90       	pop	r6
    1692:	08 95       	ret

00001694 <move_result>:
 * @param sensor_data the oi_t struct containing all the robots data
 * @param ignore_cliffbump 1 to ignore, 0 else
 * @param ignore_color 1 to ignore, 0 else
 */
int move_result(int units, oi_t* sensor_data, char ignore_cliffbump, char ignore_color, stop_reason* reason)
{
    1694:	6f 92       	push	r6
    1696:	7f 92       	push	r7
    1698:	8f 92       	push	r8
    169a:	9f 92       	push	r9
    169c:	af 92       	push	r10
    169e:	bf 92       	push	r11
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	1f 92       	push	r1
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	4c 01       	movw	r8, r24
    16b8:	6b 01       	movw	r12, r22
    16ba:	74 2e       	mov	r7, r20
    16bc:	62 2e       	mov	r6, r18
	stop_reason dummy;
	if (reason == NULL) {
    16be:	01 15       	cp	r16, r1
    16c0:	11 05       	cpc	r17, r1
    16c2:	19 f4       	brne	.+6      	; 0x16ca <move_result+0x36>
		reason = &dummy;
    16c4:	8e 01       	movw	r16, r28
    16c6:	0f 5f       	subi	r16, 0xFF	; 255
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
	}
    int16_t sum = 0;
	int temp_result = 0;
    if(units < 0)
    16ca:	99 20       	and	r9, r9
    16cc:	74 f4       	brge	.+28     	; 0x16ea <move_result+0x56>
    {
		units = -units;
    16ce:	91 94       	neg	r9
    16d0:	81 94       	neg	r8
    16d2:	91 08       	sbc	r9, r1
        oi_set_wheels(-200, -200);
    16d4:	68 e3       	ldi	r22, 0x38	; 56
    16d6:	7f ef       	ldi	r23, 0xFF	; 255
    16d8:	88 e3       	ldi	r24, 0x38	; 56
    16da:	9f ef       	ldi	r25, 0xFF	; 255
    16dc:	c2 dc       	rcall	.-1660   	; 0x1062 <oi_set_wheels>
    }else{
        oi_set_wheels(200, 200);
    }
	
    while (abs(sum) < units) {
    16de:	18 14       	cp	r1, r8
    16e0:	19 04       	cpc	r1, r9
    16e2:	4c f0       	brlt	.+18     	; 0x16f6 <move_result+0x62>
    16e4:	e1 2c       	mov	r14, r1
    16e6:	f1 2c       	mov	r15, r1
    16e8:	3d c0       	rjmp	.+122    	; 0x1764 <move_result+0xd0>
    if(units < 0)
    {
		units = -units;
        oi_set_wheels(-200, -200);
    }else{
        oi_set_wheels(200, 200);
    16ea:	68 ec       	ldi	r22, 0xC8	; 200
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	b7 dc       	rcall	.-1682   	; 0x1062 <oi_set_wheels>
    16f4:	f4 cf       	rjmp	.-24     	; 0x16de <move_result+0x4a>
    }
	
    while (abs(sum) < units) {
    16f6:	a1 2c       	mov	r10, r1
    16f8:	b1 2c       	mov	r11, r1
    16fa:	e1 2c       	mov	r14, r1
    16fc:	f1 2c       	mov	r15, r1
		oi_update(sensor_data);
    16fe:	c6 01       	movw	r24, r12
    1700:	08 dd       	rcall	.-1520   	; 0x1112 <oi_update>
		if(!ignore_cliffbump) {
    1702:	71 10       	cpse	r7, r1
    1704:	10 c0       	rjmp	.+32     	; 0x1726 <move_result+0x92>
			temp_result = read_cliffs(sensor_data, reason);
    1706:	b8 01       	movw	r22, r16
    1708:	c6 01       	movw	r24, r12
    170a:	68 d0       	rcall	.+208    	; 0x17dc <read_cliffs>
    170c:	5c 01       	movw	r10, r24
			if(!temp_result) {
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	31 f4       	brne	.+12     	; 0x171e <move_result+0x8a>
				temp_result += read_bumps(sensor_data, reason);
    1712:	b8 01       	movw	r22, r16
    1714:	c6 01       	movw	r24, r12
    1716:	3f d0       	rcall	.+126    	; 0x1796 <read_bumps>
    1718:	5c 01       	movw	r10, r24
			}
			if(temp_result) {
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	21 f0       	breq	.+8      	; 0x1726 <move_result+0x92>
				return sum + temp_result;
    171e:	c7 01       	movw	r24, r14
    1720:	8a 0d       	add	r24, r10
    1722:	9b 1d       	adc	r25, r11
    1724:	28 c0       	rjmp	.+80     	; 0x1776 <move_result+0xe2>
			}
		}
        if(!ignore_color)
    1726:	61 10       	cpse	r6, r1
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <move_result+0xb2>
        {
			temp_result += read_cliff_signals(sensor_data);
    172a:	c6 01       	movw	r24, r12
    172c:	5f de       	rcall	.-834    	; 0x13ec <read_cliff_signals>
    172e:	a8 0e       	add	r10, r24
    1730:	b9 1e       	adc	r11, r25
			if(temp_result) {
    1732:	a1 14       	cp	r10, r1
    1734:	b1 04       	cpc	r11, r1
    1736:	39 f0       	breq	.+14     	; 0x1746 <move_result+0xb2>
				*reason = COLOR;
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	f8 01       	movw	r30, r16
    173c:	80 83       	st	Z, r24
				return sum + temp_result;
    173e:	c7 01       	movw	r24, r14
    1740:	8a 0d       	add	r24, r10
    1742:	9b 1d       	adc	r25, r11
    1744:	18 c0       	rjmp	.+48     	; 0x1776 <move_result+0xe2>
			}
        }
        sum += sensor_data->distance;
    1746:	f6 01       	movw	r30, r12
    1748:	84 85       	ldd	r24, Z+12	; 0x0c
    174a:	95 85       	ldd	r25, Z+13	; 0x0d
    174c:	e8 0e       	add	r14, r24
    174e:	f9 1e       	adc	r15, r25
        oi_set_wheels(-200, -200);
    }else{
        oi_set_wheels(200, 200);
    }
	
    while (abs(sum) < units) {
    1750:	c7 01       	movw	r24, r14
    1752:	ff 20       	and	r15, r15
    1754:	24 f4       	brge	.+8      	; 0x175e <move_result+0xca>
    1756:	88 27       	eor	r24, r24
    1758:	99 27       	eor	r25, r25
    175a:	8e 19       	sub	r24, r14
    175c:	9f 09       	sbc	r25, r15
    175e:	88 15       	cp	r24, r8
    1760:	99 05       	cpc	r25, r9
    1762:	6c f2       	brlt	.-102    	; 0x16fe <move_result+0x6a>
				return sum + temp_result;
			}
        }
        sum += sensor_data->distance;
    }
    oi_set_wheels(0, 0);
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	7a dc       	rcall	.-1804   	; 0x1062 <oi_set_wheels>
	*reason = NONE;
    176e:	85 e0       	ldi	r24, 0x05	; 5
    1770:	f8 01       	movw	r30, r16
    1772:	80 83       	st	Z, r24
	return sum;
    1774:	c7 01       	movw	r24, r14
}
    1776:	0f 90       	pop	r0
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	bf 90       	pop	r11
    178a:	af 90       	pop	r10
    178c:	9f 90       	pop	r9
    178e:	8f 90       	pop	r8
    1790:	7f 90       	pop	r7
    1792:	6f 90       	pop	r6
    1794:	08 95       	ret

00001796 <read_bumps>:
 * If something has been bumped into, the robot will stop and back up a little. When the robot is backing up, the robot
 * will not look for color, bumps or cliffs.
 * @param sensor_data the oi_t struct containing all the robots data
 */
int read_bumps(oi_t* sensor_data, stop_reason* reason)
{
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    if (sensor_data->bumper_left) {
    179a:	fc 01       	movw	r30, r24
    179c:	20 81       	ld	r18, Z
    179e:	21 ff       	sbrs	r18, 1
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <read_bumps+0x22>
		*reason = BUMP_L;
    17a2:	fb 01       	movw	r30, r22
    17a4:	10 82       	st	Z, r1
        return move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	bc 01       	movw	r22, r24
    17b0:	8c e9       	ldi	r24, 0x9C	; 156
    17b2:	9f ef       	ldi	r25, 0xFF	; 255
    17b4:	6f df       	rcall	.-290    	; 0x1694 <move_result>
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <read_bumps+0x40>
    }
    if (sensor_data->bumper_right) {
    17b8:	20 ff       	sbrs	r18, 0
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <read_bumps+0x3c>
		*reason = BUMP_R;
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	fb 01       	movw	r30, r22
    17c0:	20 83       	st	Z, r18
        return move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    17c2:	00 e0       	ldi	r16, 0x00	; 0
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	bc 01       	movw	r22, r24
    17ca:	8c e9       	ldi	r24, 0x9C	; 156
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	62 df       	rcall	.-316    	; 0x1694 <move_result>
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <read_bumps+0x40>
    }
    return 0;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
}
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	08 95       	ret

000017dc <read_cliffs>:
 * When a cliff is sensed to the front right/left or the right/left, the robot will stop and back up a little. When the
 * robot is backing up, the robot will not look for color, bumps or cliffs.
 * @param sensor_data the oi_t struct containing all the robots data
 */
int read_cliffs(oi_t* sensor_data, stop_reason* reason)
{
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	fc 01       	movw	r30, r24
    if (sensor_data->cliff_left) {
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	88 23       	and	r24, r24
    17e6:	61 f0       	breq	.+24     	; 0x1800 <read_cliffs+0x24>
		*reason = CLIFF_L;
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	db 01       	movw	r26, r22
    17ec:	8c 93       	st	X, r24
        return move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    17ee:	00 e0       	ldi	r16, 0x00	; 0
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	bf 01       	movw	r22, r30
    17f8:	8c e9       	ldi	r24, 0x9C	; 156
    17fa:	9f ef       	ldi	r25, 0xFF	; 255
    17fc:	4b df       	rcall	.-362    	; 0x1694 <move_result>
    17fe:	2f c0       	rjmp	.+94     	; 0x185e <read_cliffs+0x82>
    }
    if (sensor_data->cliff_frontleft) {
    1800:	83 81       	ldd	r24, Z+3	; 0x03
    1802:	88 23       	and	r24, r24
    1804:	61 f0       	breq	.+24     	; 0x181e <read_cliffs+0x42>
		*reason = CLIFF_L;
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	db 01       	movw	r26, r22
    180a:	8c 93       	st	X, r24
        return move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    180c:	00 e0       	ldi	r16, 0x00	; 0
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	21 e0       	ldi	r18, 0x01	; 1
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	bf 01       	movw	r22, r30
    1816:	8c e9       	ldi	r24, 0x9C	; 156
    1818:	9f ef       	ldi	r25, 0xFF	; 255
    181a:	3c df       	rcall	.-392    	; 0x1694 <move_result>
    181c:	20 c0       	rjmp	.+64     	; 0x185e <read_cliffs+0x82>
    }
    if (sensor_data->cliff_right) {
    181e:	85 81       	ldd	r24, Z+5	; 0x05
    1820:	88 23       	and	r24, r24
    1822:	61 f0       	breq	.+24     	; 0x183c <read_cliffs+0x60>
		*reason = CLIFF_R;
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	db 01       	movw	r26, r22
    1828:	8c 93       	st	X, r24
        return move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    182a:	00 e0       	ldi	r16, 0x00	; 0
    182c:	10 e0       	ldi	r17, 0x00	; 0
    182e:	21 e0       	ldi	r18, 0x01	; 1
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	bf 01       	movw	r22, r30
    1834:	8c e9       	ldi	r24, 0x9C	; 156
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	2d df       	rcall	.-422    	; 0x1694 <move_result>
    183a:	11 c0       	rjmp	.+34     	; 0x185e <read_cliffs+0x82>
    }
    if (sensor_data->cliff_frontright) {
    183c:	84 81       	ldd	r24, Z+4	; 0x04
    183e:	88 23       	and	r24, r24
    1840:	61 f0       	breq	.+24     	; 0x185a <read_cliffs+0x7e>
		*reason = CLIFF_R;
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	db 01       	movw	r26, r22
    1846:	8c 93       	st	X, r24
        return move_result(-100,sensor_data,1,1,NULL); //should move ten centimeters.
    1848:	00 e0       	ldi	r16, 0x00	; 0
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	bf 01       	movw	r22, r30
    1852:	8c e9       	ldi	r24, 0x9C	; 156
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	1e df       	rcall	.-452    	; 0x1694 <move_result>
    1858:	02 c0       	rjmp	.+4      	; 0x185e <read_cliffs+0x82>
    }
    return 0;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
}
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <side_angle_side>:
 * Applies the side-angle-side formula to calculate the far side.  The two sides are assumed to have the same length.
 * @param angle the angle between the two given sides
 * @param side_len the length of both known sides
 * @return the length of the unknown side
 */
int side_angle_side(int angle, int side_len) {
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
	int a = side_len * side_len * 2 - 2 * side_len * side_len * cos(angle * M_PI / 180);
    1872:	66 9f       	mul	r22, r22
    1874:	c0 01       	movw	r24, r0
    1876:	67 9f       	mul	r22, r23
    1878:	90 0d       	add	r25, r0
    187a:	90 0d       	add	r25, r0
    187c:	11 24       	eor	r1, r1
    187e:	bc 01       	movw	r22, r24
    1880:	66 0f       	add	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 27       	eor	r24, r24
    1886:	77 fd       	sbrc	r23, 7
    1888:	80 95       	com	r24
    188a:	98 2f       	mov	r25, r24
    188c:	e5 d5       	rcall	.+3018   	; 0x2458 <__floatsisf>
    188e:	6b 01       	movw	r12, r22
    1890:	7c 01       	movw	r14, r24
    1892:	be 01       	movw	r22, r28
    1894:	88 27       	eor	r24, r24
    1896:	77 fd       	sbrc	r23, 7
    1898:	80 95       	com	r24
    189a:	98 2f       	mov	r25, r24
    189c:	dd d5       	rcall	.+3002   	; 0x2458 <__floatsisf>
    189e:	2b ed       	ldi	r18, 0xDB	; 219
    18a0:	3f e0       	ldi	r19, 0x0F	; 15
    18a2:	49 e4       	ldi	r20, 0x49	; 73
    18a4:	50 e4       	ldi	r21, 0x40	; 64
    18a6:	dd d6       	rcall	.+3514   	; 0x2662 <__mulsf3>
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	44 e3       	ldi	r20, 0x34	; 52
    18ae:	53 e4       	ldi	r21, 0x43	; 67
    18b0:	38 d5       	rcall	.+2672   	; 0x2322 <__divsf3>
    18b2:	34 d5       	rcall	.+2664   	; 0x231c <cos>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ac 01       	movw	r20, r24
    18b8:	c7 01       	movw	r24, r14
    18ba:	b6 01       	movw	r22, r12
    18bc:	d2 d6       	rcall	.+3492   	; 0x2662 <__mulsf3>
    18be:	9b 01       	movw	r18, r22
    18c0:	ac 01       	movw	r20, r24
    18c2:	c7 01       	movw	r24, r14
    18c4:	b6 01       	movw	r22, r12
    18c6:	c5 d4       	rcall	.+2442   	; 0x2252 <__subsf3>
    18c8:	94 d5       	rcall	.+2856   	; 0x23f2 <__fixsfsi>
	return sqrt(a);
    18ca:	88 27       	eor	r24, r24
    18cc:	77 fd       	sbrc	r23, 7
    18ce:	80 95       	com	r24
    18d0:	98 2f       	mov	r25, r24
    18d2:	c2 d5       	rcall	.+2948   	; 0x2458 <__floatsisf>
    18d4:	7f d7       	rcall	.+3838   	; 0x27d4 <sqrt>
    18d6:	8d d5       	rcall	.+2842   	; 0x23f2 <__fixsfsi>
}
    18d8:	cb 01       	movw	r24, r22
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	08 95       	ret

000018e8 <side_angle_side2>:
 * @param angle the angle between the two sides
 * @param side1_len the length of the side to the left of the angle
 * @param side2_len the length of the side to the right of the angle
 * @return the length of the unknown side
 */
int side_angle_side2(int angle, int side1_len, int side2_len) {
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	8b 01       	movw	r16, r22
    1902:	ea 01       	movw	r28, r20
	int a = side1_len * side1_len + side2_len * side2_len - (2 * side1_len * side2_len) * cos(angle * M_PI / 180);
    1904:	bc 01       	movw	r22, r24
    1906:	88 27       	eor	r24, r24
    1908:	77 fd       	sbrc	r23, 7
    190a:	80 95       	com	r24
    190c:	98 2f       	mov	r25, r24
    190e:	a4 d5       	rcall	.+2888   	; 0x2458 <__floatsisf>
    1910:	2b ed       	ldi	r18, 0xDB	; 219
    1912:	3f e0       	ldi	r19, 0x0F	; 15
    1914:	49 e4       	ldi	r20, 0x49	; 73
    1916:	50 e4       	ldi	r21, 0x40	; 64
    1918:	a4 d6       	rcall	.+3400   	; 0x2662 <__mulsf3>
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	44 e3       	ldi	r20, 0x34	; 52
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	ff d4       	rcall	.+2558   	; 0x2322 <__divsf3>
    1924:	fb d4       	rcall	.+2550   	; 0x231c <cos>
    1926:	6b 01       	movw	r12, r22
    1928:	7c 01       	movw	r14, r24
    192a:	00 9f       	mul	r16, r16
    192c:	b0 01       	movw	r22, r0
    192e:	01 9f       	mul	r16, r17
    1930:	70 0d       	add	r23, r0
    1932:	70 0d       	add	r23, r0
    1934:	11 24       	eor	r1, r1
    1936:	cc 9f       	mul	r28, r28
    1938:	c0 01       	movw	r24, r0
    193a:	cd 9f       	mul	r28, r29
    193c:	90 0d       	add	r25, r0
    193e:	90 0d       	add	r25, r0
    1940:	11 24       	eor	r1, r1
    1942:	68 0f       	add	r22, r24
    1944:	79 1f       	adc	r23, r25
    1946:	88 27       	eor	r24, r24
    1948:	77 fd       	sbrc	r23, 7
    194a:	80 95       	com	r24
    194c:	98 2f       	mov	r25, r24
    194e:	84 d5       	rcall	.+2824   	; 0x2458 <__floatsisf>
    1950:	4b 01       	movw	r8, r22
    1952:	5c 01       	movw	r10, r24
    1954:	00 0f       	add	r16, r16
    1956:	11 1f       	adc	r17, r17
    1958:	0c 9f       	mul	r16, r28
    195a:	b0 01       	movw	r22, r0
    195c:	0d 9f       	mul	r16, r29
    195e:	70 0d       	add	r23, r0
    1960:	1c 9f       	mul	r17, r28
    1962:	70 0d       	add	r23, r0
    1964:	11 24       	eor	r1, r1
    1966:	88 27       	eor	r24, r24
    1968:	77 fd       	sbrc	r23, 7
    196a:	80 95       	com	r24
    196c:	98 2f       	mov	r25, r24
    196e:	74 d5       	rcall	.+2792   	; 0x2458 <__floatsisf>
    1970:	a7 01       	movw	r20, r14
    1972:	96 01       	movw	r18, r12
    1974:	76 d6       	rcall	.+3308   	; 0x2662 <__mulsf3>
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	c5 01       	movw	r24, r10
    197c:	b4 01       	movw	r22, r8
    197e:	69 d4       	rcall	.+2258   	; 0x2252 <__subsf3>
    1980:	38 d5       	rcall	.+2672   	; 0x23f2 <__fixsfsi>
	return sqrt(a);
    1982:	88 27       	eor	r24, r24
    1984:	77 fd       	sbrc	r23, 7
    1986:	80 95       	com	r24
    1988:	98 2f       	mov	r25, r24
    198a:	66 d5       	rcall	.+2764   	; 0x2458 <__floatsisf>
    198c:	23 d7       	rcall	.+3654   	; 0x27d4 <sqrt>
    198e:	31 d5       	rcall	.+2658   	; 0x23f2 <__fixsfsi>
}
    1990:	cb 01       	movw	r24, r22
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	cf 90       	pop	r12
    19a2:	bf 90       	pop	r11
    19a4:	af 90       	pop	r10
    19a6:	9f 90       	pop	r9
    19a8:	8f 90       	pop	r8
    19aa:	08 95       	ret

000019ac <side_side_side>:
 * Applies the side-side-side calculation to find the angle between two sides of the same length
 * @param far_side the length of the far side of the triangle
 * @param adjascent_sides the length of the two adjacent sides of the triangle
 * @return the angle between the two adjacent sides
 */
int side_side_side(int far_side, int adjascent_sides) {
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
	float a = acos((2 * (adjascent_sides * adjascent_sides) - far_side * far_side) / (float) (2 * adjascent_sides * adjascent_sides)) * 180.0 / M_PI;
    19b8:	66 9f       	mul	r22, r22
    19ba:	e0 01       	movw	r28, r0
    19bc:	67 9f       	mul	r22, r23
    19be:	d0 0d       	add	r29, r0
    19c0:	d0 0d       	add	r29, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	cc 0f       	add	r28, r28
    19c6:	dd 1f       	adc	r29, r29
    19c8:	9c 01       	movw	r18, r24
    19ca:	22 9f       	mul	r18, r18
    19cc:	c0 01       	movw	r24, r0
    19ce:	23 9f       	mul	r18, r19
    19d0:	90 0d       	add	r25, r0
    19d2:	90 0d       	add	r25, r0
    19d4:	11 24       	eor	r1, r1
    19d6:	be 01       	movw	r22, r28
    19d8:	68 1b       	sub	r22, r24
    19da:	79 0b       	sbc	r23, r25
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	39 d5       	rcall	.+2674   	; 0x2458 <__floatsisf>
    19e6:	6b 01       	movw	r12, r22
    19e8:	7c 01       	movw	r14, r24
    19ea:	be 01       	movw	r22, r28
    19ec:	88 27       	eor	r24, r24
    19ee:	77 fd       	sbrc	r23, 7
    19f0:	80 95       	com	r24
    19f2:	98 2f       	mov	r25, r24
    19f4:	31 d5       	rcall	.+2658   	; 0x2458 <__floatsisf>
    19f6:	9b 01       	movw	r18, r22
    19f8:	ac 01       	movw	r20, r24
    19fa:	c7 01       	movw	r24, r14
    19fc:	b6 01       	movw	r22, r12
    19fe:	91 d4       	rcall	.+2338   	; 0x2322 <__divsf3>
    1a00:	1a d4       	rcall	.+2100   	; 0x2236 <acos>
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	44 e3       	ldi	r20, 0x34	; 52
    1a08:	53 e4       	ldi	r21, 0x43	; 67
    1a0a:	2b d6       	rcall	.+3158   	; 0x2662 <__mulsf3>
    1a0c:	2b ed       	ldi	r18, 0xDB	; 219
    1a0e:	3f e0       	ldi	r19, 0x0F	; 15
    1a10:	49 e4       	ldi	r20, 0x49	; 73
    1a12:	50 e4       	ldi	r21, 0x40	; 64
    1a14:	86 d4       	rcall	.+2316   	; 0x2322 <__divsf3>
	return a;
    1a16:	ed d4       	rcall	.+2522   	; 0x23f2 <__fixsfsi>
}
    1a18:	cb 01       	movw	r24, r22
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	08 95       	ret

00001a28 <set_servo_OCR>:
 * servo to the correct angle.
 * @param ticks the number of ticks that the signal is high
 */
void set_servo_OCR(int ticks)
{
	OCR3B = ticks;
    1a28:	90 93 85 00 	sts	0x0085, r25
    1a2c:	80 93 84 00 	sts	0x0084, r24
	wait_ms(50);
    1a30:	82 e3       	ldi	r24, 0x32	; 50
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	71 cc       	rjmp	.-1822   	; 0x1318 <wait_ms>
    1a36:	08 95       	ret

00001a38 <calc_servo_OCR_ticks>:
 * values do not have much meaning outside of being calibrated.
 * @param deg the angle in degrees to rotate the servo to
 */
int calc_servo_OCR_ticks(float deg)
{
	float percent = (float) deg / 180;
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	44 e3       	ldi	r20, 0x34	; 52
    1a3e:	53 e4       	ldi	r21, 0x43	; 67
    1a40:	70 d4       	rcall	.+2272   	; 0x2322 <__divsf3>
	return 800 + 3400 * percent;
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e8       	ldi	r19, 0x80	; 128
    1a46:	44 e5       	ldi	r20, 0x54	; 84
    1a48:	55 e4       	ldi	r21, 0x45	; 69
    1a4a:	0b d6       	rcall	.+3094   	; 0x2662 <__mulsf3>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	48 e4       	ldi	r20, 0x48	; 72
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	ff d3       	rcall	.+2046   	; 0x2254 <__addsf3>
    1a56:	cd d4       	rcall	.+2458   	; 0x23f2 <__fixsfsi>
}
    1a58:	cb 01       	movw	r24, r22
    1a5a:	08 95       	ret

00001a5c <set_servo_pos>:
/**
 * Sets the servo to the specified angle in degrees.  It waits 100 ms after setting the output.
 * @param deg the angle in degrees to rotate to
 */
void set_servo_pos(int deg) {
	set_servo_OCR(calc_servo_OCR_ticks(deg));
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	88 27       	eor	r24, r24
    1a60:	77 fd       	sbrc	r23, 7
    1a62:	80 95       	com	r24
    1a64:	98 2f       	mov	r25, r24
    1a66:	f8 d4       	rcall	.+2544   	; 0x2458 <__floatsisf>
    1a68:	e7 df       	rcall	.-50     	; 0x1a38 <calc_servo_OCR_ticks>
    1a6a:	de cf       	rjmp	.-68     	; 0x1a28 <set_servo_OCR>
    1a6c:	08 95       	ret

00001a6e <ADC_read>:
 * @return the raw value from the ADC
 */
int ADC_read()
{
	// Start the ADC conversion
	ADCSRA |= _BV(ADSC);
    1a6e:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the result
	while (!(ADCSRA & _BV(ADIF)))
    1a70:	34 9b       	sbis	0x06, 4	; 6
    1a72:	fe cf       	rjmp	.-4      	; 0x1a70 <ADC_read+0x2>
		{}
	return ADC;
    1a74:	84 b1       	in	r24, 0x04	; 4
    1a76:	95 b1       	in	r25, 0x05	; 5
}
    1a78:	08 95       	ret

00001a7a <ir_ADC_to_cm>:
 * Using a magical calibrated conversion, converts a raw reading to cm.
 * @param reading the raw reading from the ADC
 * @return the conversion in cm
 */
int ir_ADC_to_cm(int reading)
{
    1a7a:	4f 92       	push	r4
    1a7c:	5f 92       	push	r5
    1a7e:	6f 92       	push	r6
    1a80:	7f 92       	push	r7
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
			0.69158 * reading +
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	88 27       	eor	r24, r24
    1aaa:	77 fd       	sbrc	r23, 7
    1aac:	80 95       	com	r24
    1aae:	98 2f       	mov	r25, r24
    1ab0:	d3 d4       	rcall	.+2470   	; 0x2458 <__floatsisf>
    1ab2:	6b 01       	movw	r12, r22
    1ab4:	7c 01       	movw	r14, r24
			0.00176938 * pow(reading, 2) -
			2.25827 * pow(10, -6) * pow(reading, 3) +
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e4       	ldi	r20, 0x40	; 64
    1abc:	50 e4       	ldi	r21, 0x40	; 64
    1abe:	34 d6       	rcall	.+3176   	; 0x2728 <pow>
    1ac0:	4b 01       	movw	r8, r22
    1ac2:	5c 01       	movw	r10, r24
			1.14087 * pow(10, -9) * pow(reading, 4) +
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	50 e4       	ldi	r21, 0x40	; 64
    1acc:	c7 01       	movw	r24, r14
    1ace:	b6 01       	movw	r22, r12
    1ad0:	2b d6       	rcall	.+3158   	; 0x2728 <pow>
    1ad2:	69 83       	std	Y+1, r22	; 0x01
    1ad4:	7a 83       	std	Y+2, r23	; 0x02
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
			1.59493 * pow(10, -13) * pow(reading, 5) -
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 ea       	ldi	r20, 0xA0	; 160
    1ae0:	50 e4       	ldi	r21, 0x40	; 64
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	20 d6       	rcall	.+3136   	; 0x2728 <pow>
    1ae8:	6d 83       	std	Y+5, r22	; 0x05
    1aea:	7e 83       	std	Y+6, r23	; 0x06
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
			2.46348 * pow(10, -16) * pow(reading, 6);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 ec       	ldi	r20, 0xC0	; 192
    1af6:	50 e4       	ldi	r21, 0x40	; 64
    1af8:	c7 01       	movw	r24, r14
    1afa:	b6 01       	movw	r22, r12
    1afc:	15 d6       	rcall	.+3114   	; 0x2728 <pow>
    1afe:	69 87       	std	Y+9, r22	; 0x09
    1b00:	7a 87       	std	Y+10, r23	; 0x0a
    1b02:	8b 87       	std	Y+11, r24	; 0x0b
    1b04:	9c 87       	std	Y+12, r25	; 0x0c
 */
int ir_ADC_to_cm(int reading)
{
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
			0.69158 * reading +
    1b06:	23 e6       	ldi	r18, 0x63	; 99
    1b08:	3b e0       	ldi	r19, 0x0B	; 11
    1b0a:	41 e3       	ldi	r20, 0x31	; 49
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	c7 01       	movw	r24, r14
    1b10:	b6 01       	movw	r22, r12
    1b12:	a7 d5       	rcall	.+2894   	; 0x2662 <__mulsf3>
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
 * @return the conversion in cm
 */
int ir_ADC_to_cm(int reading)
{
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
    1b18:	6c ea       	ldi	r22, 0xAC	; 172
    1b1a:	7c ef       	ldi	r23, 0xFC	; 252
    1b1c:	85 e0       	ldi	r24, 0x05	; 5
    1b1e:	93 e4       	ldi	r25, 0x43	; 67
    1b20:	98 d3       	rcall	.+1840   	; 0x2252 <__subsf3>
    1b22:	2b 01       	movw	r4, r22
    1b24:	3c 01       	movw	r6, r24
			0.69158 * reading +
			0.00176938 * pow(reading, 2) -
    1b26:	a7 01       	movw	r20, r14
    1b28:	96 01       	movw	r18, r12
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	99 d5       	rcall	.+2866   	; 0x2662 <__mulsf3>
    1b30:	2a e8       	ldi	r18, 0x8A	; 138
    1b32:	3a ee       	ldi	r19, 0xEA	; 234
    1b34:	47 ee       	ldi	r20, 0xE7	; 231
    1b36:	5a e3       	ldi	r21, 0x3A	; 58
    1b38:	94 d5       	rcall	.+2856   	; 0x2662 <__mulsf3>
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
 */
int ir_ADC_to_cm(int reading)
{
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
			0.69158 * reading +
    1b3e:	c3 01       	movw	r24, r6
    1b40:	b2 01       	movw	r22, r4
    1b42:	88 d3       	rcall	.+1808   	; 0x2254 <__addsf3>
    1b44:	6b 01       	movw	r12, r22
    1b46:	7c 01       	movw	r14, r24
			0.00176938 * pow(reading, 2) -
			2.25827 * pow(10, -6) * pow(reading, 3) +
    1b48:	29 ec       	ldi	r18, 0xC9	; 201
    1b4a:	3c e8       	ldi	r19, 0x8C	; 140
    1b4c:	47 e1       	ldi	r20, 0x17	; 23
    1b4e:	56 e3       	ldi	r21, 0x36	; 54
    1b50:	c5 01       	movw	r24, r10
    1b52:	b4 01       	movw	r22, r8
    1b54:	86 d5       	rcall	.+2828   	; 0x2662 <__mulsf3>
    1b56:	9b 01       	movw	r18, r22
    1b58:	ac 01       	movw	r20, r24
int ir_ADC_to_cm(int reading)
{
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
			0.69158 * reading +
			0.00176938 * pow(reading, 2) -
    1b5a:	c7 01       	movw	r24, r14
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	79 d3       	rcall	.+1778   	; 0x2252 <__subsf3>
    1b60:	6b 01       	movw	r12, r22
    1b62:	7c 01       	movw	r14, r24
			2.25827 * pow(10, -6) * pow(reading, 3) +
			1.14087 * pow(10, -9) * pow(reading, 4) +
    1b64:	2b ec       	ldi	r18, 0xCB	; 203
    1b66:	3c ec       	ldi	r19, 0xCC	; 204
    1b68:	4c e9       	ldi	r20, 0x9C	; 156
    1b6a:	50 e3       	ldi	r21, 0x30	; 48
    1b6c:	69 81       	ldd	r22, Y+1	; 0x01
    1b6e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	76 d5       	rcall	.+2796   	; 0x2662 <__mulsf3>
    1b76:	9b 01       	movw	r18, r22
    1b78:	ac 01       	movw	r20, r24
{
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
			0.69158 * reading +
			0.00176938 * pow(reading, 2) -
			2.25827 * pow(10, -6) * pow(reading, 3) +
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	6a d3       	rcall	.+1748   	; 0x2254 <__addsf3>
    1b80:	6b 01       	movw	r12, r22
    1b82:	7c 01       	movw	r14, r24
			1.14087 * pow(10, -9) * pow(reading, 4) +
			1.59493 * pow(10, -13) * pow(reading, 5) -
    1b84:	2a eb       	ldi	r18, 0xBA	; 186
    1b86:	32 e9       	ldi	r19, 0x92	; 146
    1b88:	43 e3       	ldi	r20, 0x33	; 51
    1b8a:	5a e2       	ldi	r21, 0x2A	; 42
    1b8c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b8e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b90:	8f 81       	ldd	r24, Y+7	; 0x07
    1b92:	98 85       	ldd	r25, Y+8	; 0x08
    1b94:	66 d5       	rcall	.+2764   	; 0x2662 <__mulsf3>
    1b96:	9b 01       	movw	r18, r22
    1b98:	ac 01       	movw	r20, r24
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
			0.69158 * reading +
			0.00176938 * pow(reading, 2) -
			2.25827 * pow(10, -6) * pow(reading, 3) +
			1.14087 * pow(10, -9) * pow(reading, 4) +
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	5a d3       	rcall	.+1716   	; 0x2254 <__addsf3>
    1ba0:	6b 01       	movw	r12, r22
    1ba2:	7c 01       	movw	r14, r24
			1.59493 * pow(10, -13) * pow(reading, 5) -
			2.46348 * pow(10, -16) * pow(reading, 6);
    1ba4:	2c e8       	ldi	r18, 0x8C	; 140
    1ba6:	32 e0       	ldi	r19, 0x02	; 2
    1ba8:	4e e8       	ldi	r20, 0x8E	; 142
    1baa:	55 e2       	ldi	r21, 0x25	; 37
    1bac:	69 85       	ldd	r22, Y+9	; 0x09
    1bae:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bb0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bb4:	56 d5       	rcall	.+2732   	; 0x2662 <__mulsf3>
    1bb6:	9b 01       	movw	r18, r22
    1bb8:	ac 01       	movw	r20, r24
	return 133.987 -
			0.69158 * reading +
			0.00176938 * pow(reading, 2) -
			2.25827 * pow(10, -6) * pow(reading, 3) +
			1.14087 * pow(10, -9) * pow(reading, 4) +
			1.59493 * pow(10, -13) * pow(reading, 5) -
    1bba:	c7 01       	movw	r24, r14
    1bbc:	b6 01       	movw	r22, r12
    1bbe:	49 d3       	rcall	.+1682   	; 0x2252 <__subsf3>
 * @return the conversion in cm
 */
int ir_ADC_to_cm(int reading)
{
	// Magical formula created by taking samples and creating an equation in Mathematica. ;)
	return 133.987 -
    1bc0:	18 d4       	rcall	.+2096   	; 0x23f2 <__fixsfsi>
			0.00176938 * pow(reading, 2) -
			2.25827 * pow(10, -6) * pow(reading, 3) +
			1.14087 * pow(10, -9) * pow(reading, 4) +
			1.59493 * pow(10, -13) * pow(reading, 5) -
			2.46348 * pow(10, -16) * pow(reading, 6);
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	2c 96       	adiw	r28, 0x0c	; 12
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	df 90       	pop	r13
    1bda:	cf 90       	pop	r12
    1bdc:	bf 90       	pop	r11
    1bde:	af 90       	pop	r10
    1be0:	9f 90       	pop	r9
    1be2:	8f 90       	pop	r8
    1be4:	7f 90       	pop	r7
    1be6:	6f 90       	pop	r6
    1be8:	5f 90       	pop	r5
    1bea:	4f 90       	pop	r4
    1bec:	08 95       	ret

00001bee <ir_distance_cm>:
 * Reads a value from the ADC and uses the appropriate conversion to convert the value to cm.
 * @return the measured distance in cm
 */
int ir_distance_cm(void)
{
	int val = ADC_read();
    1bee:	3f df       	rcall	.-386    	; 0x1a6e <ADC_read>
	return ir_ADC_to_cm(val);
    1bf0:	44 cf       	rjmp	.-376    	; 0x1a7a <ir_ADC_to_cm>
}
    1bf2:	08 95       	ret

00001bf4 <dist_at_angle>:
 * @param angle the angle in degrees to rotate the servo to
 * @return the distance in cm of an object
 */
int dist_at_angle(int angle)
{
	set_servo_pos(angle);
    1bf4:	33 df       	rcall	.-410    	; 0x1a5c <set_servo_pos>
	return ir_distance_cm();
    1bf6:	fb cf       	rjmp	.-10     	; 0x1bee <ir_distance_cm>
}
    1bf8:	08 95       	ret

00001bfa <do_scan>:
/**
 * Scans from 0 to 180 degrees looking for objects.  It returns an array of objects along with a count.
 * @param obj_count the number of objects in the array
 */
obj_t* do_scan(int* obj_count)
{
    1bfa:	af 92       	push	r10
    1bfc:	bf 92       	push	r11
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	8c 01       	movw	r16, r24
	int ir_dist = 0, start_angle = 0, end_angle = 0;
	char is_measuring = 0;
	*obj_count = 0;
    1c10:	dc 01       	movw	r26, r24
    1c12:	1d 92       	st	X+, r1
    1c14:	1c 92       	st	X, r1
	
	set_servo_pos(0);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	20 df       	rcall	.-448    	; 0x1a5c <set_servo_pos>
	wait_ms(1000);
    1c1c:	88 ee       	ldi	r24, 0xE8	; 232
    1c1e:	93 e0       	ldi	r25, 0x03	; 3
    1c20:	7b db       	rcall	.-2314   	; 0x1318 <wait_ms>
	
	for(int angle = 0; angle < 181 && *obj_count <= sizeof(scanner); angle += 1)
    1c22:	f8 01       	movw	r30, r16
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	89 37       	cpi	r24, 0x79	; 121
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <do_scan+0x36>
    1c2e:	97 c0       	rjmp	.+302    	; 0x1d5e <do_scan+0x164>
    1c30:	c0 e0       	ldi	r28, 0x00	; 0
    1c32:	d0 e0       	ldi	r29, 0x00	; 0
 * @param obj_count the number of objects in the array
 */
obj_t* do_scan(int* obj_count)
{
	int ir_dist = 0, start_angle = 0, end_angle = 0;
	char is_measuring = 0;
    1c34:	d1 2c       	mov	r13, r1
 * Scans from 0 to 180 degrees looking for objects.  It returns an array of objects along with a count.
 * @param obj_count the number of objects in the array
 */
obj_t* do_scan(int* obj_count)
{
	int ir_dist = 0, start_angle = 0, end_angle = 0;
    1c36:	e1 2c       	mov	r14, r1
    1c38:	f1 2c       	mov	r15, r1
		else
		{
			if(ir_dist > 60)
			{
				end_angle = angle;
				is_measuring = 0;
    1c3a:	a1 2c       	mov	r10, r1
		if(is_measuring == 0)
		{
			if(ir_dist < 60)
			{
				start_angle = angle;
				is_measuring = 1;
    1c3c:	bb 24       	eor	r11, r11
    1c3e:	b3 94       	inc	r11
	set_servo_pos(0);
	wait_ms(1000);
	
	for(int angle = 0; angle < 181 && *obj_count <= sizeof(scanner); angle += 1)
	{
		ir_dist = dist_at_angle(angle);
    1c40:	ce 01       	movw	r24, r28
    1c42:	d8 df       	rcall	.-80     	; 0x1bf4 <dist_at_angle>
				
		if(is_measuring == 0)
    1c44:	d1 10       	cpse	r13, r1
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <do_scan+0x76>
		{
			if(ir_dist < 60)
    1c48:	8c 33       	cpi	r24, 0x3C	; 60
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	0c f0       	brlt	.+2      	; 0x1c50 <do_scan+0x56>
    1c4e:	7c c0       	rjmp	.+248    	; 0x1d48 <do_scan+0x14e>
			{
				start_angle = angle;
				is_measuring = 1;
				scanner[*obj_count].dist = ir_dist;
    1c50:	d8 01       	movw	r26, r16
    1c52:	ed 91       	ld	r30, X+
    1c54:	fc 91       	ld	r31, X
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	e1 56       	subi	r30, 0x61	; 97
    1c64:	f7 4f       	sbci	r31, 0xF7	; 247
    1c66:	93 83       	std	Z+3, r25	; 0x03
    1c68:	82 83       	std	Z+2, r24	; 0x02
    1c6a:	7e 01       	movw	r14, r28
		if(is_measuring == 0)
		{
			if(ir_dist < 60)
			{
				start_angle = angle;
				is_measuring = 1;
    1c6c:	db 2c       	mov	r13, r11
    1c6e:	6c c0       	rjmp	.+216    	; 0x1d48 <do_scan+0x14e>
				scanner[*obj_count].dist = ir_dist;
			}
		}
		else
		{
			if(ir_dist > 60)
    1c70:	8d 33       	cpi	r24, 0x3D	; 61
    1c72:	91 05       	cpc	r25, r1
    1c74:	0c f4       	brge	.+2      	; 0x1c78 <do_scan+0x7e>
    1c76:	50 c0       	rjmp	.+160    	; 0x1d18 <do_scan+0x11e>
			{
				end_angle = angle;
				is_measuring = 0;
				scanner[*obj_count].angular_width = end_angle - start_angle;
    1c78:	d8 01       	movw	r26, r16
    1c7a:	ed 91       	ld	r30, X+
    1c7c:	fc 91       	ld	r31, X
    1c7e:	11 97       	sbiw	r26, 0x01	; 1
    1c80:	ee 0f       	add	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	ee 0f       	add	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	e1 56       	subi	r30, 0x61	; 97
    1c8e:	f7 4f       	sbci	r31, 0xF7	; 247
    1c90:	ce 01       	movw	r24, r28
    1c92:	8e 19       	sub	r24, r14
    1c94:	9f 09       	sbc	r25, r15
    1c96:	97 83       	std	Z+7, r25	; 0x07
    1c98:	86 83       	std	Z+6, r24	; 0x06
				if (scanner[*obj_count].angular_width > 1) {
    1c9a:	cd 90       	ld	r12, X+
    1c9c:	dc 90       	ld	r13, X
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	e1 56       	subi	r30, 0x61	; 97
    1cae:	f7 4f       	sbci	r31, 0xF7	; 247
    1cb0:	86 81       	ldd	r24, Z+6	; 0x06
    1cb2:	97 81       	ldd	r25, Z+7	; 0x07
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	0c f4       	brge	.+2      	; 0x1cbc <do_scan+0xc2>
    1cba:	45 c0       	rjmp	.+138    	; 0x1d46 <do_scan+0x14c>
					scanner[*obj_count].width = side_angle_side(scanner[*obj_count].angular_width, scanner[*obj_count].dist);
    1cbc:	96 01       	movw	r18, r12
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	22 0f       	add	r18, r18
    1cc4:	33 1f       	adc	r19, r19
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	f9 01       	movw	r30, r18
    1ccc:	e1 56       	subi	r30, 0x61	; 97
    1cce:	f7 4f       	sbci	r31, 0xF7	; 247
    1cd0:	6f 01       	movw	r12, r30
    1cd2:	62 81       	ldd	r22, Z+2	; 0x02
    1cd4:	73 81       	ldd	r23, Z+3	; 0x03
    1cd6:	c6 dd       	rcall	.-1140   	; 0x1864 <side_angle_side>
    1cd8:	d6 01       	movw	r26, r12
    1cda:	8d 93       	st	X+, r24
    1cdc:	9c 93       	st	X, r25
					scanner[*obj_count].angular_location = (start_angle + end_angle) / 2;
    1cde:	d8 01       	movw	r26, r16
    1ce0:	ed 91       	ld	r30, X+
    1ce2:	fc 91       	ld	r31, X
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	e1 56       	subi	r30, 0x61	; 97
    1cf2:	f7 4f       	sbci	r31, 0xF7	; 247
    1cf4:	c7 01       	movw	r24, r14
    1cf6:	8c 0f       	add	r24, r28
    1cf8:	9d 1f       	adc	r25, r29
    1cfa:	99 23       	and	r25, r25
    1cfc:	0c f4       	brge	.+2      	; 0x1d00 <do_scan+0x106>
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	95 95       	asr	r25
    1d02:	87 95       	ror	r24
    1d04:	95 83       	std	Z+5, r25	; 0x05
    1d06:	84 83       	std	Z+4, r24	; 0x04
					(*obj_count)++;
    1d08:	f8 01       	movw	r30, r16
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
		else
		{
			if(ir_dist > 60)
			{
				end_angle = angle;
				is_measuring = 0;
    1d14:	da 2c       	mov	r13, r10
    1d16:	18 c0       	rjmp	.+48     	; 0x1d48 <do_scan+0x14e>
					(*obj_count)++;
				}
			}
			else
			{
				scanner[*obj_count].dist = (scanner[*obj_count].dist + ir_dist) / 2;
    1d18:	d8 01       	movw	r26, r16
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	ee 0f       	add	r30, r30
    1d20:	ff 1f       	adc	r31, r31
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	ee 0f       	add	r30, r30
    1d28:	ff 1f       	adc	r31, r31
    1d2a:	e1 56       	subi	r30, 0x61	; 97
    1d2c:	f7 4f       	sbci	r31, 0xF7	; 247
    1d2e:	22 81       	ldd	r18, Z+2	; 0x02
    1d30:	33 81       	ldd	r19, Z+3	; 0x03
    1d32:	82 0f       	add	r24, r18
    1d34:	93 1f       	adc	r25, r19
    1d36:	99 23       	and	r25, r25
    1d38:	0c f4       	brge	.+2      	; 0x1d3c <do_scan+0x142>
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	95 95       	asr	r25
    1d3e:	87 95       	ror	r24
    1d40:	93 83       	std	Z+3, r25	; 0x03
    1d42:	82 83       	std	Z+2, r24	; 0x02
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <do_scan+0x14e>
		else
		{
			if(ir_dist > 60)
			{
				end_angle = angle;
				is_measuring = 0;
    1d46:	da 2c       	mov	r13, r10
	*obj_count = 0;
	
	set_servo_pos(0);
	wait_ms(1000);
	
	for(int angle = 0; angle < 181 && *obj_count <= sizeof(scanner); angle += 1)
    1d48:	21 96       	adiw	r28, 0x01	; 1
    1d4a:	c5 3b       	cpi	r28, 0xB5	; 181
    1d4c:	d1 05       	cpc	r29, r1
    1d4e:	39 f0       	breq	.+14     	; 0x1d5e <do_scan+0x164>
    1d50:	f8 01       	movw	r30, r16
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	89 37       	cpi	r24, 0x79	; 121
    1d58:	91 05       	cpc	r25, r1
    1d5a:	08 f4       	brcc	.+2      	; 0x1d5e <do_scan+0x164>
    1d5c:	71 cf       	rjmp	.-286    	; 0x1c40 <do_scan+0x46>
				scanner[*obj_count].dist = (scanner[*obj_count].dist + ir_dist) / 2;
			}
		}
	}
	return scanner;
}
    1d5e:	8f e9       	ldi	r24, 0x9F	; 159
    1d60:	98 e0       	ldi	r25, 0x08	; 8
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	bf 90       	pop	r11
    1d74:	af 90       	pop	r10
    1d76:	08 95       	ret

00001d78 <main_menu>:
/**
 * Sends the main menu over UART and waits for the user to make a selection from the menu.  Invalid input results in repeating the menu and prompt.
 * @return the menu option the user selected
 */
menu_option main_menu()
{
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <main_menu+0x6>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	char user_input[2];
	while (1) {
		send_msg("\r\n");
    1d82:	8d e1       	ldi	r24, 0x1D	; 29
    1d84:	96 e0       	ldi	r25, 0x06	; 6
    1d86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("a) autonomous\r\n");
    1d8a:	85 e5       	ldi	r24, 0x55	; 85
    1d8c:	95 e0       	ldi	r25, 0x05	; 5
    1d8e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("b) begin the test\r\n");
    1d92:	85 e6       	ldi	r24, 0x65	; 101
    1d94:	95 e0       	ldi	r25, 0x05	; 5
    1d96:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("e) reached the retrieval zone\r\n");
    1d9a:	89 e7       	ldi	r24, 0x79	; 121
    1d9c:	95 e0       	ldi	r25, 0x05	; 5
    1d9e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("r) retrieval zone has been identified\r\n");
    1da2:	89 e9       	ldi	r24, 0x99	; 153
    1da4:	95 e0       	ldi	r25, 0x05	; 5
    1da6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("m) move the robot\r\n");
    1daa:	81 ec       	ldi	r24, 0xC1	; 193
    1dac:	95 e0       	ldi	r25, 0x05	; 5
    1dae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("i) move the robot ignoring sensors\r\n");
    1db2:	85 ed       	ldi	r24, 0xD5	; 213
    1db4:	95 e0       	ldi	r25, 0x05	; 5
    1db6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("s) scan the area\r\n");
    1dba:	8a ef       	ldi	r24, 0xFA	; 250
    1dbc:	95 e0       	ldi	r25, 0x05	; 5
    1dbe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		send_msg("Your choice: ");
    1dc2:	8d e0       	ldi	r24, 0x0D	; 13
    1dc4:	96 e0       	ldi	r25, 0x06	; 6
    1dc6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		read_line(user_input, 2);
    1dca:	62 e0       	ldi	r22, 0x02	; 2
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	ce 01       	movw	r24, r28
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	0e 94 11 01 	call	0x222	; 0x222 <read_line>
		send_msg("\r\n\r\n");
    1dd6:	8b e1       	ldi	r24, 0x1B	; 27
    1dd8:	96 e0       	ldi	r25, 0x06	; 6
    1dda:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
	
		switch (user_input[0])
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	fc 01       	movw	r30, r24
    1de4:	e1 56       	subi	r30, 0x61	; 97
    1de6:	f1 09       	sbc	r31, r1
    1de8:	e3 31       	cpi	r30, 0x13	; 19
    1dea:	f1 05       	cpc	r31, r1
    1dec:	50 f6       	brcc	.-108    	; 0x1d82 <main_menu+0xa>
    1dee:	e8 5a       	subi	r30, 0xA8	; 168
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	4d c6       	rjmp	.+3226   	; 0x2a8e <__tablejump2__>
		{
		case 'a':
			return AUTO;
    1df4:	86 e0       	ldi	r24, 0x06	; 6
    1df6:	0d c0       	rjmp	.+26     	; 0x1e12 <main_menu+0x9a>
		case 'b':
			return INIT;
		case 'e':
			return STANDBY;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0b c0       	rjmp	.+22     	; 0x1e12 <main_menu+0x9a>
		case 'r':
			return ZONE_IDENTIFY;
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	09 c0       	rjmp	.+18     	; 0x1e12 <main_menu+0x9a>
		case 'm':
			return MOVEMENT;
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	07 c0       	rjmp	.+14     	; 0x1e12 <main_menu+0x9a>
		case 'i':
			return MOVEMENT_NO_SENSOR;
    1e04:	84 e0       	ldi	r24, 0x04	; 4
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <main_menu+0x9a>
		case 's':
			return SCAN;
    1e08:	85 e0       	ldi	r24, 0x05	; 5
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <main_menu+0x9a>
		case 'p':
			// hidden option for our UI to use
			return PROGRAM_UI;
    1e0c:	87 e0       	ldi	r24, 0x07	; 7
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <main_menu+0x9a>
		switch (user_input[0])
		{
		case 'a':
			return AUTO;
		case 'b':
			return INIT;
    1e10:	80 e0       	ldi	r24, 0x00	; 0
		default:
			break;
			// do nothing, continue the loop
		}
	}
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <show_objects>:
/**
 * Initiates an IR scan of the surrounding area to find all objects of >1 degree width.  The distance of the object, the angular location, and the calculated width of the object are sent over UART
 * If in_program_ui is set, the output is in a machine readable format.
 */
void show_objects()
{
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	c6 56       	subi	r28, 0x66	; 102
    1e3a:	d1 09       	sbc	r29, r1
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
	int obj_count;
	char msg[100];
	obj_t* objs;
	
	objs = do_scan(&obj_count);
    1e46:	ce 01       	movw	r24, r28
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	d7 de       	rcall	.-594    	; 0x1bfa <do_scan>
    1e4c:	e8 2e       	mov	r14, r24
    1e4e:	f9 2e       	mov	r15, r25
	if (!in_program_ui) {
    1e50:	20 91 17 09 	lds	r18, 0x0917
    1e54:	21 11       	cpse	r18, r1
    1e56:	18 c0       	rjmp	.+48     	; 0x1e88 <show_objects+0x6c>
		sprintf(msg, "Objects found: %d\r\n", obj_count);
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	8f 93       	push	r24
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	8f 93       	push	r24
    1e60:	20 e2       	ldi	r18, 0x20	; 32
    1e62:	36 e0       	ldi	r19, 0x06	; 6
    1e64:	3f 93       	push	r19
    1e66:	2f 93       	push	r18
    1e68:	8e 01       	movw	r16, r28
    1e6a:	0d 5f       	subi	r16, 0xFD	; 253
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	1f 93       	push	r17
    1e70:	0f 93       	push	r16
    1e72:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <sprintf>
		send_msg(msg);
    1e76:	c8 01       	movw	r24, r16
    1e78:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
	}
	
	for (int i = 0; i < obj_count; i++) {
    1e88:	29 81       	ldd	r18, Y+1	; 0x01
    1e8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e8c:	12 16       	cp	r1, r18
    1e8e:	13 06       	cpc	r1, r19
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <show_objects+0x78>
    1e92:	5d c0       	rjmp	.+186    	; 0x1f4e <show_objects+0x132>
    1e94:	0e 2d       	mov	r16, r14
    1e96:	1f 2d       	mov	r17, r15
    1e98:	ee 24       	eor	r14, r14
    1e9a:	e3 94       	inc	r14
    1e9c:	f1 2c       	mov	r15, r1
		if (in_program_ui) {
			sprintf(msg, "c,%d,%d,%d.", objs[i].dist, objs[i].angular_location, objs[i].width);
		} else {
			sprintf(msg, "%d: angular location: %3d    distance: %3d    width: %3d    angular width: %3d\r\n", i + 1, objs[i].angular_location, objs[i].dist, objs[i].width, objs[i].angular_width);
    1e9e:	0f 2e       	mov	r0, r31
    1ea0:	f0 e4       	ldi	r31, 0x40	; 64
    1ea2:	8f 2e       	mov	r8, r31
    1ea4:	f6 e0       	ldi	r31, 0x06	; 6
    1ea6:	9f 2e       	mov	r9, r31
    1ea8:	f0 2d       	mov	r31, r0
    1eaa:	6e 01       	movw	r12, r28
    1eac:	23 e0       	ldi	r18, 0x03	; 3
    1eae:	c2 0e       	add	r12, r18
    1eb0:	d1 1c       	adc	r13, r1
		send_msg(msg);
	}
	
	for (int i = 0; i < obj_count; i++) {
		if (in_program_ui) {
			sprintf(msg, "c,%d,%d,%d.", objs[i].dist, objs[i].angular_location, objs[i].width);
    1eb2:	0f 2e       	mov	r0, r31
    1eb4:	f4 e3       	ldi	r31, 0x34	; 52
    1eb6:	af 2e       	mov	r10, r31
    1eb8:	f6 e0       	ldi	r31, 0x06	; 6
    1eba:	bf 2e       	mov	r11, r31
    1ebc:	f0 2d       	mov	r31, r0
		sprintf(msg, "Objects found: %d\r\n", obj_count);
		send_msg(msg);
	}
	
	for (int i = 0; i < obj_count; i++) {
		if (in_program_ui) {
    1ebe:	80 91 17 09 	lds	r24, 0x0917
    1ec2:	88 23       	and	r24, r24
    1ec4:	c1 f0       	breq	.+48     	; 0x1ef6 <show_objects+0xda>
			sprintf(msg, "c,%d,%d,%d.", objs[i].dist, objs[i].angular_location, objs[i].width);
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	81 81       	ldd	r24, Z+1	; 0x01
    1eca:	8f 93       	push	r24
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 93       	push	r24
    1ed0:	85 81       	ldd	r24, Z+5	; 0x05
    1ed2:	8f 93       	push	r24
    1ed4:	84 81       	ldd	r24, Z+4	; 0x04
    1ed6:	8f 93       	push	r24
    1ed8:	83 81       	ldd	r24, Z+3	; 0x03
    1eda:	8f 93       	push	r24
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	8f 93       	push	r24
    1ee0:	bf 92       	push	r11
    1ee2:	af 92       	push	r10
    1ee4:	df 92       	push	r13
    1ee6:	cf 92       	push	r12
    1ee8:	de d7       	rcall	.+4028   	; 0x2ea6 <sprintf>
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	1d c0       	rjmp	.+58     	; 0x1f30 <show_objects+0x114>
		} else {
			sprintf(msg, "%d: angular location: %3d    distance: %3d    width: %3d    angular width: %3d\r\n", i + 1, objs[i].angular_location, objs[i].dist, objs[i].width, objs[i].angular_width);
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	87 81       	ldd	r24, Z+7	; 0x07
    1efa:	8f 93       	push	r24
    1efc:	86 81       	ldd	r24, Z+6	; 0x06
    1efe:	8f 93       	push	r24
    1f00:	81 81       	ldd	r24, Z+1	; 0x01
    1f02:	8f 93       	push	r24
    1f04:	80 81       	ld	r24, Z
    1f06:	8f 93       	push	r24
    1f08:	83 81       	ldd	r24, Z+3	; 0x03
    1f0a:	8f 93       	push	r24
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	8f 93       	push	r24
    1f10:	85 81       	ldd	r24, Z+5	; 0x05
    1f12:	8f 93       	push	r24
    1f14:	84 81       	ldd	r24, Z+4	; 0x04
    1f16:	8f 93       	push	r24
    1f18:	ff 92       	push	r15
    1f1a:	ef 92       	push	r14
    1f1c:	9f 92       	push	r9
    1f1e:	8f 92       	push	r8
    1f20:	df 92       	push	r13
    1f22:	cf 92       	push	r12
    1f24:	c0 d7       	rcall	.+3968   	; 0x2ea6 <sprintf>
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
		}
		send_msg(msg);
    1f30:	c6 01       	movw	r24, r12
    1f32:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
	if (!in_program_ui) {
		sprintf(msg, "Objects found: %d\r\n", obj_count);
		send_msg(msg);
	}
	
	for (int i = 0; i < obj_count; i++) {
    1f36:	c7 01       	movw	r24, r14
    1f38:	ef ef       	ldi	r30, 0xFF	; 255
    1f3a:	ee 1a       	sub	r14, r30
    1f3c:	fe 0a       	sbc	r15, r30
    1f3e:	08 5f       	subi	r16, 0xF8	; 248
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	29 81       	ldd	r18, Y+1	; 0x01
    1f44:	3a 81       	ldd	r19, Y+2	; 0x02
    1f46:	82 17       	cp	r24, r18
    1f48:	93 07       	cpc	r25, r19
    1f4a:	0c f4       	brge	.+2      	; 0x1f4e <show_objects+0x132>
    1f4c:	b8 cf       	rjmp	.-144    	; 0x1ebe <show_objects+0xa2>
		} else {
			sprintf(msg, "%d: angular location: %3d    distance: %3d    width: %3d    angular width: %3d\r\n", i + 1, objs[i].angular_location, objs[i].dist, objs[i].width, objs[i].angular_width);
		}
		send_msg(msg);
	}
}
    1f4e:	ca 59       	subi	r28, 0x9A	; 154
    1f50:	df 4f       	sbci	r29, 0xFF	; 255
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	cf 90       	pop	r12
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	9f 90       	pop	r9
    1f72:	8f 90       	pop	r8
    1f74:	08 95       	ret

00001f76 <show_sensors>:
 * Rotates the servo to 90 degrees, then reads the distance sensor, bump sensors, cliff sensors, and cliff signal sensors and sends the values over UART.
 * If in_program_ui is set, the values are in a machine readable format.
 * @param sensor_data the sensor data structure to work with
 */
void show_sensors(oi_t* sensor_data)
{
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	c0 55       	subi	r28, 0x50	; 80
    1f8c:	d1 09       	sbc	r29, r1
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	8c 01       	movw	r16, r24
	char msg[80];
	oi_update(sensor_data);
    1f9a:	bb d8       	rcall	.-3722   	; 0x1112 <oi_update>

	// Distance
	set_servo_pos(90);
    1f9c:	8a e5       	ldi	r24, 0x5A	; 90
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	5d dd       	rcall	.-1350   	; 0x1a5c <set_servo_pos>
	wait_ms(500);
    1fa2:	84 ef       	ldi	r24, 0xF4	; 244
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	b8 d9       	rcall	.-3216   	; 0x1318 <wait_ms>
	int val;
	int dist;
	val = ADC_read();
    1fa8:	62 dd       	rcall	.-1340   	; 0x1a6e <ADC_read>
    1faa:	f8 2e       	mov	r15, r24
    1fac:	e9 2e       	mov	r14, r25
	dist = dist_at_angle(90);
    1fae:	8a e5       	ldi	r24, 0x5A	; 90
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	20 de       	rcall	.-960    	; 0x1bf4 <dist_at_angle>
	
	if (in_program_ui) {
    1fb4:	20 91 17 09 	lds	r18, 0x0917
    1fb8:	22 23       	and	r18, r18
    1fba:	d9 f1       	breq	.+118    	; 0x2032 <show_sensors+0xbc>
		sprintf(msg, "e,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d.", sensor_data->bumper_left, sensor_data->bumper_right, sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright,
    1fbc:	9f 93       	push	r25
    1fbe:	8f 93       	push	r24
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	83 a1       	ldd	r24, Z+35	; 0x23
    1fc4:	8f 93       	push	r24
    1fc6:	82 a1       	ldd	r24, Z+34	; 0x22
    1fc8:	8f 93       	push	r24
    1fca:	81 a1       	ldd	r24, Z+33	; 0x21
    1fcc:	8f 93       	push	r24
    1fce:	80 a1       	ldd	r24, Z+32	; 0x20
    1fd0:	8f 93       	push	r24
    1fd2:	87 8d       	ldd	r24, Z+31	; 0x1f
    1fd4:	8f 93       	push	r24
    1fd6:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fd8:	8f 93       	push	r24
    1fda:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fdc:	8f 93       	push	r24
    1fde:	84 8d       	ldd	r24, Z+28	; 0x1c
    1fe0:	8f 93       	push	r24
    1fe2:	85 81       	ldd	r24, Z+5	; 0x05
    1fe4:	1f 92       	push	r1
    1fe6:	8f 93       	push	r24
    1fe8:	84 81       	ldd	r24, Z+4	; 0x04
    1fea:	1f 92       	push	r1
    1fec:	8f 93       	push	r24
    1fee:	83 81       	ldd	r24, Z+3	; 0x03
    1ff0:	1f 92       	push	r1
    1ff2:	8f 93       	push	r24
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	1f 92       	push	r1
    1ff8:	8f 93       	push	r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	81 70       	andi	r24, 0x01	; 1
    1ffe:	1f 92       	push	r1
    2000:	8f 93       	push	r24
    2002:	80 81       	ld	r24, Z
    2004:	86 95       	lsr	r24
    2006:	81 70       	andi	r24, 0x01	; 1
    2008:	1f 92       	push	r1
    200a:	8f 93       	push	r24
    200c:	81 e9       	ldi	r24, 0x91	; 145
    200e:	96 e0       	ldi	r25, 0x06	; 6
    2010:	9f 93       	push	r25
    2012:	8f 93       	push	r24
    2014:	8e 01       	movw	r16, r28
    2016:	0f 5f       	subi	r16, 0xFF	; 255
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	1f 93       	push	r17
    201c:	0f 93       	push	r16
    201e:	43 d7       	rcall	.+3718   	; 0x2ea6 <sprintf>
			sensor_data->cliff_right, sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal, dist);
		send_msg(msg);
    2020:	c8 01       	movw	r24, r16
    2022:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	6f c0       	rjmp	.+222    	; 0x2110 <show_sensors+0x19a>
	} else {
		sprintf(msg, "IR distance: %3d val %3d\r\n", dist, val);
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	85 eb       	ldi	r24, 0xB5	; 181
    203c:	96 e0       	ldi	r25, 0x06	; 6
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	fe 01       	movw	r30, r28
    2044:	31 96       	adiw	r30, 0x01	; 1
    2046:	7f 01       	movw	r14, r30
    2048:	ff 92       	push	r15
    204a:	ef 93       	push	r30
    204c:	2c d7       	rcall	.+3672   	; 0x2ea6 <sprintf>
		send_msg(msg);
    204e:	c7 01       	movw	r24, r14
    2050:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		// Cliff
		send_msg("Cliff Sensors\r\n");
    2054:	80 ed       	ldi	r24, 0xD0	; 208
    2056:	96 e0       	ldi	r25, 0x06	; 6
    2058:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		sprintf(msg, "  Left: %4d\tF-Left: %4d\tF-Right: %4d\tRight: %4d\r\n", sensor_data->cliff_left, sensor_data->cliff_frontleft, sensor_data->cliff_frontright, sensor_data->cliff_right);
    205c:	f8 01       	movw	r30, r16
    205e:	85 81       	ldd	r24, Z+5	; 0x05
    2060:	1f 92       	push	r1
    2062:	8f 93       	push	r24
    2064:	84 81       	ldd	r24, Z+4	; 0x04
    2066:	1f 92       	push	r1
    2068:	8f 93       	push	r24
    206a:	83 81       	ldd	r24, Z+3	; 0x03
    206c:	1f 92       	push	r1
    206e:	8f 93       	push	r24
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	1f 92       	push	r1
    2074:	8f 93       	push	r24
    2076:	0f 2e       	mov	r0, r31
    2078:	f0 ee       	ldi	r31, 0xE0	; 224
    207a:	cf 2e       	mov	r12, r31
    207c:	f6 e0       	ldi	r31, 0x06	; 6
    207e:	df 2e       	mov	r13, r31
    2080:	f0 2d       	mov	r31, r0
    2082:	df 92       	push	r13
    2084:	cf 92       	push	r12
    2086:	ff 92       	push	r15
    2088:	ef 92       	push	r14
    208a:	0d d7       	rcall	.+3610   	; 0x2ea6 <sprintf>
		send_msg(msg);
    208c:	c7 01       	movw	r24, r14
    208e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		// Cliff brightness
		send_msg("Cliff Sensor Signals\r\n");
    2092:	82 e1       	ldi	r24, 0x12	; 18
    2094:	97 e0       	ldi	r25, 0x07	; 7
    2096:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		sprintf(msg, "  Left: %4d\tF-Left: %4d\tF-Right: %4d\tRight: %4d\r\n", sensor_data->cliff_left_signal, sensor_data->cliff_frontleft_signal, sensor_data->cliff_frontright_signal, sensor_data->cliff_right_signal);
    209a:	f8 01       	movw	r30, r16
    209c:	83 a1       	ldd	r24, Z+35	; 0x23
    209e:	8f 93       	push	r24
    20a0:	82 a1       	ldd	r24, Z+34	; 0x22
    20a2:	8f 93       	push	r24
    20a4:	81 a1       	ldd	r24, Z+33	; 0x21
    20a6:	8f 93       	push	r24
    20a8:	80 a1       	ldd	r24, Z+32	; 0x20
    20aa:	8f 93       	push	r24
    20ac:	87 8d       	ldd	r24, Z+31	; 0x1f
    20ae:	8f 93       	push	r24
    20b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    20b2:	8f 93       	push	r24
    20b4:	85 8d       	ldd	r24, Z+29	; 0x1d
    20b6:	8f 93       	push	r24
    20b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    20ba:	8f 93       	push	r24
    20bc:	df 92       	push	r13
    20be:	cf 92       	push	r12
    20c0:	ff 92       	push	r15
    20c2:	ef 92       	push	r14
    20c4:	f0 d6       	rcall	.+3552   	; 0x2ea6 <sprintf>
		send_msg(msg);
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	c7 01       	movw	r24, r14
    20d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		// Bump
		send_msg("Bump:\r\n");
    20d6:	89 e2       	ldi	r24, 0x29	; 41
    20d8:	97 e0       	ldi	r25, 0x07	; 7
    20da:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		sprintf(msg, "  Left: %d\tRight: %d\r\n", sensor_data->bumper_left, sensor_data->bumper_right);
    20de:	f8 01       	movw	r30, r16
    20e0:	80 81       	ld	r24, Z
    20e2:	81 70       	andi	r24, 0x01	; 1
    20e4:	1f 92       	push	r1
    20e6:	8f 93       	push	r24
    20e8:	80 81       	ld	r24, Z
    20ea:	86 95       	lsr	r24
    20ec:	81 70       	andi	r24, 0x01	; 1
    20ee:	1f 92       	push	r1
    20f0:	8f 93       	push	r24
    20f2:	81 e3       	ldi	r24, 0x31	; 49
    20f4:	97 e0       	ldi	r25, 0x07	; 7
    20f6:	9f 93       	push	r25
    20f8:	8f 93       	push	r24
    20fa:	ff 92       	push	r15
    20fc:	ef 92       	push	r14
    20fe:	d3 d6       	rcall	.+3494   	; 0x2ea6 <sprintf>
		send_msg(msg);
    2100:	c7 01       	movw	r24, r14
    2102:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
	}
}
    2110:	c0 5b       	subi	r28, 0xB0	; 176
    2112:	df 4f       	sbci	r29, 0xFF	; 255
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	08 95       	ret

00002130 <move_menu>:
 * Displays a menu over UART with choices for linear movement and rotation.  Moves or rotates the robot and tells the user the result of the action.
 * @param sensor_data the sensor data structure to work with
 * @param ignore_sensors allows the robot to move despite color and cliff sensors.
 */
void move_menu(oi_t* sensor_data, char ignore_sensors)
{
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	c9 55       	subi	r28, 0x59	; 89
    2144:	d1 09       	sbc	r29, r1
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	7c 01       	movw	r14, r24
    2152:	d6 2e       	mov	r13, r22
	stop_reason s_reason;
	send_msg("r [-]#) rotate\r\n");
    2154:	88 e4       	ldi	r24, 0x48	; 72
    2156:	97 e0       	ldi	r25, 0x07	; 7
    2158:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
	send_msg("m [-]#) move\r\n");
    215c:	89 e5       	ldi	r24, 0x59	; 89
    215e:	97 e0       	ldi	r25, 0x07	; 7
    2160:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
	char user_input[8];
	int val;
	char msg[80];
	read_line(user_input, sizeof(user_input));
    2164:	68 e0       	ldi	r22, 0x08	; 8
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	ce 01       	movw	r24, r28
    216a:	02 96       	adiw	r24, 0x02	; 2
    216c:	0e 94 11 01 	call	0x222	; 0x222 <read_line>
	send_msg("\r\n");
    2170:	8d e1       	ldi	r24, 0x1D	; 29
    2172:	96 e0       	ldi	r25, 0x06	; 6
    2174:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
	switch (user_input[0])
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	8d 36       	cpi	r24, 0x6D	; 109
    217c:	f9 f0       	breq	.+62     	; 0x21bc <move_menu+0x8c>
    217e:	82 37       	cpi	r24, 0x72	; 114
    2180:	09 f0       	breq	.+2      	; 0x2184 <move_menu+0x54>
    2182:	46 c0       	rjmp	.+140    	; 0x2210 <move_menu+0xe0>
	{
	case 'r':
		val = atoi(user_input + 2);
    2184:	ce 01       	movw	r24, r28
    2186:	04 96       	adiw	r24, 0x04	; 4
    2188:	43 d6       	rcall	.+3206   	; 0x2e10 <atoi>
		val = rotate_deg(val, sensor_data);
    218a:	b7 01       	movw	r22, r14
    218c:	f2 d8       	rcall	.-3612   	; 0x1372 <rotate_deg>
		sprintf(msg, "Degrees rotated: %d\r\n", val);
    218e:	9f 93       	push	r25
    2190:	8f 93       	push	r24
    2192:	88 e6       	ldi	r24, 0x68	; 104
    2194:	97 e0       	ldi	r25, 0x07	; 7
    2196:	9f 93       	push	r25
    2198:	8f 93       	push	r24
    219a:	7e 01       	movw	r14, r28
    219c:	8a e0       	ldi	r24, 0x0A	; 10
    219e:	e8 0e       	add	r14, r24
    21a0:	f1 1c       	adc	r15, r1
    21a2:	ff 92       	push	r15
    21a4:	ef 92       	push	r14
    21a6:	7f d6       	rcall	.+3326   	; 0x2ea6 <sprintf>
		send_msg(msg);
    21a8:	c7 01       	movw	r24, r14
    21aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		break;
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	2e c0       	rjmp	.+92     	; 0x2218 <move_menu+0xe8>
	case 'm':
		val = atoi(user_input + 2);
    21bc:	ce 01       	movw	r24, r28
    21be:	04 96       	adiw	r24, 0x04	; 4
    21c0:	27 d6       	rcall	.+3150   	; 0x2e10 <atoi>
		val = move_result(val, sensor_data, ignore_sensors, ignore_sensors, &s_reason);
    21c2:	8e 01       	movw	r16, r28
    21c4:	0f 5f       	subi	r16, 0xFF	; 255
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	2d 2d       	mov	r18, r13
    21ca:	4d 2d       	mov	r20, r13
    21cc:	b7 01       	movw	r22, r14
    21ce:	62 da       	rcall	.-2876   	; 0x1694 <move_result>
		sprintf(msg, "Moved %d\r\nStop reason: %s\r\n", val, stop_reason_descrip[s_reason]);
    21d0:	e9 81       	ldd	r30, Y+1	; 0x01
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	e2 55       	subi	r30, 0x52	; 82
    21da:	fe 4f       	sbci	r31, 0xFE	; 254
    21dc:	21 81       	ldd	r18, Z+1	; 0x01
    21de:	2f 93       	push	r18
    21e0:	20 81       	ld	r18, Z
    21e2:	2f 93       	push	r18
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	8e e7       	ldi	r24, 0x7E	; 126
    21ea:	97 e0       	ldi	r25, 0x07	; 7
    21ec:	9f 93       	push	r25
    21ee:	8f 93       	push	r24
    21f0:	7e 01       	movw	r14, r28
    21f2:	9a e0       	ldi	r25, 0x0A	; 10
    21f4:	e9 0e       	add	r14, r25
    21f6:	f1 1c       	adc	r15, r1
    21f8:	ff 92       	push	r15
    21fa:	ef 92       	push	r14
    21fc:	54 d6       	rcall	.+3240   	; 0x2ea6 <sprintf>
		send_msg(msg);
    21fe:	c7 01       	movw	r24, r14
    2200:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
		break;
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <move_menu+0xe8>
	default:
		send_msg("Invalid input\r\n");
    2210:	8a e9       	ldi	r24, 0x9A	; 154
    2212:	97 e0       	ldi	r25, 0x07	; 7
    2214:	0e 94 ee 00 	call	0x1dc	; 0x1dc <send_msg>
	}
    2218:	c7 5a       	subi	r28, 0xA7	; 167
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	08 95       	ret

00002236 <acos>:
    2236:	9f 93       	push	r25
    2238:	9f 77       	andi	r25, 0x7F	; 127
    223a:	49 d1       	rcall	.+658    	; 0x24ce <__fp_arccos>
    223c:	0f 90       	pop	r0
    223e:	00 20       	and	r0, r0
    2240:	3a f4       	brpl	.+14     	; 0x2250 <acos+0x1a>
    2242:	90 58       	subi	r25, 0x80	; 128
    2244:	a2 ea       	ldi	r26, 0xA2	; 162
    2246:	2a ed       	ldi	r18, 0xDA	; 218
    2248:	3f e0       	ldi	r19, 0x0F	; 15
    224a:	49 e4       	ldi	r20, 0x49	; 73
    224c:	50 e4       	ldi	r21, 0x40	; 64
    224e:	13 d0       	rcall	.+38     	; 0x2276 <__addsf3x>
    2250:	bd c1       	rjmp	.+890    	; 0x25cc <__fp_round>

00002252 <__subsf3>:
    2252:	50 58       	subi	r21, 0x80	; 128

00002254 <__addsf3>:
    2254:	bb 27       	eor	r27, r27
    2256:	aa 27       	eor	r26, r26
    2258:	0e d0       	rcall	.+28     	; 0x2276 <__addsf3x>
    225a:	b8 c1       	rjmp	.+880    	; 0x25cc <__fp_round>
    225c:	81 d1       	rcall	.+770    	; 0x2560 <__fp_pscA>
    225e:	30 f0       	brcs	.+12     	; 0x226c <__addsf3+0x18>
    2260:	86 d1       	rcall	.+780    	; 0x256e <__fp_pscB>
    2262:	20 f0       	brcs	.+8      	; 0x226c <__addsf3+0x18>
    2264:	31 f4       	brne	.+12     	; 0x2272 <__addsf3+0x1e>
    2266:	9f 3f       	cpi	r25, 0xFF	; 255
    2268:	11 f4       	brne	.+4      	; 0x226e <__addsf3+0x1a>
    226a:	1e f4       	brtc	.+6      	; 0x2272 <__addsf3+0x1e>
    226c:	51 c1       	rjmp	.+674    	; 0x2510 <__fp_nan>
    226e:	0e f4       	brtc	.+2      	; 0x2272 <__addsf3+0x1e>
    2270:	e0 95       	com	r30
    2272:	e7 fb       	bst	r30, 7
    2274:	47 c1       	rjmp	.+654    	; 0x2504 <__fp_inf>

00002276 <__addsf3x>:
    2276:	e9 2f       	mov	r30, r25
    2278:	cb d1       	rcall	.+918    	; 0x2610 <__fp_split3>
    227a:	80 f3       	brcs	.-32     	; 0x225c <__addsf3+0x8>
    227c:	ba 17       	cp	r27, r26
    227e:	62 07       	cpc	r22, r18
    2280:	73 07       	cpc	r23, r19
    2282:	84 07       	cpc	r24, r20
    2284:	95 07       	cpc	r25, r21
    2286:	18 f0       	brcs	.+6      	; 0x228e <__addsf3x+0x18>
    2288:	71 f4       	brne	.+28     	; 0x22a6 <__addsf3x+0x30>
    228a:	9e f5       	brtc	.+102    	; 0x22f2 <__addsf3x+0x7c>
    228c:	e3 c1       	rjmp	.+966    	; 0x2654 <__fp_zero>
    228e:	0e f4       	brtc	.+2      	; 0x2292 <__addsf3x+0x1c>
    2290:	e0 95       	com	r30
    2292:	0b 2e       	mov	r0, r27
    2294:	ba 2f       	mov	r27, r26
    2296:	a0 2d       	mov	r26, r0
    2298:	0b 01       	movw	r0, r22
    229a:	b9 01       	movw	r22, r18
    229c:	90 01       	movw	r18, r0
    229e:	0c 01       	movw	r0, r24
    22a0:	ca 01       	movw	r24, r20
    22a2:	a0 01       	movw	r20, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	ff 27       	eor	r31, r31
    22a8:	59 1b       	sub	r21, r25
    22aa:	99 f0       	breq	.+38     	; 0x22d2 <__addsf3x+0x5c>
    22ac:	59 3f       	cpi	r21, 0xF9	; 249
    22ae:	50 f4       	brcc	.+20     	; 0x22c4 <__addsf3x+0x4e>
    22b0:	50 3e       	cpi	r21, 0xE0	; 224
    22b2:	68 f1       	brcs	.+90     	; 0x230e <__addsf3x+0x98>
    22b4:	1a 16       	cp	r1, r26
    22b6:	f0 40       	sbci	r31, 0x00	; 0
    22b8:	a2 2f       	mov	r26, r18
    22ba:	23 2f       	mov	r18, r19
    22bc:	34 2f       	mov	r19, r20
    22be:	44 27       	eor	r20, r20
    22c0:	58 5f       	subi	r21, 0xF8	; 248
    22c2:	f3 cf       	rjmp	.-26     	; 0x22aa <__addsf3x+0x34>
    22c4:	46 95       	lsr	r20
    22c6:	37 95       	ror	r19
    22c8:	27 95       	ror	r18
    22ca:	a7 95       	ror	r26
    22cc:	f0 40       	sbci	r31, 0x00	; 0
    22ce:	53 95       	inc	r21
    22d0:	c9 f7       	brne	.-14     	; 0x22c4 <__addsf3x+0x4e>
    22d2:	7e f4       	brtc	.+30     	; 0x22f2 <__addsf3x+0x7c>
    22d4:	1f 16       	cp	r1, r31
    22d6:	ba 0b       	sbc	r27, r26
    22d8:	62 0b       	sbc	r22, r18
    22da:	73 0b       	sbc	r23, r19
    22dc:	84 0b       	sbc	r24, r20
    22de:	ba f0       	brmi	.+46     	; 0x230e <__addsf3x+0x98>
    22e0:	91 50       	subi	r25, 0x01	; 1
    22e2:	a1 f0       	breq	.+40     	; 0x230c <__addsf3x+0x96>
    22e4:	ff 0f       	add	r31, r31
    22e6:	bb 1f       	adc	r27, r27
    22e8:	66 1f       	adc	r22, r22
    22ea:	77 1f       	adc	r23, r23
    22ec:	88 1f       	adc	r24, r24
    22ee:	c2 f7       	brpl	.-16     	; 0x22e0 <__addsf3x+0x6a>
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <__addsf3x+0x98>
    22f2:	ba 0f       	add	r27, r26
    22f4:	62 1f       	adc	r22, r18
    22f6:	73 1f       	adc	r23, r19
    22f8:	84 1f       	adc	r24, r20
    22fa:	48 f4       	brcc	.+18     	; 0x230e <__addsf3x+0x98>
    22fc:	87 95       	ror	r24
    22fe:	77 95       	ror	r23
    2300:	67 95       	ror	r22
    2302:	b7 95       	ror	r27
    2304:	f7 95       	ror	r31
    2306:	9e 3f       	cpi	r25, 0xFE	; 254
    2308:	08 f0       	brcs	.+2      	; 0x230c <__addsf3x+0x96>
    230a:	b3 cf       	rjmp	.-154    	; 0x2272 <__addsf3+0x1e>
    230c:	93 95       	inc	r25
    230e:	88 0f       	add	r24, r24
    2310:	08 f0       	brcs	.+2      	; 0x2314 <__addsf3x+0x9e>
    2312:	99 27       	eor	r25, r25
    2314:	ee 0f       	add	r30, r30
    2316:	97 95       	ror	r25
    2318:	87 95       	ror	r24
    231a:	08 95       	ret

0000231c <cos>:
    231c:	30 d1       	rcall	.+608    	; 0x257e <__fp_rempio2>
    231e:	e3 95       	inc	r30
    2320:	66 c1       	rjmp	.+716    	; 0x25ee <__fp_sinus>

00002322 <__divsf3>:
    2322:	0c d0       	rcall	.+24     	; 0x233c <__divsf3x>
    2324:	53 c1       	rjmp	.+678    	; 0x25cc <__fp_round>
    2326:	23 d1       	rcall	.+582    	; 0x256e <__fp_pscB>
    2328:	40 f0       	brcs	.+16     	; 0x233a <__divsf3+0x18>
    232a:	1a d1       	rcall	.+564    	; 0x2560 <__fp_pscA>
    232c:	30 f0       	brcs	.+12     	; 0x233a <__divsf3+0x18>
    232e:	21 f4       	brne	.+8      	; 0x2338 <__divsf3+0x16>
    2330:	5f 3f       	cpi	r21, 0xFF	; 255
    2332:	19 f0       	breq	.+6      	; 0x233a <__divsf3+0x18>
    2334:	e7 c0       	rjmp	.+462    	; 0x2504 <__fp_inf>
    2336:	51 11       	cpse	r21, r1
    2338:	8e c1       	rjmp	.+796    	; 0x2656 <__fp_szero>
    233a:	ea c0       	rjmp	.+468    	; 0x2510 <__fp_nan>

0000233c <__divsf3x>:
    233c:	69 d1       	rcall	.+722    	; 0x2610 <__fp_split3>
    233e:	98 f3       	brcs	.-26     	; 0x2326 <__divsf3+0x4>

00002340 <__divsf3_pse>:
    2340:	99 23       	and	r25, r25
    2342:	c9 f3       	breq	.-14     	; 0x2336 <__divsf3+0x14>
    2344:	55 23       	and	r21, r21
    2346:	b1 f3       	breq	.-20     	; 0x2334 <__divsf3+0x12>
    2348:	95 1b       	sub	r25, r21
    234a:	55 0b       	sbc	r21, r21
    234c:	bb 27       	eor	r27, r27
    234e:	aa 27       	eor	r26, r26
    2350:	62 17       	cp	r22, r18
    2352:	73 07       	cpc	r23, r19
    2354:	84 07       	cpc	r24, r20
    2356:	38 f0       	brcs	.+14     	; 0x2366 <__divsf3_pse+0x26>
    2358:	9f 5f       	subi	r25, 0xFF	; 255
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	22 0f       	add	r18, r18
    235e:	33 1f       	adc	r19, r19
    2360:	44 1f       	adc	r20, r20
    2362:	aa 1f       	adc	r26, r26
    2364:	a9 f3       	breq	.-22     	; 0x2350 <__divsf3_pse+0x10>
    2366:	33 d0       	rcall	.+102    	; 0x23ce <__divsf3_pse+0x8e>
    2368:	0e 2e       	mov	r0, r30
    236a:	3a f0       	brmi	.+14     	; 0x237a <__divsf3_pse+0x3a>
    236c:	e0 e8       	ldi	r30, 0x80	; 128
    236e:	30 d0       	rcall	.+96     	; 0x23d0 <__divsf3_pse+0x90>
    2370:	91 50       	subi	r25, 0x01	; 1
    2372:	50 40       	sbci	r21, 0x00	; 0
    2374:	e6 95       	lsr	r30
    2376:	00 1c       	adc	r0, r0
    2378:	ca f7       	brpl	.-14     	; 0x236c <__divsf3_pse+0x2c>
    237a:	29 d0       	rcall	.+82     	; 0x23ce <__divsf3_pse+0x8e>
    237c:	fe 2f       	mov	r31, r30
    237e:	27 d0       	rcall	.+78     	; 0x23ce <__divsf3_pse+0x8e>
    2380:	66 0f       	add	r22, r22
    2382:	77 1f       	adc	r23, r23
    2384:	88 1f       	adc	r24, r24
    2386:	bb 1f       	adc	r27, r27
    2388:	26 17       	cp	r18, r22
    238a:	37 07       	cpc	r19, r23
    238c:	48 07       	cpc	r20, r24
    238e:	ab 07       	cpc	r26, r27
    2390:	b0 e8       	ldi	r27, 0x80	; 128
    2392:	09 f0       	breq	.+2      	; 0x2396 <__divsf3_pse+0x56>
    2394:	bb 0b       	sbc	r27, r27
    2396:	80 2d       	mov	r24, r0
    2398:	bf 01       	movw	r22, r30
    239a:	ff 27       	eor	r31, r31
    239c:	93 58       	subi	r25, 0x83	; 131
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	2a f0       	brmi	.+10     	; 0x23ac <__divsf3_pse+0x6c>
    23a2:	9e 3f       	cpi	r25, 0xFE	; 254
    23a4:	51 05       	cpc	r21, r1
    23a6:	68 f0       	brcs	.+26     	; 0x23c2 <__divsf3_pse+0x82>
    23a8:	ad c0       	rjmp	.+346    	; 0x2504 <__fp_inf>
    23aa:	55 c1       	rjmp	.+682    	; 0x2656 <__fp_szero>
    23ac:	5f 3f       	cpi	r21, 0xFF	; 255
    23ae:	ec f3       	brlt	.-6      	; 0x23aa <__divsf3_pse+0x6a>
    23b0:	98 3e       	cpi	r25, 0xE8	; 232
    23b2:	dc f3       	brlt	.-10     	; 0x23aa <__divsf3_pse+0x6a>
    23b4:	86 95       	lsr	r24
    23b6:	77 95       	ror	r23
    23b8:	67 95       	ror	r22
    23ba:	b7 95       	ror	r27
    23bc:	f7 95       	ror	r31
    23be:	9f 5f       	subi	r25, 0xFF	; 255
    23c0:	c9 f7       	brne	.-14     	; 0x23b4 <__divsf3_pse+0x74>
    23c2:	88 0f       	add	r24, r24
    23c4:	91 1d       	adc	r25, r1
    23c6:	96 95       	lsr	r25
    23c8:	87 95       	ror	r24
    23ca:	97 f9       	bld	r25, 7
    23cc:	08 95       	ret
    23ce:	e1 e0       	ldi	r30, 0x01	; 1
    23d0:	66 0f       	add	r22, r22
    23d2:	77 1f       	adc	r23, r23
    23d4:	88 1f       	adc	r24, r24
    23d6:	bb 1f       	adc	r27, r27
    23d8:	62 17       	cp	r22, r18
    23da:	73 07       	cpc	r23, r19
    23dc:	84 07       	cpc	r24, r20
    23de:	ba 07       	cpc	r27, r26
    23e0:	20 f0       	brcs	.+8      	; 0x23ea <__divsf3_pse+0xaa>
    23e2:	62 1b       	sub	r22, r18
    23e4:	73 0b       	sbc	r23, r19
    23e6:	84 0b       	sbc	r24, r20
    23e8:	ba 0b       	sbc	r27, r26
    23ea:	ee 1f       	adc	r30, r30
    23ec:	88 f7       	brcc	.-30     	; 0x23d0 <__divsf3_pse+0x90>
    23ee:	e0 95       	com	r30
    23f0:	08 95       	ret

000023f2 <__fixsfsi>:
    23f2:	04 d0       	rcall	.+8      	; 0x23fc <__fixunssfsi>
    23f4:	68 94       	set
    23f6:	b1 11       	cpse	r27, r1
    23f8:	2e c1       	rjmp	.+604    	; 0x2656 <__fp_szero>
    23fa:	08 95       	ret

000023fc <__fixunssfsi>:
    23fc:	11 d1       	rcall	.+546    	; 0x2620 <__fp_splitA>
    23fe:	88 f0       	brcs	.+34     	; 0x2422 <__fixunssfsi+0x26>
    2400:	9f 57       	subi	r25, 0x7F	; 127
    2402:	90 f0       	brcs	.+36     	; 0x2428 <__fixunssfsi+0x2c>
    2404:	b9 2f       	mov	r27, r25
    2406:	99 27       	eor	r25, r25
    2408:	b7 51       	subi	r27, 0x17	; 23
    240a:	a0 f0       	brcs	.+40     	; 0x2434 <__fixunssfsi+0x38>
    240c:	d1 f0       	breq	.+52     	; 0x2442 <__fixunssfsi+0x46>
    240e:	66 0f       	add	r22, r22
    2410:	77 1f       	adc	r23, r23
    2412:	88 1f       	adc	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	1a f0       	brmi	.+6      	; 0x241e <__fixunssfsi+0x22>
    2418:	ba 95       	dec	r27
    241a:	c9 f7       	brne	.-14     	; 0x240e <__fixunssfsi+0x12>
    241c:	12 c0       	rjmp	.+36     	; 0x2442 <__fixunssfsi+0x46>
    241e:	b1 30       	cpi	r27, 0x01	; 1
    2420:	81 f0       	breq	.+32     	; 0x2442 <__fixunssfsi+0x46>
    2422:	18 d1       	rcall	.+560    	; 0x2654 <__fp_zero>
    2424:	b1 e0       	ldi	r27, 0x01	; 1
    2426:	08 95       	ret
    2428:	15 c1       	rjmp	.+554    	; 0x2654 <__fp_zero>
    242a:	67 2f       	mov	r22, r23
    242c:	78 2f       	mov	r23, r24
    242e:	88 27       	eor	r24, r24
    2430:	b8 5f       	subi	r27, 0xF8	; 248
    2432:	39 f0       	breq	.+14     	; 0x2442 <__fixunssfsi+0x46>
    2434:	b9 3f       	cpi	r27, 0xF9	; 249
    2436:	cc f3       	brlt	.-14     	; 0x242a <__fixunssfsi+0x2e>
    2438:	86 95       	lsr	r24
    243a:	77 95       	ror	r23
    243c:	67 95       	ror	r22
    243e:	b3 95       	inc	r27
    2440:	d9 f7       	brne	.-10     	; 0x2438 <__fixunssfsi+0x3c>
    2442:	3e f4       	brtc	.+14     	; 0x2452 <__fixunssfsi+0x56>
    2444:	90 95       	com	r25
    2446:	80 95       	com	r24
    2448:	70 95       	com	r23
    244a:	61 95       	neg	r22
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	8f 4f       	sbci	r24, 0xFF	; 255
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	08 95       	ret

00002454 <__floatunsisf>:
    2454:	e8 94       	clt
    2456:	09 c0       	rjmp	.+18     	; 0x246a <__floatsisf+0x12>

00002458 <__floatsisf>:
    2458:	97 fb       	bst	r25, 7
    245a:	3e f4       	brtc	.+14     	; 0x246a <__floatsisf+0x12>
    245c:	90 95       	com	r25
    245e:	80 95       	com	r24
    2460:	70 95       	com	r23
    2462:	61 95       	neg	r22
    2464:	7f 4f       	sbci	r23, 0xFF	; 255
    2466:	8f 4f       	sbci	r24, 0xFF	; 255
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	99 23       	and	r25, r25
    246c:	a9 f0       	breq	.+42     	; 0x2498 <__floatsisf+0x40>
    246e:	f9 2f       	mov	r31, r25
    2470:	96 e9       	ldi	r25, 0x96	; 150
    2472:	bb 27       	eor	r27, r27
    2474:	93 95       	inc	r25
    2476:	f6 95       	lsr	r31
    2478:	87 95       	ror	r24
    247a:	77 95       	ror	r23
    247c:	67 95       	ror	r22
    247e:	b7 95       	ror	r27
    2480:	f1 11       	cpse	r31, r1
    2482:	f8 cf       	rjmp	.-16     	; 0x2474 <__floatsisf+0x1c>
    2484:	fa f4       	brpl	.+62     	; 0x24c4 <__floatsisf+0x6c>
    2486:	bb 0f       	add	r27, r27
    2488:	11 f4       	brne	.+4      	; 0x248e <__floatsisf+0x36>
    248a:	60 ff       	sbrs	r22, 0
    248c:	1b c0       	rjmp	.+54     	; 0x24c4 <__floatsisf+0x6c>
    248e:	6f 5f       	subi	r22, 0xFF	; 255
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	8f 4f       	sbci	r24, 0xFF	; 255
    2494:	9f 4f       	sbci	r25, 0xFF	; 255
    2496:	16 c0       	rjmp	.+44     	; 0x24c4 <__floatsisf+0x6c>
    2498:	88 23       	and	r24, r24
    249a:	11 f0       	breq	.+4      	; 0x24a0 <__floatsisf+0x48>
    249c:	96 e9       	ldi	r25, 0x96	; 150
    249e:	11 c0       	rjmp	.+34     	; 0x24c2 <__floatsisf+0x6a>
    24a0:	77 23       	and	r23, r23
    24a2:	21 f0       	breq	.+8      	; 0x24ac <__floatsisf+0x54>
    24a4:	9e e8       	ldi	r25, 0x8E	; 142
    24a6:	87 2f       	mov	r24, r23
    24a8:	76 2f       	mov	r23, r22
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <__floatsisf+0x5e>
    24ac:	66 23       	and	r22, r22
    24ae:	71 f0       	breq	.+28     	; 0x24cc <__floatsisf+0x74>
    24b0:	96 e8       	ldi	r25, 0x86	; 134
    24b2:	86 2f       	mov	r24, r22
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	2a f0       	brmi	.+10     	; 0x24c4 <__floatsisf+0x6c>
    24ba:	9a 95       	dec	r25
    24bc:	66 0f       	add	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	88 1f       	adc	r24, r24
    24c2:	da f7       	brpl	.-10     	; 0x24ba <__floatsisf+0x62>
    24c4:	88 0f       	add	r24, r24
    24c6:	96 95       	lsr	r25
    24c8:	87 95       	ror	r24
    24ca:	97 f9       	bld	r25, 7
    24cc:	08 95       	ret

000024ce <__fp_arccos>:
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	1f 93       	push	r17
    24d4:	0f 93       	push	r16
    24d6:	8b 01       	movw	r16, r22
    24d8:	ec 01       	movw	r28, r24
    24da:	e6 ed       	ldi	r30, 0xD6	; 214
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	1b d0       	rcall	.+54     	; 0x2516 <__fp_powser>
    24e0:	75 d0       	rcall	.+234    	; 0x25cc <__fp_round>
    24e2:	98 01       	movw	r18, r16
    24e4:	ae 01       	movw	r20, r28
    24e6:	8b 01       	movw	r16, r22
    24e8:	ec 01       	movw	r28, r24
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	80 e8       	ldi	r24, 0x80	; 128
    24f0:	9f e3       	ldi	r25, 0x3F	; 63
    24f2:	af de       	rcall	.-674    	; 0x2252 <__subsf3>
    24f4:	6f d1       	rcall	.+734    	; 0x27d4 <sqrt>
    24f6:	98 01       	movw	r18, r16
    24f8:	ae 01       	movw	r20, r28
    24fa:	0f 91       	pop	r16
    24fc:	1f 91       	pop	r17
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	bb c0       	rjmp	.+374    	; 0x267a <__mulsf3x>

00002504 <__fp_inf>:
    2504:	97 f9       	bld	r25, 7
    2506:	9f 67       	ori	r25, 0x7F	; 127
    2508:	80 e8       	ldi	r24, 0x80	; 128
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	08 95       	ret

00002510 <__fp_nan>:
    2510:	9f ef       	ldi	r25, 0xFF	; 255
    2512:	80 ec       	ldi	r24, 0xC0	; 192
    2514:	08 95       	ret

00002516 <__fp_powser>:
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	1f 93       	push	r17
    251c:	0f 93       	push	r16
    251e:	ff 92       	push	r15
    2520:	ef 92       	push	r14
    2522:	df 92       	push	r13
    2524:	7b 01       	movw	r14, r22
    2526:	8c 01       	movw	r16, r24
    2528:	68 94       	set
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <__fp_powser+0x20>
    252c:	da 2e       	mov	r13, r26
    252e:	ef 01       	movw	r28, r30
    2530:	a4 d0       	rcall	.+328    	; 0x267a <__mulsf3x>
    2532:	fe 01       	movw	r30, r28
    2534:	e8 94       	clt
    2536:	a5 91       	lpm	r26, Z+
    2538:	25 91       	lpm	r18, Z+
    253a:	35 91       	lpm	r19, Z+
    253c:	45 91       	lpm	r20, Z+
    253e:	55 91       	lpm	r21, Z+
    2540:	ae f3       	brts	.-22     	; 0x252c <__fp_powser+0x16>
    2542:	ef 01       	movw	r28, r30
    2544:	98 de       	rcall	.-720    	; 0x2276 <__addsf3x>
    2546:	fe 01       	movw	r30, r28
    2548:	97 01       	movw	r18, r14
    254a:	a8 01       	movw	r20, r16
    254c:	da 94       	dec	r13
    254e:	79 f7       	brne	.-34     	; 0x252e <__fp_powser+0x18>
    2550:	df 90       	pop	r13
    2552:	ef 90       	pop	r14
    2554:	ff 90       	pop	r15
    2556:	0f 91       	pop	r16
    2558:	1f 91       	pop	r17
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <__fp_pscA>:
    2560:	00 24       	eor	r0, r0
    2562:	0a 94       	dec	r0
    2564:	16 16       	cp	r1, r22
    2566:	17 06       	cpc	r1, r23
    2568:	18 06       	cpc	r1, r24
    256a:	09 06       	cpc	r0, r25
    256c:	08 95       	ret

0000256e <__fp_pscB>:
    256e:	00 24       	eor	r0, r0
    2570:	0a 94       	dec	r0
    2572:	12 16       	cp	r1, r18
    2574:	13 06       	cpc	r1, r19
    2576:	14 06       	cpc	r1, r20
    2578:	05 06       	cpc	r0, r21
    257a:	08 95       	ret
    257c:	c9 cf       	rjmp	.-110    	; 0x2510 <__fp_nan>

0000257e <__fp_rempio2>:
    257e:	50 d0       	rcall	.+160    	; 0x2620 <__fp_splitA>
    2580:	e8 f3       	brcs	.-6      	; 0x257c <__fp_pscB+0xe>
    2582:	e8 94       	clt
    2584:	e0 e0       	ldi	r30, 0x00	; 0
    2586:	bb 27       	eor	r27, r27
    2588:	9f 57       	subi	r25, 0x7F	; 127
    258a:	f0 f0       	brcs	.+60     	; 0x25c8 <__fp_rempio2+0x4a>
    258c:	2a ed       	ldi	r18, 0xDA	; 218
    258e:	3f e0       	ldi	r19, 0x0F	; 15
    2590:	49 ec       	ldi	r20, 0xC9	; 201
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <__fp_rempio2+0x22>
    2594:	ee 0f       	add	r30, r30
    2596:	bb 0f       	add	r27, r27
    2598:	66 1f       	adc	r22, r22
    259a:	77 1f       	adc	r23, r23
    259c:	88 1f       	adc	r24, r24
    259e:	28 f0       	brcs	.+10     	; 0x25aa <__fp_rempio2+0x2c>
    25a0:	b2 3a       	cpi	r27, 0xA2	; 162
    25a2:	62 07       	cpc	r22, r18
    25a4:	73 07       	cpc	r23, r19
    25a6:	84 07       	cpc	r24, r20
    25a8:	28 f0       	brcs	.+10     	; 0x25b4 <__fp_rempio2+0x36>
    25aa:	b2 5a       	subi	r27, 0xA2	; 162
    25ac:	62 0b       	sbc	r22, r18
    25ae:	73 0b       	sbc	r23, r19
    25b0:	84 0b       	sbc	r24, r20
    25b2:	e3 95       	inc	r30
    25b4:	9a 95       	dec	r25
    25b6:	72 f7       	brpl	.-36     	; 0x2594 <__fp_rempio2+0x16>
    25b8:	80 38       	cpi	r24, 0x80	; 128
    25ba:	30 f4       	brcc	.+12     	; 0x25c8 <__fp_rempio2+0x4a>
    25bc:	9a 95       	dec	r25
    25be:	bb 0f       	add	r27, r27
    25c0:	66 1f       	adc	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	88 1f       	adc	r24, r24
    25c6:	d2 f7       	brpl	.-12     	; 0x25bc <__fp_rempio2+0x3e>
    25c8:	90 48       	sbci	r25, 0x80	; 128
    25ca:	75 c1       	rjmp	.+746    	; 0x28b6 <__fp_mpack_finite>

000025cc <__fp_round>:
    25cc:	09 2e       	mov	r0, r25
    25ce:	03 94       	inc	r0
    25d0:	00 0c       	add	r0, r0
    25d2:	11 f4       	brne	.+4      	; 0x25d8 <__fp_round+0xc>
    25d4:	88 23       	and	r24, r24
    25d6:	52 f0       	brmi	.+20     	; 0x25ec <__fp_round+0x20>
    25d8:	bb 0f       	add	r27, r27
    25da:	40 f4       	brcc	.+16     	; 0x25ec <__fp_round+0x20>
    25dc:	bf 2b       	or	r27, r31
    25de:	11 f4       	brne	.+4      	; 0x25e4 <__fp_round+0x18>
    25e0:	60 ff       	sbrs	r22, 0
    25e2:	04 c0       	rjmp	.+8      	; 0x25ec <__fp_round+0x20>
    25e4:	6f 5f       	subi	r22, 0xFF	; 255
    25e6:	7f 4f       	sbci	r23, 0xFF	; 255
    25e8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ea:	9f 4f       	sbci	r25, 0xFF	; 255
    25ec:	08 95       	ret

000025ee <__fp_sinus>:
    25ee:	ef 93       	push	r30
    25f0:	e0 ff       	sbrs	r30, 0
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <__fp_sinus+0x12>
    25f4:	a2 ea       	ldi	r26, 0xA2	; 162
    25f6:	2a ed       	ldi	r18, 0xDA	; 218
    25f8:	3f e0       	ldi	r19, 0x0F	; 15
    25fa:	49 ec       	ldi	r20, 0xC9	; 201
    25fc:	5f eb       	ldi	r21, 0xBF	; 191
    25fe:	3b de       	rcall	.-906    	; 0x2276 <__addsf3x>
    2600:	e5 df       	rcall	.-54     	; 0x25cc <__fp_round>
    2602:	0f 90       	pop	r0
    2604:	03 94       	inc	r0
    2606:	01 fc       	sbrc	r0, 1
    2608:	90 58       	subi	r25, 0x80	; 128
    260a:	ee ef       	ldi	r30, 0xFE	; 254
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	66 c1       	rjmp	.+716    	; 0x28dc <__fp_powsodd>

00002610 <__fp_split3>:
    2610:	57 fd       	sbrc	r21, 7
    2612:	90 58       	subi	r25, 0x80	; 128
    2614:	44 0f       	add	r20, r20
    2616:	55 1f       	adc	r21, r21
    2618:	59 f0       	breq	.+22     	; 0x2630 <__fp_splitA+0x10>
    261a:	5f 3f       	cpi	r21, 0xFF	; 255
    261c:	71 f0       	breq	.+28     	; 0x263a <__fp_splitA+0x1a>
    261e:	47 95       	ror	r20

00002620 <__fp_splitA>:
    2620:	88 0f       	add	r24, r24
    2622:	97 fb       	bst	r25, 7
    2624:	99 1f       	adc	r25, r25
    2626:	61 f0       	breq	.+24     	; 0x2640 <__fp_splitA+0x20>
    2628:	9f 3f       	cpi	r25, 0xFF	; 255
    262a:	79 f0       	breq	.+30     	; 0x264a <__fp_splitA+0x2a>
    262c:	87 95       	ror	r24
    262e:	08 95       	ret
    2630:	12 16       	cp	r1, r18
    2632:	13 06       	cpc	r1, r19
    2634:	14 06       	cpc	r1, r20
    2636:	55 1f       	adc	r21, r21
    2638:	f2 cf       	rjmp	.-28     	; 0x261e <__fp_split3+0xe>
    263a:	46 95       	lsr	r20
    263c:	f1 df       	rcall	.-30     	; 0x2620 <__fp_splitA>
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <__fp_splitA+0x30>
    2640:	16 16       	cp	r1, r22
    2642:	17 06       	cpc	r1, r23
    2644:	18 06       	cpc	r1, r24
    2646:	99 1f       	adc	r25, r25
    2648:	f1 cf       	rjmp	.-30     	; 0x262c <__fp_splitA+0xc>
    264a:	86 95       	lsr	r24
    264c:	71 05       	cpc	r23, r1
    264e:	61 05       	cpc	r22, r1
    2650:	08 94       	sec
    2652:	08 95       	ret

00002654 <__fp_zero>:
    2654:	e8 94       	clt

00002656 <__fp_szero>:
    2656:	bb 27       	eor	r27, r27
    2658:	66 27       	eor	r22, r22
    265a:	77 27       	eor	r23, r23
    265c:	cb 01       	movw	r24, r22
    265e:	97 f9       	bld	r25, 7
    2660:	08 95       	ret

00002662 <__mulsf3>:
    2662:	0b d0       	rcall	.+22     	; 0x267a <__mulsf3x>
    2664:	b3 cf       	rjmp	.-154    	; 0x25cc <__fp_round>
    2666:	7c df       	rcall	.-264    	; 0x2560 <__fp_pscA>
    2668:	28 f0       	brcs	.+10     	; 0x2674 <__mulsf3+0x12>
    266a:	81 df       	rcall	.-254    	; 0x256e <__fp_pscB>
    266c:	18 f0       	brcs	.+6      	; 0x2674 <__mulsf3+0x12>
    266e:	95 23       	and	r25, r21
    2670:	09 f0       	breq	.+2      	; 0x2674 <__mulsf3+0x12>
    2672:	48 cf       	rjmp	.-368    	; 0x2504 <__fp_inf>
    2674:	4d cf       	rjmp	.-358    	; 0x2510 <__fp_nan>
    2676:	11 24       	eor	r1, r1
    2678:	ee cf       	rjmp	.-36     	; 0x2656 <__fp_szero>

0000267a <__mulsf3x>:
    267a:	ca df       	rcall	.-108    	; 0x2610 <__fp_split3>
    267c:	a0 f3       	brcs	.-24     	; 0x2666 <__mulsf3+0x4>

0000267e <__mulsf3_pse>:
    267e:	95 9f       	mul	r25, r21
    2680:	d1 f3       	breq	.-12     	; 0x2676 <__mulsf3+0x14>
    2682:	95 0f       	add	r25, r21
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	55 1f       	adc	r21, r21
    2688:	62 9f       	mul	r22, r18
    268a:	f0 01       	movw	r30, r0
    268c:	72 9f       	mul	r23, r18
    268e:	bb 27       	eor	r27, r27
    2690:	f0 0d       	add	r31, r0
    2692:	b1 1d       	adc	r27, r1
    2694:	63 9f       	mul	r22, r19
    2696:	aa 27       	eor	r26, r26
    2698:	f0 0d       	add	r31, r0
    269a:	b1 1d       	adc	r27, r1
    269c:	aa 1f       	adc	r26, r26
    269e:	64 9f       	mul	r22, r20
    26a0:	66 27       	eor	r22, r22
    26a2:	b0 0d       	add	r27, r0
    26a4:	a1 1d       	adc	r26, r1
    26a6:	66 1f       	adc	r22, r22
    26a8:	82 9f       	mul	r24, r18
    26aa:	22 27       	eor	r18, r18
    26ac:	b0 0d       	add	r27, r0
    26ae:	a1 1d       	adc	r26, r1
    26b0:	62 1f       	adc	r22, r18
    26b2:	73 9f       	mul	r23, r19
    26b4:	b0 0d       	add	r27, r0
    26b6:	a1 1d       	adc	r26, r1
    26b8:	62 1f       	adc	r22, r18
    26ba:	83 9f       	mul	r24, r19
    26bc:	a0 0d       	add	r26, r0
    26be:	61 1d       	adc	r22, r1
    26c0:	22 1f       	adc	r18, r18
    26c2:	74 9f       	mul	r23, r20
    26c4:	33 27       	eor	r19, r19
    26c6:	a0 0d       	add	r26, r0
    26c8:	61 1d       	adc	r22, r1
    26ca:	23 1f       	adc	r18, r19
    26cc:	84 9f       	mul	r24, r20
    26ce:	60 0d       	add	r22, r0
    26d0:	21 1d       	adc	r18, r1
    26d2:	82 2f       	mov	r24, r18
    26d4:	76 2f       	mov	r23, r22
    26d6:	6a 2f       	mov	r22, r26
    26d8:	11 24       	eor	r1, r1
    26da:	9f 57       	subi	r25, 0x7F	; 127
    26dc:	50 40       	sbci	r21, 0x00	; 0
    26de:	8a f0       	brmi	.+34     	; 0x2702 <__mulsf3_pse+0x84>
    26e0:	e1 f0       	breq	.+56     	; 0x271a <__mulsf3_pse+0x9c>
    26e2:	88 23       	and	r24, r24
    26e4:	4a f0       	brmi	.+18     	; 0x26f8 <__mulsf3_pse+0x7a>
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	bb 1f       	adc	r27, r27
    26ec:	66 1f       	adc	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	88 1f       	adc	r24, r24
    26f2:	91 50       	subi	r25, 0x01	; 1
    26f4:	50 40       	sbci	r21, 0x00	; 0
    26f6:	a9 f7       	brne	.-22     	; 0x26e2 <__mulsf3_pse+0x64>
    26f8:	9e 3f       	cpi	r25, 0xFE	; 254
    26fa:	51 05       	cpc	r21, r1
    26fc:	70 f0       	brcs	.+28     	; 0x271a <__mulsf3_pse+0x9c>
    26fe:	02 cf       	rjmp	.-508    	; 0x2504 <__fp_inf>
    2700:	aa cf       	rjmp	.-172    	; 0x2656 <__fp_szero>
    2702:	5f 3f       	cpi	r21, 0xFF	; 255
    2704:	ec f3       	brlt	.-6      	; 0x2700 <__mulsf3_pse+0x82>
    2706:	98 3e       	cpi	r25, 0xE8	; 232
    2708:	dc f3       	brlt	.-10     	; 0x2700 <__mulsf3_pse+0x82>
    270a:	86 95       	lsr	r24
    270c:	77 95       	ror	r23
    270e:	67 95       	ror	r22
    2710:	b7 95       	ror	r27
    2712:	f7 95       	ror	r31
    2714:	e7 95       	ror	r30
    2716:	9f 5f       	subi	r25, 0xFF	; 255
    2718:	c1 f7       	brne	.-16     	; 0x270a <__mulsf3_pse+0x8c>
    271a:	fe 2b       	or	r31, r30
    271c:	88 0f       	add	r24, r24
    271e:	91 1d       	adc	r25, r1
    2720:	96 95       	lsr	r25
    2722:	87 95       	ror	r24
    2724:	97 f9       	bld	r25, 7
    2726:	08 95       	ret

00002728 <pow>:
    2728:	fa 01       	movw	r30, r20
    272a:	ee 0f       	add	r30, r30
    272c:	ff 1f       	adc	r31, r31
    272e:	30 96       	adiw	r30, 0x00	; 0
    2730:	21 05       	cpc	r18, r1
    2732:	31 05       	cpc	r19, r1
    2734:	99 f1       	breq	.+102    	; 0x279c <pow+0x74>
    2736:	61 15       	cp	r22, r1
    2738:	71 05       	cpc	r23, r1
    273a:	61 f4       	brne	.+24     	; 0x2754 <pow+0x2c>
    273c:	80 38       	cpi	r24, 0x80	; 128
    273e:	bf e3       	ldi	r27, 0x3F	; 63
    2740:	9b 07       	cpc	r25, r27
    2742:	49 f1       	breq	.+82     	; 0x2796 <pow+0x6e>
    2744:	68 94       	set
    2746:	90 38       	cpi	r25, 0x80	; 128
    2748:	81 05       	cpc	r24, r1
    274a:	61 f0       	breq	.+24     	; 0x2764 <pow+0x3c>
    274c:	80 38       	cpi	r24, 0x80	; 128
    274e:	bf ef       	ldi	r27, 0xFF	; 255
    2750:	9b 07       	cpc	r25, r27
    2752:	41 f0       	breq	.+16     	; 0x2764 <pow+0x3c>
    2754:	99 23       	and	r25, r25
    2756:	42 f5       	brpl	.+80     	; 0x27a8 <pow+0x80>
    2758:	ff 3f       	cpi	r31, 0xFF	; 255
    275a:	e1 05       	cpc	r30, r1
    275c:	31 05       	cpc	r19, r1
    275e:	21 05       	cpc	r18, r1
    2760:	11 f1       	breq	.+68     	; 0x27a6 <pow+0x7e>
    2762:	e8 94       	clt
    2764:	08 94       	sec
    2766:	e7 95       	ror	r30
    2768:	d9 01       	movw	r26, r18
    276a:	aa 23       	and	r26, r26
    276c:	29 f4       	brne	.+10     	; 0x2778 <pow+0x50>
    276e:	ab 2f       	mov	r26, r27
    2770:	be 2f       	mov	r27, r30
    2772:	f8 5f       	subi	r31, 0xF8	; 248
    2774:	d0 f3       	brcs	.-12     	; 0x276a <pow+0x42>
    2776:	10 c0       	rjmp	.+32     	; 0x2798 <pow+0x70>
    2778:	ff 5f       	subi	r31, 0xFF	; 255
    277a:	70 f4       	brcc	.+28     	; 0x2798 <pow+0x70>
    277c:	a6 95       	lsr	r26
    277e:	e0 f7       	brcc	.-8      	; 0x2778 <pow+0x50>
    2780:	f7 39       	cpi	r31, 0x97	; 151
    2782:	50 f0       	brcs	.+20     	; 0x2798 <pow+0x70>
    2784:	19 f0       	breq	.+6      	; 0x278c <pow+0x64>
    2786:	ff 3a       	cpi	r31, 0xAF	; 175
    2788:	38 f4       	brcc	.+14     	; 0x2798 <pow+0x70>
    278a:	9f 77       	andi	r25, 0x7F	; 127
    278c:	9f 93       	push	r25
    278e:	0c d0       	rcall	.+24     	; 0x27a8 <pow+0x80>
    2790:	0f 90       	pop	r0
    2792:	07 fc       	sbrc	r0, 7
    2794:	90 58       	subi	r25, 0x80	; 128
    2796:	08 95       	ret
    2798:	3e f0       	brts	.+14     	; 0x27a8 <pow+0x80>
    279a:	ba ce       	rjmp	.-652    	; 0x2510 <__fp_nan>
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	80 e8       	ldi	r24, 0x80	; 128
    27a2:	9f e3       	ldi	r25, 0x3F	; 63
    27a4:	08 95       	ret
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	9f 77       	andi	r25, 0x7F	; 127
    27aa:	5f 93       	push	r21
    27ac:	4f 93       	push	r20
    27ae:	3f 93       	push	r19
    27b0:	2f 93       	push	r18
    27b2:	e7 d0       	rcall	.+462    	; 0x2982 <log>
    27b4:	2f 91       	pop	r18
    27b6:	3f 91       	pop	r19
    27b8:	4f 91       	pop	r20
    27ba:	5f 91       	pop	r21
    27bc:	52 df       	rcall	.-348    	; 0x2662 <__mulsf3>
    27be:	4d c0       	rjmp	.+154    	; 0x285a <exp>

000027c0 <sin>:
    27c0:	9f 93       	push	r25
    27c2:	dd de       	rcall	.-582    	; 0x257e <__fp_rempio2>
    27c4:	0f 90       	pop	r0
    27c6:	07 fc       	sbrc	r0, 7
    27c8:	ee 5f       	subi	r30, 0xFE	; 254
    27ca:	11 cf       	rjmp	.-478    	; 0x25ee <__fp_sinus>
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <sin+0x12>
    27ce:	0e f4       	brtc	.+2      	; 0x27d2 <sin+0x12>
    27d0:	9f ce       	rjmp	.-706    	; 0x2510 <__fp_nan>
    27d2:	6f c0       	rjmp	.+222    	; 0x28b2 <__fp_mpack>

000027d4 <sqrt>:
    27d4:	25 df       	rcall	.-438    	; 0x2620 <__fp_splitA>
    27d6:	d0 f3       	brcs	.-12     	; 0x27cc <sin+0xc>
    27d8:	99 23       	and	r25, r25
    27da:	d9 f3       	breq	.-10     	; 0x27d2 <sin+0x12>
    27dc:	ce f3       	brts	.-14     	; 0x27d0 <sin+0x10>
    27de:	9f 57       	subi	r25, 0x7F	; 127
    27e0:	55 0b       	sbc	r21, r21
    27e2:	87 ff       	sbrs	r24, 7
    27e4:	74 d0       	rcall	.+232    	; 0x28ce <__fp_norm2>
    27e6:	00 24       	eor	r0, r0
    27e8:	a0 e6       	ldi	r26, 0x60	; 96
    27ea:	40 ea       	ldi	r20, 0xA0	; 160
    27ec:	90 01       	movw	r18, r0
    27ee:	80 58       	subi	r24, 0x80	; 128
    27f0:	56 95       	lsr	r21
    27f2:	97 95       	ror	r25
    27f4:	28 f4       	brcc	.+10     	; 0x2800 <sqrt+0x2c>
    27f6:	80 5c       	subi	r24, 0xC0	; 192
    27f8:	66 0f       	add	r22, r22
    27fa:	77 1f       	adc	r23, r23
    27fc:	88 1f       	adc	r24, r24
    27fe:	20 f0       	brcs	.+8      	; 0x2808 <sqrt+0x34>
    2800:	26 17       	cp	r18, r22
    2802:	37 07       	cpc	r19, r23
    2804:	48 07       	cpc	r20, r24
    2806:	30 f4       	brcc	.+12     	; 0x2814 <sqrt+0x40>
    2808:	62 1b       	sub	r22, r18
    280a:	73 0b       	sbc	r23, r19
    280c:	84 0b       	sbc	r24, r20
    280e:	20 29       	or	r18, r0
    2810:	31 29       	or	r19, r1
    2812:	4a 2b       	or	r20, r26
    2814:	a6 95       	lsr	r26
    2816:	17 94       	ror	r1
    2818:	07 94       	ror	r0
    281a:	20 25       	eor	r18, r0
    281c:	31 25       	eor	r19, r1
    281e:	4a 27       	eor	r20, r26
    2820:	58 f7       	brcc	.-42     	; 0x27f8 <sqrt+0x24>
    2822:	66 0f       	add	r22, r22
    2824:	77 1f       	adc	r23, r23
    2826:	88 1f       	adc	r24, r24
    2828:	20 f0       	brcs	.+8      	; 0x2832 <sqrt+0x5e>
    282a:	26 17       	cp	r18, r22
    282c:	37 07       	cpc	r19, r23
    282e:	48 07       	cpc	r20, r24
    2830:	30 f4       	brcc	.+12     	; 0x283e <sqrt+0x6a>
    2832:	62 0b       	sbc	r22, r18
    2834:	73 0b       	sbc	r23, r19
    2836:	84 0b       	sbc	r24, r20
    2838:	20 0d       	add	r18, r0
    283a:	31 1d       	adc	r19, r1
    283c:	41 1d       	adc	r20, r1
    283e:	a0 95       	com	r26
    2840:	81 f7       	brne	.-32     	; 0x2822 <sqrt+0x4e>
    2842:	b9 01       	movw	r22, r18
    2844:	84 2f       	mov	r24, r20
    2846:	91 58       	subi	r25, 0x81	; 129
    2848:	88 0f       	add	r24, r24
    284a:	96 95       	lsr	r25
    284c:	87 95       	ror	r24
    284e:	08 95       	ret
    2850:	19 f4       	brne	.+6      	; 0x2858 <sqrt+0x84>
    2852:	0e f0       	brts	.+2      	; 0x2856 <sqrt+0x82>
    2854:	57 ce       	rjmp	.-850    	; 0x2504 <__fp_inf>
    2856:	fe ce       	rjmp	.-516    	; 0x2654 <__fp_zero>
    2858:	5b ce       	rjmp	.-842    	; 0x2510 <__fp_nan>

0000285a <exp>:
    285a:	e2 de       	rcall	.-572    	; 0x2620 <__fp_splitA>
    285c:	c8 f3       	brcs	.-14     	; 0x2850 <sqrt+0x7c>
    285e:	96 38       	cpi	r25, 0x86	; 134
    2860:	c0 f7       	brcc	.-16     	; 0x2852 <sqrt+0x7e>
    2862:	07 f8       	bld	r0, 7
    2864:	0f 92       	push	r0
    2866:	e8 94       	clt
    2868:	2b e3       	ldi	r18, 0x3B	; 59
    286a:	3a ea       	ldi	r19, 0xAA	; 170
    286c:	48 eb       	ldi	r20, 0xB8	; 184
    286e:	5f e7       	ldi	r21, 0x7F	; 127
    2870:	06 df       	rcall	.-500    	; 0x267e <__mulsf3_pse>
    2872:	0f 92       	push	r0
    2874:	0f 92       	push	r0
    2876:	0f 92       	push	r0
    2878:	4d b7       	in	r20, 0x3d	; 61
    287a:	5e b7       	in	r21, 0x3e	; 62
    287c:	0f 92       	push	r0
    287e:	c1 d0       	rcall	.+386    	; 0x2a02 <modf>
    2880:	ec e1       	ldi	r30, 0x1C	; 28
    2882:	f1 e0       	ldi	r31, 0x01	; 1
    2884:	48 de       	rcall	.-880    	; 0x2516 <__fp_powser>
    2886:	4f 91       	pop	r20
    2888:	5f 91       	pop	r21
    288a:	ef 91       	pop	r30
    288c:	ff 91       	pop	r31
    288e:	e5 95       	asr	r30
    2890:	ee 1f       	adc	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	49 f0       	breq	.+18     	; 0x28a8 <exp+0x4e>
    2896:	fe 57       	subi	r31, 0x7E	; 126
    2898:	e0 68       	ori	r30, 0x80	; 128
    289a:	44 27       	eor	r20, r20
    289c:	ee 0f       	add	r30, r30
    289e:	44 1f       	adc	r20, r20
    28a0:	fa 95       	dec	r31
    28a2:	e1 f7       	brne	.-8      	; 0x289c <exp+0x42>
    28a4:	41 95       	neg	r20
    28a6:	55 0b       	sbc	r21, r21
    28a8:	33 d0       	rcall	.+102    	; 0x2910 <ldexp>
    28aa:	0f 90       	pop	r0
    28ac:	07 fe       	sbrs	r0, 7
    28ae:	27 c0       	rjmp	.+78     	; 0x28fe <inverse>
    28b0:	08 95       	ret

000028b2 <__fp_mpack>:
    28b2:	9f 3f       	cpi	r25, 0xFF	; 255
    28b4:	31 f0       	breq	.+12     	; 0x28c2 <__fp_mpack_finite+0xc>

000028b6 <__fp_mpack_finite>:
    28b6:	91 50       	subi	r25, 0x01	; 1
    28b8:	20 f4       	brcc	.+8      	; 0x28c2 <__fp_mpack_finite+0xc>
    28ba:	87 95       	ror	r24
    28bc:	77 95       	ror	r23
    28be:	67 95       	ror	r22
    28c0:	b7 95       	ror	r27
    28c2:	88 0f       	add	r24, r24
    28c4:	91 1d       	adc	r25, r1
    28c6:	96 95       	lsr	r25
    28c8:	87 95       	ror	r24
    28ca:	97 f9       	bld	r25, 7
    28cc:	08 95       	ret

000028ce <__fp_norm2>:
    28ce:	91 50       	subi	r25, 0x01	; 1
    28d0:	50 40       	sbci	r21, 0x00	; 0
    28d2:	66 0f       	add	r22, r22
    28d4:	77 1f       	adc	r23, r23
    28d6:	88 1f       	adc	r24, r24
    28d8:	d2 f7       	brpl	.-12     	; 0x28ce <__fp_norm2>
    28da:	08 95       	ret

000028dc <__fp_powsodd>:
    28dc:	9f 93       	push	r25
    28de:	8f 93       	push	r24
    28e0:	7f 93       	push	r23
    28e2:	6f 93       	push	r22
    28e4:	ff 93       	push	r31
    28e6:	ef 93       	push	r30
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	ba de       	rcall	.-652    	; 0x2662 <__mulsf3>
    28ee:	ef 91       	pop	r30
    28f0:	ff 91       	pop	r31
    28f2:	11 de       	rcall	.-990    	; 0x2516 <__fp_powser>
    28f4:	2f 91       	pop	r18
    28f6:	3f 91       	pop	r19
    28f8:	4f 91       	pop	r20
    28fa:	5f 91       	pop	r21
    28fc:	b2 ce       	rjmp	.-668    	; 0x2662 <__mulsf3>

000028fe <inverse>:
    28fe:	9b 01       	movw	r18, r22
    2900:	ac 01       	movw	r20, r24
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	80 e8       	ldi	r24, 0x80	; 128
    2908:	9f e3       	ldi	r25, 0x3F	; 63
    290a:	0b cd       	rjmp	.-1514   	; 0x2322 <__divsf3>
    290c:	fb cd       	rjmp	.-1034   	; 0x2504 <__fp_inf>
    290e:	d1 cf       	rjmp	.-94     	; 0x28b2 <__fp_mpack>

00002910 <ldexp>:
    2910:	87 de       	rcall	.-754    	; 0x2620 <__fp_splitA>
    2912:	e8 f3       	brcs	.-6      	; 0x290e <inverse+0x10>
    2914:	99 23       	and	r25, r25
    2916:	d9 f3       	breq	.-10     	; 0x290e <inverse+0x10>
    2918:	94 0f       	add	r25, r20
    291a:	51 1d       	adc	r21, r1
    291c:	bb f3       	brvs	.-18     	; 0x290c <inverse+0xe>
    291e:	91 50       	subi	r25, 0x01	; 1
    2920:	50 40       	sbci	r21, 0x00	; 0
    2922:	94 f0       	brlt	.+36     	; 0x2948 <ldexp+0x38>
    2924:	59 f0       	breq	.+22     	; 0x293c <ldexp+0x2c>
    2926:	88 23       	and	r24, r24
    2928:	32 f0       	brmi	.+12     	; 0x2936 <ldexp+0x26>
    292a:	66 0f       	add	r22, r22
    292c:	77 1f       	adc	r23, r23
    292e:	88 1f       	adc	r24, r24
    2930:	91 50       	subi	r25, 0x01	; 1
    2932:	50 40       	sbci	r21, 0x00	; 0
    2934:	c1 f7       	brne	.-16     	; 0x2926 <ldexp+0x16>
    2936:	9e 3f       	cpi	r25, 0xFE	; 254
    2938:	51 05       	cpc	r21, r1
    293a:	44 f7       	brge	.-48     	; 0x290c <inverse+0xe>
    293c:	88 0f       	add	r24, r24
    293e:	91 1d       	adc	r25, r1
    2940:	96 95       	lsr	r25
    2942:	87 95       	ror	r24
    2944:	97 f9       	bld	r25, 7
    2946:	08 95       	ret
    2948:	5f 3f       	cpi	r21, 0xFF	; 255
    294a:	ac f0       	brlt	.+42     	; 0x2976 <ldexp+0x66>
    294c:	98 3e       	cpi	r25, 0xE8	; 232
    294e:	9c f0       	brlt	.+38     	; 0x2976 <ldexp+0x66>
    2950:	bb 27       	eor	r27, r27
    2952:	86 95       	lsr	r24
    2954:	77 95       	ror	r23
    2956:	67 95       	ror	r22
    2958:	b7 95       	ror	r27
    295a:	08 f4       	brcc	.+2      	; 0x295e <ldexp+0x4e>
    295c:	b1 60       	ori	r27, 0x01	; 1
    295e:	93 95       	inc	r25
    2960:	c1 f7       	brne	.-16     	; 0x2952 <ldexp+0x42>
    2962:	bb 0f       	add	r27, r27
    2964:	58 f7       	brcc	.-42     	; 0x293c <ldexp+0x2c>
    2966:	11 f4       	brne	.+4      	; 0x296c <ldexp+0x5c>
    2968:	60 ff       	sbrs	r22, 0
    296a:	e8 cf       	rjmp	.-48     	; 0x293c <ldexp+0x2c>
    296c:	6f 5f       	subi	r22, 0xFF	; 255
    296e:	7f 4f       	sbci	r23, 0xFF	; 255
    2970:	8f 4f       	sbci	r24, 0xFF	; 255
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	e3 cf       	rjmp	.-58     	; 0x293c <ldexp+0x2c>
    2976:	6f ce       	rjmp	.-802    	; 0x2656 <__fp_szero>
    2978:	0e f0       	brts	.+2      	; 0x297c <ldexp+0x6c>
    297a:	9b cf       	rjmp	.-202    	; 0x28b2 <__fp_mpack>
    297c:	c9 cd       	rjmp	.-1134   	; 0x2510 <__fp_nan>
    297e:	68 94       	set
    2980:	c1 cd       	rjmp	.-1150   	; 0x2504 <__fp_inf>

00002982 <log>:
    2982:	4e de       	rcall	.-868    	; 0x2620 <__fp_splitA>
    2984:	c8 f3       	brcs	.-14     	; 0x2978 <ldexp+0x68>
    2986:	99 23       	and	r25, r25
    2988:	d1 f3       	breq	.-12     	; 0x297e <ldexp+0x6e>
    298a:	c6 f3       	brts	.-16     	; 0x297c <ldexp+0x6c>
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	1f 93       	push	r17
    2992:	0f 93       	push	r16
    2994:	ff 92       	push	r15
    2996:	c9 2f       	mov	r28, r25
    2998:	dd 27       	eor	r29, r29
    299a:	88 23       	and	r24, r24
    299c:	2a f0       	brmi	.+10     	; 0x29a8 <log+0x26>
    299e:	21 97       	sbiw	r28, 0x01	; 1
    29a0:	66 0f       	add	r22, r22
    29a2:	77 1f       	adc	r23, r23
    29a4:	88 1f       	adc	r24, r24
    29a6:	da f7       	brpl	.-10     	; 0x299e <log+0x1c>
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f eb       	ldi	r21, 0xBF	; 191
    29b0:	9f e3       	ldi	r25, 0x3F	; 63
    29b2:	88 39       	cpi	r24, 0x98	; 152
    29b4:	20 f0       	brcs	.+8      	; 0x29be <log+0x3c>
    29b6:	80 3e       	cpi	r24, 0xE0	; 224
    29b8:	30 f0       	brcs	.+12     	; 0x29c6 <log+0x44>
    29ba:	21 96       	adiw	r28, 0x01	; 1
    29bc:	8f 77       	andi	r24, 0x7F	; 127
    29be:	4a dc       	rcall	.-1900   	; 0x2254 <__addsf3>
    29c0:	e4 e4       	ldi	r30, 0x44	; 68
    29c2:	f1 e0       	ldi	r31, 0x01	; 1
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <log+0x4a>
    29c6:	46 dc       	rcall	.-1908   	; 0x2254 <__addsf3>
    29c8:	e1 e7       	ldi	r30, 0x71	; 113
    29ca:	f1 e0       	ldi	r31, 0x01	; 1
    29cc:	a4 dd       	rcall	.-1208   	; 0x2516 <__fp_powser>
    29ce:	8b 01       	movw	r16, r22
    29d0:	be 01       	movw	r22, r28
    29d2:	ec 01       	movw	r28, r24
    29d4:	fb 2e       	mov	r15, r27
    29d6:	6f 57       	subi	r22, 0x7F	; 127
    29d8:	71 09       	sbc	r23, r1
    29da:	75 95       	asr	r23
    29dc:	77 1f       	adc	r23, r23
    29de:	88 0b       	sbc	r24, r24
    29e0:	99 0b       	sbc	r25, r25
    29e2:	3a dd       	rcall	.-1420   	; 0x2458 <__floatsisf>
    29e4:	28 e1       	ldi	r18, 0x18	; 24
    29e6:	32 e7       	ldi	r19, 0x72	; 114
    29e8:	41 e3       	ldi	r20, 0x31	; 49
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	46 de       	rcall	.-884    	; 0x267a <__mulsf3x>
    29ee:	af 2d       	mov	r26, r15
    29f0:	98 01       	movw	r18, r16
    29f2:	ae 01       	movw	r20, r28
    29f4:	ff 90       	pop	r15
    29f6:	0f 91       	pop	r16
    29f8:	1f 91       	pop	r17
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	3b dc       	rcall	.-1930   	; 0x2276 <__addsf3x>
    2a00:	e5 cd       	rjmp	.-1078   	; 0x25cc <__fp_round>

00002a02 <modf>:
    2a02:	fa 01       	movw	r30, r20
    2a04:	dc 01       	movw	r26, r24
    2a06:	aa 0f       	add	r26, r26
    2a08:	bb 1f       	adc	r27, r27
    2a0a:	9b 01       	movw	r18, r22
    2a0c:	ac 01       	movw	r20, r24
    2a0e:	bf 57       	subi	r27, 0x7F	; 127
    2a10:	28 f4       	brcc	.+10     	; 0x2a1c <modf+0x1a>
    2a12:	22 27       	eor	r18, r18
    2a14:	33 27       	eor	r19, r19
    2a16:	44 27       	eor	r20, r20
    2a18:	50 78       	andi	r21, 0x80	; 128
    2a1a:	1f c0       	rjmp	.+62     	; 0x2a5a <modf+0x58>
    2a1c:	b7 51       	subi	r27, 0x17	; 23
    2a1e:	88 f4       	brcc	.+34     	; 0x2a42 <modf+0x40>
    2a20:	ab 2f       	mov	r26, r27
    2a22:	00 24       	eor	r0, r0
    2a24:	46 95       	lsr	r20
    2a26:	37 95       	ror	r19
    2a28:	27 95       	ror	r18
    2a2a:	01 1c       	adc	r0, r1
    2a2c:	a3 95       	inc	r26
    2a2e:	d2 f3       	brmi	.-12     	; 0x2a24 <modf+0x22>
    2a30:	00 20       	and	r0, r0
    2a32:	69 f0       	breq	.+26     	; 0x2a4e <modf+0x4c>
    2a34:	22 0f       	add	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	44 1f       	adc	r20, r20
    2a3a:	b3 95       	inc	r27
    2a3c:	da f3       	brmi	.-10     	; 0x2a34 <modf+0x32>
    2a3e:	0d d0       	rcall	.+26     	; 0x2a5a <modf+0x58>
    2a40:	08 cc       	rjmp	.-2032   	; 0x2252 <__subsf3>
    2a42:	61 30       	cpi	r22, 0x01	; 1
    2a44:	71 05       	cpc	r23, r1
    2a46:	a0 e8       	ldi	r26, 0x80	; 128
    2a48:	8a 07       	cpc	r24, r26
    2a4a:	b9 46       	sbci	r27, 0x69	; 105
    2a4c:	30 f4       	brcc	.+12     	; 0x2a5a <modf+0x58>
    2a4e:	9b 01       	movw	r18, r22
    2a50:	ac 01       	movw	r20, r24
    2a52:	66 27       	eor	r22, r22
    2a54:	77 27       	eor	r23, r23
    2a56:	88 27       	eor	r24, r24
    2a58:	90 78       	andi	r25, 0x80	; 128
    2a5a:	30 96       	adiw	r30, 0x00	; 0
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <modf+0x64>
    2a5e:	20 83       	st	Z, r18
    2a60:	31 83       	std	Z+1, r19	; 0x01
    2a62:	42 83       	std	Z+2, r20	; 0x02
    2a64:	53 83       	std	Z+3, r21	; 0x03
    2a66:	08 95       	ret

00002a68 <__divmodhi4>:
    2a68:	97 fb       	bst	r25, 7
    2a6a:	07 2e       	mov	r0, r23
    2a6c:	16 f4       	brtc	.+4      	; 0x2a72 <__divmodhi4+0xa>
    2a6e:	00 94       	com	r0
    2a70:	06 d0       	rcall	.+12     	; 0x2a7e <__divmodhi4_neg1>
    2a72:	77 fd       	sbrc	r23, 7
    2a74:	08 d0       	rcall	.+16     	; 0x2a86 <__divmodhi4_neg2>
    2a76:	20 d0       	rcall	.+64     	; 0x2ab8 <__udivmodhi4>
    2a78:	07 fc       	sbrc	r0, 7
    2a7a:	05 d0       	rcall	.+10     	; 0x2a86 <__divmodhi4_neg2>
    2a7c:	3e f4       	brtc	.+14     	; 0x2a8c <__divmodhi4_exit>

00002a7e <__divmodhi4_neg1>:
    2a7e:	90 95       	com	r25
    2a80:	81 95       	neg	r24
    2a82:	9f 4f       	sbci	r25, 0xFF	; 255
    2a84:	08 95       	ret

00002a86 <__divmodhi4_neg2>:
    2a86:	70 95       	com	r23
    2a88:	61 95       	neg	r22
    2a8a:	7f 4f       	sbci	r23, 0xFF	; 255

00002a8c <__divmodhi4_exit>:
    2a8c:	08 95       	ret

00002a8e <__tablejump2__>:
    2a8e:	ee 0f       	add	r30, r30
    2a90:	ff 1f       	adc	r31, r31

00002a92 <__tablejump__>:
    2a92:	05 90       	lpm	r0, Z+
    2a94:	f4 91       	lpm	r31, Z
    2a96:	e0 2d       	mov	r30, r0
    2a98:	09 94       	ijmp

00002a9a <__umulhisi3>:
    2a9a:	a2 9f       	mul	r26, r18
    2a9c:	b0 01       	movw	r22, r0
    2a9e:	b3 9f       	mul	r27, r19
    2aa0:	c0 01       	movw	r24, r0
    2aa2:	a3 9f       	mul	r26, r19
    2aa4:	70 0d       	add	r23, r0
    2aa6:	81 1d       	adc	r24, r1
    2aa8:	11 24       	eor	r1, r1
    2aaa:	91 1d       	adc	r25, r1
    2aac:	b2 9f       	mul	r27, r18
    2aae:	70 0d       	add	r23, r0
    2ab0:	81 1d       	adc	r24, r1
    2ab2:	11 24       	eor	r1, r1
    2ab4:	91 1d       	adc	r25, r1
    2ab6:	08 95       	ret

00002ab8 <__udivmodhi4>:
    2ab8:	aa 1b       	sub	r26, r26
    2aba:	bb 1b       	sub	r27, r27
    2abc:	51 e1       	ldi	r21, 0x11	; 17
    2abe:	07 c0       	rjmp	.+14     	; 0x2ace <__udivmodhi4_ep>

00002ac0 <__udivmodhi4_loop>:
    2ac0:	aa 1f       	adc	r26, r26
    2ac2:	bb 1f       	adc	r27, r27
    2ac4:	a6 17       	cp	r26, r22
    2ac6:	b7 07       	cpc	r27, r23
    2ac8:	10 f0       	brcs	.+4      	; 0x2ace <__udivmodhi4_ep>
    2aca:	a6 1b       	sub	r26, r22
    2acc:	b7 0b       	sbc	r27, r23

00002ace <__udivmodhi4_ep>:
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	5a 95       	dec	r21
    2ad4:	a9 f7       	brne	.-22     	; 0x2ac0 <__udivmodhi4_loop>
    2ad6:	80 95       	com	r24
    2ad8:	90 95       	com	r25
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	08 95       	ret

00002ae0 <calloc>:
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	86 9f       	mul	r24, r22
    2aea:	80 01       	movw	r16, r0
    2aec:	87 9f       	mul	r24, r23
    2aee:	10 0d       	add	r17, r0
    2af0:	96 9f       	mul	r25, r22
    2af2:	10 0d       	add	r17, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	c8 01       	movw	r24, r16
    2af8:	0d d0       	rcall	.+26     	; 0x2b14 <malloc>
    2afa:	ec 01       	movw	r28, r24
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	21 f0       	breq	.+8      	; 0x2b08 <calloc+0x28>
    2b00:	a8 01       	movw	r20, r16
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	a1 d1       	rcall	.+834    	; 0x2e4a <memset>
    2b08:	ce 01       	movw	r24, r28
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	08 95       	ret

00002b14 <malloc>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	82 30       	cpi	r24, 0x02	; 2
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	10 f4       	brcc	.+4      	; 0x2b22 <malloc+0xe>
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	e0 91 1e 09 	lds	r30, 0x091E
    2b26:	f0 91 1f 09 	lds	r31, 0x091F
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	30 97       	sbiw	r30, 0x00	; 0
    2b34:	39 f1       	breq	.+78     	; 0x2b84 <malloc+0x70>
    2b36:	40 81       	ld	r20, Z
    2b38:	51 81       	ldd	r21, Z+1	; 0x01
    2b3a:	48 17       	cp	r20, r24
    2b3c:	59 07       	cpc	r21, r25
    2b3e:	b8 f0       	brcs	.+46     	; 0x2b6e <malloc+0x5a>
    2b40:	48 17       	cp	r20, r24
    2b42:	59 07       	cpc	r21, r25
    2b44:	71 f4       	brne	.+28     	; 0x2b62 <malloc+0x4e>
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	10 97       	sbiw	r26, 0x00	; 0
    2b4c:	29 f0       	breq	.+10     	; 0x2b58 <malloc+0x44>
    2b4e:	13 96       	adiw	r26, 0x03	; 3
    2b50:	9c 93       	st	X, r25
    2b52:	8e 93       	st	-X, r24
    2b54:	12 97       	sbiw	r26, 0x02	; 2
    2b56:	2c c0       	rjmp	.+88     	; 0x2bb0 <malloc+0x9c>
    2b58:	90 93 1f 09 	sts	0x091F, r25
    2b5c:	80 93 1e 09 	sts	0x091E, r24
    2b60:	27 c0       	rjmp	.+78     	; 0x2bb0 <malloc+0x9c>
    2b62:	21 15       	cp	r18, r1
    2b64:	31 05       	cpc	r19, r1
    2b66:	31 f0       	breq	.+12     	; 0x2b74 <malloc+0x60>
    2b68:	42 17       	cp	r20, r18
    2b6a:	53 07       	cpc	r21, r19
    2b6c:	18 f0       	brcs	.+6      	; 0x2b74 <malloc+0x60>
    2b6e:	a9 01       	movw	r20, r18
    2b70:	db 01       	movw	r26, r22
    2b72:	01 c0       	rjmp	.+2      	; 0x2b76 <malloc+0x62>
    2b74:	ef 01       	movw	r28, r30
    2b76:	9a 01       	movw	r18, r20
    2b78:	bd 01       	movw	r22, r26
    2b7a:	df 01       	movw	r26, r30
    2b7c:	02 80       	ldd	r0, Z+2	; 0x02
    2b7e:	f3 81       	ldd	r31, Z+3	; 0x03
    2b80:	e0 2d       	mov	r30, r0
    2b82:	d7 cf       	rjmp	.-82     	; 0x2b32 <malloc+0x1e>
    2b84:	21 15       	cp	r18, r1
    2b86:	31 05       	cpc	r19, r1
    2b88:	f9 f0       	breq	.+62     	; 0x2bc8 <malloc+0xb4>
    2b8a:	28 1b       	sub	r18, r24
    2b8c:	39 0b       	sbc	r19, r25
    2b8e:	24 30       	cpi	r18, 0x04	; 4
    2b90:	31 05       	cpc	r19, r1
    2b92:	80 f4       	brcc	.+32     	; 0x2bb4 <malloc+0xa0>
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	61 15       	cp	r22, r1
    2b9a:	71 05       	cpc	r23, r1
    2b9c:	21 f0       	breq	.+8      	; 0x2ba6 <malloc+0x92>
    2b9e:	fb 01       	movw	r30, r22
    2ba0:	93 83       	std	Z+3, r25	; 0x03
    2ba2:	82 83       	std	Z+2, r24	; 0x02
    2ba4:	04 c0       	rjmp	.+8      	; 0x2bae <malloc+0x9a>
    2ba6:	90 93 1f 09 	sts	0x091F, r25
    2baa:	80 93 1e 09 	sts	0x091E, r24
    2bae:	fe 01       	movw	r30, r28
    2bb0:	32 96       	adiw	r30, 0x02	; 2
    2bb2:	44 c0       	rjmp	.+136    	; 0x2c3c <malloc+0x128>
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e2 0f       	add	r30, r18
    2bb8:	f3 1f       	adc	r31, r19
    2bba:	81 93       	st	Z+, r24
    2bbc:	91 93       	st	Z+, r25
    2bbe:	22 50       	subi	r18, 0x02	; 2
    2bc0:	31 09       	sbc	r19, r1
    2bc2:	39 83       	std	Y+1, r19	; 0x01
    2bc4:	28 83       	st	Y, r18
    2bc6:	3a c0       	rjmp	.+116    	; 0x2c3c <malloc+0x128>
    2bc8:	20 91 1c 09 	lds	r18, 0x091C
    2bcc:	30 91 1d 09 	lds	r19, 0x091D
    2bd0:	23 2b       	or	r18, r19
    2bd2:	41 f4       	brne	.+16     	; 0x2be4 <malloc+0xd0>
    2bd4:	20 91 02 01 	lds	r18, 0x0102
    2bd8:	30 91 03 01 	lds	r19, 0x0103
    2bdc:	30 93 1d 09 	sts	0x091D, r19
    2be0:	20 93 1c 09 	sts	0x091C, r18
    2be4:	20 91 00 01 	lds	r18, 0x0100
    2be8:	30 91 01 01 	lds	r19, 0x0101
    2bec:	21 15       	cp	r18, r1
    2bee:	31 05       	cpc	r19, r1
    2bf0:	41 f4       	brne	.+16     	; 0x2c02 <malloc+0xee>
    2bf2:	2d b7       	in	r18, 0x3d	; 61
    2bf4:	3e b7       	in	r19, 0x3e	; 62
    2bf6:	40 91 04 01 	lds	r20, 0x0104
    2bfa:	50 91 05 01 	lds	r21, 0x0105
    2bfe:	24 1b       	sub	r18, r20
    2c00:	35 0b       	sbc	r19, r21
    2c02:	e0 91 1c 09 	lds	r30, 0x091C
    2c06:	f0 91 1d 09 	lds	r31, 0x091D
    2c0a:	e2 17       	cp	r30, r18
    2c0c:	f3 07       	cpc	r31, r19
    2c0e:	a0 f4       	brcc	.+40     	; 0x2c38 <malloc+0x124>
    2c10:	2e 1b       	sub	r18, r30
    2c12:	3f 0b       	sbc	r19, r31
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	78 f0       	brcs	.+30     	; 0x2c38 <malloc+0x124>
    2c1a:	ac 01       	movw	r20, r24
    2c1c:	4e 5f       	subi	r20, 0xFE	; 254
    2c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c20:	24 17       	cp	r18, r20
    2c22:	35 07       	cpc	r19, r21
    2c24:	48 f0       	brcs	.+18     	; 0x2c38 <malloc+0x124>
    2c26:	4e 0f       	add	r20, r30
    2c28:	5f 1f       	adc	r21, r31
    2c2a:	50 93 1d 09 	sts	0x091D, r21
    2c2e:	40 93 1c 09 	sts	0x091C, r20
    2c32:	81 93       	st	Z+, r24
    2c34:	91 93       	st	Z+, r25
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <malloc+0x128>
    2c38:	e0 e0       	ldi	r30, 0x00	; 0
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	cf 01       	movw	r24, r30
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	08 95       	ret

00002c44 <free>:
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <free+0xa>
    2c4c:	87 c0       	rjmp	.+270    	; 0x2d5c <free+0x118>
    2c4e:	fc 01       	movw	r30, r24
    2c50:	32 97       	sbiw	r30, 0x02	; 2
    2c52:	13 82       	std	Z+3, r1	; 0x03
    2c54:	12 82       	std	Z+2, r1	; 0x02
    2c56:	c0 91 1e 09 	lds	r28, 0x091E
    2c5a:	d0 91 1f 09 	lds	r29, 0x091F
    2c5e:	20 97       	sbiw	r28, 0x00	; 0
    2c60:	81 f4       	brne	.+32     	; 0x2c82 <free+0x3e>
    2c62:	20 81       	ld	r18, Z
    2c64:	31 81       	ldd	r19, Z+1	; 0x01
    2c66:	28 0f       	add	r18, r24
    2c68:	39 1f       	adc	r19, r25
    2c6a:	80 91 1c 09 	lds	r24, 0x091C
    2c6e:	90 91 1d 09 	lds	r25, 0x091D
    2c72:	82 17       	cp	r24, r18
    2c74:	93 07       	cpc	r25, r19
    2c76:	79 f5       	brne	.+94     	; 0x2cd6 <free+0x92>
    2c78:	f0 93 1d 09 	sts	0x091D, r31
    2c7c:	e0 93 1c 09 	sts	0x091C, r30
    2c80:	6d c0       	rjmp	.+218    	; 0x2d5c <free+0x118>
    2c82:	de 01       	movw	r26, r28
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	ae 17       	cp	r26, r30
    2c8a:	bf 07       	cpc	r27, r31
    2c8c:	50 f4       	brcc	.+20     	; 0x2ca2 <free+0x5e>
    2c8e:	12 96       	adiw	r26, 0x02	; 2
    2c90:	4d 91       	ld	r20, X+
    2c92:	5c 91       	ld	r21, X
    2c94:	13 97       	sbiw	r26, 0x03	; 3
    2c96:	9d 01       	movw	r18, r26
    2c98:	41 15       	cp	r20, r1
    2c9a:	51 05       	cpc	r21, r1
    2c9c:	09 f1       	breq	.+66     	; 0x2ce0 <free+0x9c>
    2c9e:	da 01       	movw	r26, r20
    2ca0:	f3 cf       	rjmp	.-26     	; 0x2c88 <free+0x44>
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
    2ca4:	a2 83       	std	Z+2, r26	; 0x02
    2ca6:	40 81       	ld	r20, Z
    2ca8:	51 81       	ldd	r21, Z+1	; 0x01
    2caa:	84 0f       	add	r24, r20
    2cac:	95 1f       	adc	r25, r21
    2cae:	8a 17       	cp	r24, r26
    2cb0:	9b 07       	cpc	r25, r27
    2cb2:	71 f4       	brne	.+28     	; 0x2cd0 <free+0x8c>
    2cb4:	8d 91       	ld	r24, X+
    2cb6:	9c 91       	ld	r25, X
    2cb8:	11 97       	sbiw	r26, 0x01	; 1
    2cba:	84 0f       	add	r24, r20
    2cbc:	95 1f       	adc	r25, r21
    2cbe:	02 96       	adiw	r24, 0x02	; 2
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	12 96       	adiw	r26, 0x02	; 2
    2cc6:	8d 91       	ld	r24, X+
    2cc8:	9c 91       	ld	r25, X
    2cca:	13 97       	sbiw	r26, 0x03	; 3
    2ccc:	93 83       	std	Z+3, r25	; 0x03
    2cce:	82 83       	std	Z+2, r24	; 0x02
    2cd0:	21 15       	cp	r18, r1
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	29 f4       	brne	.+10     	; 0x2ce0 <free+0x9c>
    2cd6:	f0 93 1f 09 	sts	0x091F, r31
    2cda:	e0 93 1e 09 	sts	0x091E, r30
    2cde:	3e c0       	rjmp	.+124    	; 0x2d5c <free+0x118>
    2ce0:	d9 01       	movw	r26, r18
    2ce2:	13 96       	adiw	r26, 0x03	; 3
    2ce4:	fc 93       	st	X, r31
    2ce6:	ee 93       	st	-X, r30
    2ce8:	12 97       	sbiw	r26, 0x02	; 2
    2cea:	4d 91       	ld	r20, X+
    2cec:	5d 91       	ld	r21, X+
    2cee:	a4 0f       	add	r26, r20
    2cf0:	b5 1f       	adc	r27, r21
    2cf2:	ea 17       	cp	r30, r26
    2cf4:	fb 07       	cpc	r31, r27
    2cf6:	79 f4       	brne	.+30     	; 0x2d16 <free+0xd2>
    2cf8:	80 81       	ld	r24, Z
    2cfa:	91 81       	ldd	r25, Z+1	; 0x01
    2cfc:	84 0f       	add	r24, r20
    2cfe:	95 1f       	adc	r25, r21
    2d00:	02 96       	adiw	r24, 0x02	; 2
    2d02:	d9 01       	movw	r26, r18
    2d04:	11 96       	adiw	r26, 0x01	; 1
    2d06:	9c 93       	st	X, r25
    2d08:	8e 93       	st	-X, r24
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	13 96       	adiw	r26, 0x03	; 3
    2d10:	9c 93       	st	X, r25
    2d12:	8e 93       	st	-X, r24
    2d14:	12 97       	sbiw	r26, 0x02	; 2
    2d16:	e0 e0       	ldi	r30, 0x00	; 0
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	19 f0       	breq	.+6      	; 0x2d28 <free+0xe4>
    2d22:	fe 01       	movw	r30, r28
    2d24:	ec 01       	movw	r28, r24
    2d26:	f9 cf       	rjmp	.-14     	; 0x2d1a <free+0xd6>
    2d28:	ce 01       	movw	r24, r28
    2d2a:	02 96       	adiw	r24, 0x02	; 2
    2d2c:	28 81       	ld	r18, Y
    2d2e:	39 81       	ldd	r19, Y+1	; 0x01
    2d30:	82 0f       	add	r24, r18
    2d32:	93 1f       	adc	r25, r19
    2d34:	20 91 1c 09 	lds	r18, 0x091C
    2d38:	30 91 1d 09 	lds	r19, 0x091D
    2d3c:	28 17       	cp	r18, r24
    2d3e:	39 07       	cpc	r19, r25
    2d40:	69 f4       	brne	.+26     	; 0x2d5c <free+0x118>
    2d42:	30 97       	sbiw	r30, 0x00	; 0
    2d44:	29 f4       	brne	.+10     	; 0x2d50 <free+0x10c>
    2d46:	10 92 1f 09 	sts	0x091F, r1
    2d4a:	10 92 1e 09 	sts	0x091E, r1
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <free+0x110>
    2d50:	13 82       	std	Z+3, r1	; 0x03
    2d52:	12 82       	std	Z+2, r1	; 0x02
    2d54:	d0 93 1d 09 	sts	0x091D, r29
    2d58:	c0 93 1c 09 	sts	0x091C, r28
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <do_rand>:
    2d62:	8f 92       	push	r8
    2d64:	9f 92       	push	r9
    2d66:	af 92       	push	r10
    2d68:	bf 92       	push	r11
    2d6a:	cf 92       	push	r12
    2d6c:	df 92       	push	r13
    2d6e:	ef 92       	push	r14
    2d70:	ff 92       	push	r15
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	ec 01       	movw	r28, r24
    2d78:	68 81       	ld	r22, Y
    2d7a:	79 81       	ldd	r23, Y+1	; 0x01
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d80:	61 15       	cp	r22, r1
    2d82:	71 05       	cpc	r23, r1
    2d84:	81 05       	cpc	r24, r1
    2d86:	91 05       	cpc	r25, r1
    2d88:	21 f4       	brne	.+8      	; 0x2d92 <do_rand+0x30>
    2d8a:	64 e2       	ldi	r22, 0x24	; 36
    2d8c:	79 ed       	ldi	r23, 0xD9	; 217
    2d8e:	8b e5       	ldi	r24, 0x5B	; 91
    2d90:	97 e0       	ldi	r25, 0x07	; 7
    2d92:	2d e1       	ldi	r18, 0x1D	; 29
    2d94:	33 ef       	ldi	r19, 0xF3	; 243
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	50 e0       	ldi	r21, 0x00	; 0
    2d9a:	7f d3       	rcall	.+1790   	; 0x349a <__divmodsi4>
    2d9c:	49 01       	movw	r8, r18
    2d9e:	5a 01       	movw	r10, r20
    2da0:	9b 01       	movw	r18, r22
    2da2:	ac 01       	movw	r20, r24
    2da4:	a7 ea       	ldi	r26, 0xA7	; 167
    2da6:	b1 e4       	ldi	r27, 0x41	; 65
    2da8:	94 d3       	rcall	.+1832   	; 0x34d2 <__muluhisi3>
    2daa:	6b 01       	movw	r12, r22
    2dac:	7c 01       	movw	r14, r24
    2dae:	ac ee       	ldi	r26, 0xEC	; 236
    2db0:	b4 ef       	ldi	r27, 0xF4	; 244
    2db2:	a5 01       	movw	r20, r10
    2db4:	94 01       	movw	r18, r8
    2db6:	99 d3       	rcall	.+1842   	; 0x34ea <__mulohisi3>
    2db8:	c6 0e       	add	r12, r22
    2dba:	d7 1e       	adc	r13, r23
    2dbc:	e8 1e       	adc	r14, r24
    2dbe:	f9 1e       	adc	r15, r25
    2dc0:	f7 fe       	sbrs	r15, 7
    2dc2:	06 c0       	rjmp	.+12     	; 0x2dd0 <do_rand+0x6e>
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	c8 1a       	sub	r12, r24
    2dc8:	d1 08       	sbc	r13, r1
    2dca:	e1 08       	sbc	r14, r1
    2dcc:	80 e8       	ldi	r24, 0x80	; 128
    2dce:	f8 0a       	sbc	r15, r24
    2dd0:	c8 82       	st	Y, r12
    2dd2:	d9 82       	std	Y+1, r13	; 0x01
    2dd4:	ea 82       	std	Y+2, r14	; 0x02
    2dd6:	fb 82       	std	Y+3, r15	; 0x03
    2dd8:	c6 01       	movw	r24, r12
    2dda:	9f 77       	andi	r25, 0x7F	; 127
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	df 90       	pop	r13
    2de6:	cf 90       	pop	r12
    2de8:	bf 90       	pop	r11
    2dea:	af 90       	pop	r10
    2dec:	9f 90       	pop	r9
    2dee:	8f 90       	pop	r8
    2df0:	08 95       	ret

00002df2 <rand_r>:
    2df2:	b7 cf       	rjmp	.-146    	; 0x2d62 <do_rand>

00002df4 <rand>:
    2df4:	86 e0       	ldi	r24, 0x06	; 6
    2df6:	91 e0       	ldi	r25, 0x01	; 1
    2df8:	b4 cf       	rjmp	.-152    	; 0x2d62 <do_rand>

00002dfa <srand>:
    2dfa:	a0 e0       	ldi	r26, 0x00	; 0
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	80 93 06 01 	sts	0x0106, r24
    2e02:	90 93 07 01 	sts	0x0107, r25
    2e06:	a0 93 08 01 	sts	0x0108, r26
    2e0a:	b0 93 09 01 	sts	0x0109, r27
    2e0e:	08 95       	ret

00002e10 <atoi>:
    2e10:	fc 01       	movw	r30, r24
    2e12:	88 27       	eor	r24, r24
    2e14:	99 27       	eor	r25, r25
    2e16:	e8 94       	clt
    2e18:	21 91       	ld	r18, Z+
    2e1a:	20 32       	cpi	r18, 0x20	; 32
    2e1c:	e9 f3       	breq	.-6      	; 0x2e18 <atoi+0x8>
    2e1e:	29 30       	cpi	r18, 0x09	; 9
    2e20:	10 f0       	brcs	.+4      	; 0x2e26 <atoi+0x16>
    2e22:	2e 30       	cpi	r18, 0x0E	; 14
    2e24:	c8 f3       	brcs	.-14     	; 0x2e18 <atoi+0x8>
    2e26:	2b 32       	cpi	r18, 0x2B	; 43
    2e28:	39 f0       	breq	.+14     	; 0x2e38 <atoi+0x28>
    2e2a:	2d 32       	cpi	r18, 0x2D	; 45
    2e2c:	31 f4       	brne	.+12     	; 0x2e3a <atoi+0x2a>
    2e2e:	68 94       	set
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <atoi+0x28>
    2e32:	31 d0       	rcall	.+98     	; 0x2e96 <__mulhi_const_10>
    2e34:	82 0f       	add	r24, r18
    2e36:	91 1d       	adc	r25, r1
    2e38:	21 91       	ld	r18, Z+
    2e3a:	20 53       	subi	r18, 0x30	; 48
    2e3c:	2a 30       	cpi	r18, 0x0A	; 10
    2e3e:	c8 f3       	brcs	.-14     	; 0x2e32 <atoi+0x22>
    2e40:	1e f4       	brtc	.+6      	; 0x2e48 <atoi+0x38>
    2e42:	90 95       	com	r25
    2e44:	81 95       	neg	r24
    2e46:	9f 4f       	sbci	r25, 0xFF	; 255
    2e48:	08 95       	ret

00002e4a <memset>:
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <memset+0x6>
    2e4e:	6d 93       	st	X+, r22
    2e50:	41 50       	subi	r20, 0x01	; 1
    2e52:	50 40       	sbci	r21, 0x00	; 0
    2e54:	e0 f7       	brcc	.-8      	; 0x2e4e <memset+0x4>
    2e56:	08 95       	ret

00002e58 <strcmp>:
    2e58:	fb 01       	movw	r30, r22
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	8d 91       	ld	r24, X+
    2e5e:	01 90       	ld	r0, Z+
    2e60:	80 19       	sub	r24, r0
    2e62:	01 10       	cpse	r0, r1
    2e64:	d9 f3       	breq	.-10     	; 0x2e5c <strcmp+0x4>
    2e66:	99 0b       	sbc	r25, r25
    2e68:	08 95       	ret

00002e6a <strcpy>:
    2e6a:	fb 01       	movw	r30, r22
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	01 90       	ld	r0, Z+
    2e70:	0d 92       	st	X+, r0
    2e72:	00 20       	and	r0, r0
    2e74:	e1 f7       	brne	.-8      	; 0x2e6e <strcpy+0x4>
    2e76:	08 95       	ret

00002e78 <strncpy>:
    2e78:	fb 01       	movw	r30, r22
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	41 50       	subi	r20, 0x01	; 1
    2e7e:	50 40       	sbci	r21, 0x00	; 0
    2e80:	48 f0       	brcs	.+18     	; 0x2e94 <strncpy+0x1c>
    2e82:	01 90       	ld	r0, Z+
    2e84:	0d 92       	st	X+, r0
    2e86:	00 20       	and	r0, r0
    2e88:	c9 f7       	brne	.-14     	; 0x2e7c <strncpy+0x4>
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <strncpy+0x16>
    2e8c:	1d 92       	st	X+, r1
    2e8e:	41 50       	subi	r20, 0x01	; 1
    2e90:	50 40       	sbci	r21, 0x00	; 0
    2e92:	e0 f7       	brcc	.-8      	; 0x2e8c <strncpy+0x14>
    2e94:	08 95       	ret

00002e96 <__mulhi_const_10>:
    2e96:	7a e0       	ldi	r23, 0x0A	; 10
    2e98:	97 9f       	mul	r25, r23
    2e9a:	90 2d       	mov	r25, r0
    2e9c:	87 9f       	mul	r24, r23
    2e9e:	80 2d       	mov	r24, r0
    2ea0:	91 0d       	add	r25, r1
    2ea2:	11 24       	eor	r1, r1
    2ea4:	08 95       	ret

00002ea6 <sprintf>:
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	2e 97       	sbiw	r28, 0x0e	; 14
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	0d 89       	ldd	r16, Y+21	; 0x15
    2ec0:	1e 89       	ldd	r17, Y+22	; 0x16
    2ec2:	86 e0       	ldi	r24, 0x06	; 6
    2ec4:	8c 83       	std	Y+4, r24	; 0x04
    2ec6:	1a 83       	std	Y+2, r17	; 0x02
    2ec8:	09 83       	std	Y+1, r16	; 0x01
    2eca:	8f ef       	ldi	r24, 0xFF	; 255
    2ecc:	9f e7       	ldi	r25, 0x7F	; 127
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	ae 01       	movw	r20, r28
    2ed4:	47 5e       	subi	r20, 0xE7	; 231
    2ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed8:	6f 89       	ldd	r22, Y+23	; 0x17
    2eda:	78 8d       	ldd	r23, Y+24	; 0x18
    2edc:	ce 01       	movw	r24, r28
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	48 d0       	rcall	.+144    	; 0x2f72 <vfprintf>
    2ee2:	ef 81       	ldd	r30, Y+7	; 0x07
    2ee4:	f8 85       	ldd	r31, Y+8	; 0x08
    2ee6:	e0 0f       	add	r30, r16
    2ee8:	f1 1f       	adc	r31, r17
    2eea:	10 82       	st	Z, r1
    2eec:	2e 96       	adiw	r28, 0x0e	; 14
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	08 95       	ret

00002f02 <vsnprintf>:
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	8c 01       	movw	r16, r24
    2f1c:	ca 01       	movw	r24, r20
    2f1e:	46 e0       	ldi	r20, 0x06	; 6
    2f20:	4c 83       	std	Y+4, r20	; 0x04
    2f22:	1a 83       	std	Y+2, r17	; 0x02
    2f24:	09 83       	std	Y+1, r16	; 0x01
    2f26:	77 ff       	sbrs	r23, 7
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <vsnprintf+0x2c>
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	70 e8       	ldi	r23, 0x80	; 128
    2f2e:	61 50       	subi	r22, 0x01	; 1
    2f30:	71 09       	sbc	r23, r1
    2f32:	7e 83       	std	Y+6, r23	; 0x06
    2f34:	6d 83       	std	Y+5, r22	; 0x05
    2f36:	a9 01       	movw	r20, r18
    2f38:	bc 01       	movw	r22, r24
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	19 d0       	rcall	.+50     	; 0x2f72 <vfprintf>
    2f40:	4d 81       	ldd	r20, Y+5	; 0x05
    2f42:	5e 81       	ldd	r21, Y+6	; 0x06
    2f44:	57 fd       	sbrc	r21, 7
    2f46:	0a c0       	rjmp	.+20     	; 0x2f5c <vsnprintf+0x5a>
    2f48:	2f 81       	ldd	r18, Y+7	; 0x07
    2f4a:	38 85       	ldd	r19, Y+8	; 0x08
    2f4c:	42 17       	cp	r20, r18
    2f4e:	53 07       	cpc	r21, r19
    2f50:	0c f4       	brge	.+2      	; 0x2f54 <vsnprintf+0x52>
    2f52:	9a 01       	movw	r18, r20
    2f54:	f8 01       	movw	r30, r16
    2f56:	e2 0f       	add	r30, r18
    2f58:	f3 1f       	adc	r31, r19
    2f5a:	10 82       	st	Z, r1
    2f5c:	2e 96       	adiw	r28, 0x0e	; 14
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	08 95       	ret

00002f72 <vfprintf>:
    2f72:	2f 92       	push	r2
    2f74:	3f 92       	push	r3
    2f76:	4f 92       	push	r4
    2f78:	5f 92       	push	r5
    2f7a:	6f 92       	push	r6
    2f7c:	7f 92       	push	r7
    2f7e:	8f 92       	push	r8
    2f80:	9f 92       	push	r9
    2f82:	af 92       	push	r10
    2f84:	bf 92       	push	r11
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	2c 97       	sbiw	r28, 0x0c	; 12
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	7c 01       	movw	r14, r24
    2fa8:	6b 01       	movw	r12, r22
    2faa:	8a 01       	movw	r16, r20
    2fac:	fc 01       	movw	r30, r24
    2fae:	17 82       	std	Z+7, r1	; 0x07
    2fb0:	16 82       	std	Z+6, r1	; 0x06
    2fb2:	83 81       	ldd	r24, Z+3	; 0x03
    2fb4:	81 ff       	sbrs	r24, 1
    2fb6:	b0 c1       	rjmp	.+864    	; 0x3318 <vfprintf+0x3a6>
    2fb8:	ce 01       	movw	r24, r28
    2fba:	01 96       	adiw	r24, 0x01	; 1
    2fbc:	4c 01       	movw	r8, r24
    2fbe:	f7 01       	movw	r30, r14
    2fc0:	93 81       	ldd	r25, Z+3	; 0x03
    2fc2:	f6 01       	movw	r30, r12
    2fc4:	93 fd       	sbrc	r25, 3
    2fc6:	85 91       	lpm	r24, Z+
    2fc8:	93 ff       	sbrs	r25, 3
    2fca:	81 91       	ld	r24, Z+
    2fcc:	6f 01       	movw	r12, r30
    2fce:	88 23       	and	r24, r24
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <vfprintf+0x62>
    2fd2:	9e c1       	rjmp	.+828    	; 0x3310 <vfprintf+0x39e>
    2fd4:	85 32       	cpi	r24, 0x25	; 37
    2fd6:	39 f4       	brne	.+14     	; 0x2fe6 <vfprintf+0x74>
    2fd8:	93 fd       	sbrc	r25, 3
    2fda:	85 91       	lpm	r24, Z+
    2fdc:	93 ff       	sbrs	r25, 3
    2fde:	81 91       	ld	r24, Z+
    2fe0:	6f 01       	movw	r12, r30
    2fe2:	85 32       	cpi	r24, 0x25	; 37
    2fe4:	21 f4       	brne	.+8      	; 0x2fee <vfprintf+0x7c>
    2fe6:	b7 01       	movw	r22, r14
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	c7 d1       	rcall	.+910    	; 0x337a <fputc>
    2fec:	e8 cf       	rjmp	.-48     	; 0x2fbe <vfprintf+0x4c>
    2fee:	51 2c       	mov	r5, r1
    2ff0:	31 2c       	mov	r3, r1
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	20 32       	cpi	r18, 0x20	; 32
    2ff6:	a0 f4       	brcc	.+40     	; 0x3020 <vfprintf+0xae>
    2ff8:	8b 32       	cpi	r24, 0x2B	; 43
    2ffa:	69 f0       	breq	.+26     	; 0x3016 <vfprintf+0xa4>
    2ffc:	30 f4       	brcc	.+12     	; 0x300a <vfprintf+0x98>
    2ffe:	80 32       	cpi	r24, 0x20	; 32
    3000:	59 f0       	breq	.+22     	; 0x3018 <vfprintf+0xa6>
    3002:	83 32       	cpi	r24, 0x23	; 35
    3004:	69 f4       	brne	.+26     	; 0x3020 <vfprintf+0xae>
    3006:	20 61       	ori	r18, 0x10	; 16
    3008:	2c c0       	rjmp	.+88     	; 0x3062 <vfprintf+0xf0>
    300a:	8d 32       	cpi	r24, 0x2D	; 45
    300c:	39 f0       	breq	.+14     	; 0x301c <vfprintf+0xaa>
    300e:	80 33       	cpi	r24, 0x30	; 48
    3010:	39 f4       	brne	.+14     	; 0x3020 <vfprintf+0xae>
    3012:	21 60       	ori	r18, 0x01	; 1
    3014:	26 c0       	rjmp	.+76     	; 0x3062 <vfprintf+0xf0>
    3016:	22 60       	ori	r18, 0x02	; 2
    3018:	24 60       	ori	r18, 0x04	; 4
    301a:	23 c0       	rjmp	.+70     	; 0x3062 <vfprintf+0xf0>
    301c:	28 60       	ori	r18, 0x08	; 8
    301e:	21 c0       	rjmp	.+66     	; 0x3062 <vfprintf+0xf0>
    3020:	27 fd       	sbrc	r18, 7
    3022:	27 c0       	rjmp	.+78     	; 0x3072 <vfprintf+0x100>
    3024:	30 ed       	ldi	r19, 0xD0	; 208
    3026:	38 0f       	add	r19, r24
    3028:	3a 30       	cpi	r19, 0x0A	; 10
    302a:	78 f4       	brcc	.+30     	; 0x304a <vfprintf+0xd8>
    302c:	26 ff       	sbrs	r18, 6
    302e:	06 c0       	rjmp	.+12     	; 0x303c <vfprintf+0xca>
    3030:	fa e0       	ldi	r31, 0x0A	; 10
    3032:	5f 9e       	mul	r5, r31
    3034:	30 0d       	add	r19, r0
    3036:	11 24       	eor	r1, r1
    3038:	53 2e       	mov	r5, r19
    303a:	13 c0       	rjmp	.+38     	; 0x3062 <vfprintf+0xf0>
    303c:	8a e0       	ldi	r24, 0x0A	; 10
    303e:	38 9e       	mul	r3, r24
    3040:	30 0d       	add	r19, r0
    3042:	11 24       	eor	r1, r1
    3044:	33 2e       	mov	r3, r19
    3046:	20 62       	ori	r18, 0x20	; 32
    3048:	0c c0       	rjmp	.+24     	; 0x3062 <vfprintf+0xf0>
    304a:	8e 32       	cpi	r24, 0x2E	; 46
    304c:	21 f4       	brne	.+8      	; 0x3056 <vfprintf+0xe4>
    304e:	26 fd       	sbrc	r18, 6
    3050:	5f c1       	rjmp	.+702    	; 0x3310 <vfprintf+0x39e>
    3052:	20 64       	ori	r18, 0x40	; 64
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <vfprintf+0xf0>
    3056:	8c 36       	cpi	r24, 0x6C	; 108
    3058:	11 f4       	brne	.+4      	; 0x305e <vfprintf+0xec>
    305a:	20 68       	ori	r18, 0x80	; 128
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <vfprintf+0xf0>
    305e:	88 36       	cpi	r24, 0x68	; 104
    3060:	41 f4       	brne	.+16     	; 0x3072 <vfprintf+0x100>
    3062:	f6 01       	movw	r30, r12
    3064:	93 fd       	sbrc	r25, 3
    3066:	85 91       	lpm	r24, Z+
    3068:	93 ff       	sbrs	r25, 3
    306a:	81 91       	ld	r24, Z+
    306c:	6f 01       	movw	r12, r30
    306e:	81 11       	cpse	r24, r1
    3070:	c1 cf       	rjmp	.-126    	; 0x2ff4 <vfprintf+0x82>
    3072:	98 2f       	mov	r25, r24
    3074:	9f 7d       	andi	r25, 0xDF	; 223
    3076:	95 54       	subi	r25, 0x45	; 69
    3078:	93 30       	cpi	r25, 0x03	; 3
    307a:	28 f4       	brcc	.+10     	; 0x3086 <vfprintf+0x114>
    307c:	0c 5f       	subi	r16, 0xFC	; 252
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	ff e3       	ldi	r31, 0x3F	; 63
    3082:	f9 83       	std	Y+1, r31	; 0x01
    3084:	0d c0       	rjmp	.+26     	; 0x30a0 <vfprintf+0x12e>
    3086:	83 36       	cpi	r24, 0x63	; 99
    3088:	31 f0       	breq	.+12     	; 0x3096 <vfprintf+0x124>
    308a:	83 37       	cpi	r24, 0x73	; 115
    308c:	71 f0       	breq	.+28     	; 0x30aa <vfprintf+0x138>
    308e:	83 35       	cpi	r24, 0x53	; 83
    3090:	09 f0       	breq	.+2      	; 0x3094 <vfprintf+0x122>
    3092:	57 c0       	rjmp	.+174    	; 0x3142 <vfprintf+0x1d0>
    3094:	21 c0       	rjmp	.+66     	; 0x30d8 <vfprintf+0x166>
    3096:	f8 01       	movw	r30, r16
    3098:	80 81       	ld	r24, Z
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	0e 5f       	subi	r16, 0xFE	; 254
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	44 24       	eor	r4, r4
    30a2:	43 94       	inc	r4
    30a4:	51 2c       	mov	r5, r1
    30a6:	54 01       	movw	r10, r8
    30a8:	14 c0       	rjmp	.+40     	; 0x30d2 <vfprintf+0x160>
    30aa:	38 01       	movw	r6, r16
    30ac:	f2 e0       	ldi	r31, 0x02	; 2
    30ae:	6f 0e       	add	r6, r31
    30b0:	71 1c       	adc	r7, r1
    30b2:	f8 01       	movw	r30, r16
    30b4:	a0 80       	ld	r10, Z
    30b6:	b1 80       	ldd	r11, Z+1	; 0x01
    30b8:	26 ff       	sbrs	r18, 6
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <vfprintf+0x150>
    30bc:	65 2d       	mov	r22, r5
    30be:	70 e0       	ldi	r23, 0x00	; 0
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <vfprintf+0x154>
    30c2:	6f ef       	ldi	r22, 0xFF	; 255
    30c4:	7f ef       	ldi	r23, 0xFF	; 255
    30c6:	c5 01       	movw	r24, r10
    30c8:	2c 87       	std	Y+12, r18	; 0x0c
    30ca:	4c d1       	rcall	.+664    	; 0x3364 <strnlen>
    30cc:	2c 01       	movw	r4, r24
    30ce:	83 01       	movw	r16, r6
    30d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    30d2:	2f 77       	andi	r18, 0x7F	; 127
    30d4:	22 2e       	mov	r2, r18
    30d6:	16 c0       	rjmp	.+44     	; 0x3104 <vfprintf+0x192>
    30d8:	38 01       	movw	r6, r16
    30da:	f2 e0       	ldi	r31, 0x02	; 2
    30dc:	6f 0e       	add	r6, r31
    30de:	71 1c       	adc	r7, r1
    30e0:	f8 01       	movw	r30, r16
    30e2:	a0 80       	ld	r10, Z
    30e4:	b1 80       	ldd	r11, Z+1	; 0x01
    30e6:	26 ff       	sbrs	r18, 6
    30e8:	03 c0       	rjmp	.+6      	; 0x30f0 <vfprintf+0x17e>
    30ea:	65 2d       	mov	r22, r5
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <vfprintf+0x182>
    30f0:	6f ef       	ldi	r22, 0xFF	; 255
    30f2:	7f ef       	ldi	r23, 0xFF	; 255
    30f4:	c5 01       	movw	r24, r10
    30f6:	2c 87       	std	Y+12, r18	; 0x0c
    30f8:	2a d1       	rcall	.+596    	; 0x334e <strnlen_P>
    30fa:	2c 01       	movw	r4, r24
    30fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    30fe:	20 68       	ori	r18, 0x80	; 128
    3100:	22 2e       	mov	r2, r18
    3102:	83 01       	movw	r16, r6
    3104:	23 fc       	sbrc	r2, 3
    3106:	19 c0       	rjmp	.+50     	; 0x313a <vfprintf+0x1c8>
    3108:	83 2d       	mov	r24, r3
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	48 16       	cp	r4, r24
    310e:	59 06       	cpc	r5, r25
    3110:	a0 f4       	brcc	.+40     	; 0x313a <vfprintf+0x1c8>
    3112:	b7 01       	movw	r22, r14
    3114:	80 e2       	ldi	r24, 0x20	; 32
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	30 d1       	rcall	.+608    	; 0x337a <fputc>
    311a:	3a 94       	dec	r3
    311c:	f5 cf       	rjmp	.-22     	; 0x3108 <vfprintf+0x196>
    311e:	f5 01       	movw	r30, r10
    3120:	27 fc       	sbrc	r2, 7
    3122:	85 91       	lpm	r24, Z+
    3124:	27 fe       	sbrs	r2, 7
    3126:	81 91       	ld	r24, Z+
    3128:	5f 01       	movw	r10, r30
    312a:	b7 01       	movw	r22, r14
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	25 d1       	rcall	.+586    	; 0x337a <fputc>
    3130:	31 10       	cpse	r3, r1
    3132:	3a 94       	dec	r3
    3134:	f1 e0       	ldi	r31, 0x01	; 1
    3136:	4f 1a       	sub	r4, r31
    3138:	51 08       	sbc	r5, r1
    313a:	41 14       	cp	r4, r1
    313c:	51 04       	cpc	r5, r1
    313e:	79 f7       	brne	.-34     	; 0x311e <vfprintf+0x1ac>
    3140:	de c0       	rjmp	.+444    	; 0x32fe <vfprintf+0x38c>
    3142:	84 36       	cpi	r24, 0x64	; 100
    3144:	11 f0       	breq	.+4      	; 0x314a <vfprintf+0x1d8>
    3146:	89 36       	cpi	r24, 0x69	; 105
    3148:	31 f5       	brne	.+76     	; 0x3196 <vfprintf+0x224>
    314a:	f8 01       	movw	r30, r16
    314c:	27 ff       	sbrs	r18, 7
    314e:	07 c0       	rjmp	.+14     	; 0x315e <vfprintf+0x1ec>
    3150:	60 81       	ld	r22, Z
    3152:	71 81       	ldd	r23, Z+1	; 0x01
    3154:	82 81       	ldd	r24, Z+2	; 0x02
    3156:	93 81       	ldd	r25, Z+3	; 0x03
    3158:	0c 5f       	subi	r16, 0xFC	; 252
    315a:	1f 4f       	sbci	r17, 0xFF	; 255
    315c:	08 c0       	rjmp	.+16     	; 0x316e <vfprintf+0x1fc>
    315e:	60 81       	ld	r22, Z
    3160:	71 81       	ldd	r23, Z+1	; 0x01
    3162:	88 27       	eor	r24, r24
    3164:	77 fd       	sbrc	r23, 7
    3166:	80 95       	com	r24
    3168:	98 2f       	mov	r25, r24
    316a:	0e 5f       	subi	r16, 0xFE	; 254
    316c:	1f 4f       	sbci	r17, 0xFF	; 255
    316e:	2f 76       	andi	r18, 0x6F	; 111
    3170:	b2 2e       	mov	r11, r18
    3172:	97 ff       	sbrs	r25, 7
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <vfprintf+0x216>
    3176:	90 95       	com	r25
    3178:	80 95       	com	r24
    317a:	70 95       	com	r23
    317c:	61 95       	neg	r22
    317e:	7f 4f       	sbci	r23, 0xFF	; 255
    3180:	8f 4f       	sbci	r24, 0xFF	; 255
    3182:	9f 4f       	sbci	r25, 0xFF	; 255
    3184:	20 68       	ori	r18, 0x80	; 128
    3186:	b2 2e       	mov	r11, r18
    3188:	2a e0       	ldi	r18, 0x0A	; 10
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	a4 01       	movw	r20, r8
    318e:	27 d1       	rcall	.+590    	; 0x33de <__ultoa_invert>
    3190:	a8 2e       	mov	r10, r24
    3192:	a8 18       	sub	r10, r8
    3194:	43 c0       	rjmp	.+134    	; 0x321c <vfprintf+0x2aa>
    3196:	85 37       	cpi	r24, 0x75	; 117
    3198:	29 f4       	brne	.+10     	; 0x31a4 <vfprintf+0x232>
    319a:	2f 7e       	andi	r18, 0xEF	; 239
    319c:	b2 2e       	mov	r11, r18
    319e:	2a e0       	ldi	r18, 0x0A	; 10
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	25 c0       	rjmp	.+74     	; 0x31ee <vfprintf+0x27c>
    31a4:	f2 2f       	mov	r31, r18
    31a6:	f9 7f       	andi	r31, 0xF9	; 249
    31a8:	bf 2e       	mov	r11, r31
    31aa:	8f 36       	cpi	r24, 0x6F	; 111
    31ac:	c1 f0       	breq	.+48     	; 0x31de <vfprintf+0x26c>
    31ae:	18 f4       	brcc	.+6      	; 0x31b6 <vfprintf+0x244>
    31b0:	88 35       	cpi	r24, 0x58	; 88
    31b2:	79 f0       	breq	.+30     	; 0x31d2 <vfprintf+0x260>
    31b4:	ad c0       	rjmp	.+346    	; 0x3310 <vfprintf+0x39e>
    31b6:	80 37       	cpi	r24, 0x70	; 112
    31b8:	19 f0       	breq	.+6      	; 0x31c0 <vfprintf+0x24e>
    31ba:	88 37       	cpi	r24, 0x78	; 120
    31bc:	21 f0       	breq	.+8      	; 0x31c6 <vfprintf+0x254>
    31be:	a8 c0       	rjmp	.+336    	; 0x3310 <vfprintf+0x39e>
    31c0:	2f 2f       	mov	r18, r31
    31c2:	20 61       	ori	r18, 0x10	; 16
    31c4:	b2 2e       	mov	r11, r18
    31c6:	b4 fe       	sbrs	r11, 4
    31c8:	0d c0       	rjmp	.+26     	; 0x31e4 <vfprintf+0x272>
    31ca:	8b 2d       	mov	r24, r11
    31cc:	84 60       	ori	r24, 0x04	; 4
    31ce:	b8 2e       	mov	r11, r24
    31d0:	09 c0       	rjmp	.+18     	; 0x31e4 <vfprintf+0x272>
    31d2:	24 ff       	sbrs	r18, 4
    31d4:	0a c0       	rjmp	.+20     	; 0x31ea <vfprintf+0x278>
    31d6:	9f 2f       	mov	r25, r31
    31d8:	96 60       	ori	r25, 0x06	; 6
    31da:	b9 2e       	mov	r11, r25
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <vfprintf+0x278>
    31de:	28 e0       	ldi	r18, 0x08	; 8
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	05 c0       	rjmp	.+10     	; 0x31ee <vfprintf+0x27c>
    31e4:	20 e1       	ldi	r18, 0x10	; 16
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <vfprintf+0x27c>
    31ea:	20 e1       	ldi	r18, 0x10	; 16
    31ec:	32 e0       	ldi	r19, 0x02	; 2
    31ee:	f8 01       	movw	r30, r16
    31f0:	b7 fe       	sbrs	r11, 7
    31f2:	07 c0       	rjmp	.+14     	; 0x3202 <vfprintf+0x290>
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	0c 5f       	subi	r16, 0xFC	; 252
    31fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3200:	06 c0       	rjmp	.+12     	; 0x320e <vfprintf+0x29c>
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 5f       	subi	r16, 0xFE	; 254
    320c:	1f 4f       	sbci	r17, 0xFF	; 255
    320e:	a4 01       	movw	r20, r8
    3210:	e6 d0       	rcall	.+460    	; 0x33de <__ultoa_invert>
    3212:	a8 2e       	mov	r10, r24
    3214:	a8 18       	sub	r10, r8
    3216:	fb 2d       	mov	r31, r11
    3218:	ff 77       	andi	r31, 0x7F	; 127
    321a:	bf 2e       	mov	r11, r31
    321c:	b6 fe       	sbrs	r11, 6
    321e:	0b c0       	rjmp	.+22     	; 0x3236 <vfprintf+0x2c4>
    3220:	2b 2d       	mov	r18, r11
    3222:	2e 7f       	andi	r18, 0xFE	; 254
    3224:	a5 14       	cp	r10, r5
    3226:	50 f4       	brcc	.+20     	; 0x323c <vfprintf+0x2ca>
    3228:	b4 fe       	sbrs	r11, 4
    322a:	0a c0       	rjmp	.+20     	; 0x3240 <vfprintf+0x2ce>
    322c:	b2 fc       	sbrc	r11, 2
    322e:	08 c0       	rjmp	.+16     	; 0x3240 <vfprintf+0x2ce>
    3230:	2b 2d       	mov	r18, r11
    3232:	2e 7e       	andi	r18, 0xEE	; 238
    3234:	05 c0       	rjmp	.+10     	; 0x3240 <vfprintf+0x2ce>
    3236:	7a 2c       	mov	r7, r10
    3238:	2b 2d       	mov	r18, r11
    323a:	03 c0       	rjmp	.+6      	; 0x3242 <vfprintf+0x2d0>
    323c:	7a 2c       	mov	r7, r10
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <vfprintf+0x2d0>
    3240:	75 2c       	mov	r7, r5
    3242:	24 ff       	sbrs	r18, 4
    3244:	0d c0       	rjmp	.+26     	; 0x3260 <vfprintf+0x2ee>
    3246:	fe 01       	movw	r30, r28
    3248:	ea 0d       	add	r30, r10
    324a:	f1 1d       	adc	r31, r1
    324c:	80 81       	ld	r24, Z
    324e:	80 33       	cpi	r24, 0x30	; 48
    3250:	11 f4       	brne	.+4      	; 0x3256 <vfprintf+0x2e4>
    3252:	29 7e       	andi	r18, 0xE9	; 233
    3254:	09 c0       	rjmp	.+18     	; 0x3268 <vfprintf+0x2f6>
    3256:	22 ff       	sbrs	r18, 2
    3258:	06 c0       	rjmp	.+12     	; 0x3266 <vfprintf+0x2f4>
    325a:	73 94       	inc	r7
    325c:	73 94       	inc	r7
    325e:	04 c0       	rjmp	.+8      	; 0x3268 <vfprintf+0x2f6>
    3260:	82 2f       	mov	r24, r18
    3262:	86 78       	andi	r24, 0x86	; 134
    3264:	09 f0       	breq	.+2      	; 0x3268 <vfprintf+0x2f6>
    3266:	73 94       	inc	r7
    3268:	23 fd       	sbrc	r18, 3
    326a:	12 c0       	rjmp	.+36     	; 0x3290 <vfprintf+0x31e>
    326c:	20 ff       	sbrs	r18, 0
    326e:	06 c0       	rjmp	.+12     	; 0x327c <vfprintf+0x30a>
    3270:	5a 2c       	mov	r5, r10
    3272:	73 14       	cp	r7, r3
    3274:	18 f4       	brcc	.+6      	; 0x327c <vfprintf+0x30a>
    3276:	53 0c       	add	r5, r3
    3278:	57 18       	sub	r5, r7
    327a:	73 2c       	mov	r7, r3
    327c:	73 14       	cp	r7, r3
    327e:	60 f4       	brcc	.+24     	; 0x3298 <vfprintf+0x326>
    3280:	b7 01       	movw	r22, r14
    3282:	80 e2       	ldi	r24, 0x20	; 32
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	2c 87       	std	Y+12, r18	; 0x0c
    3288:	78 d0       	rcall	.+240    	; 0x337a <fputc>
    328a:	73 94       	inc	r7
    328c:	2c 85       	ldd	r18, Y+12	; 0x0c
    328e:	f6 cf       	rjmp	.-20     	; 0x327c <vfprintf+0x30a>
    3290:	73 14       	cp	r7, r3
    3292:	10 f4       	brcc	.+4      	; 0x3298 <vfprintf+0x326>
    3294:	37 18       	sub	r3, r7
    3296:	01 c0       	rjmp	.+2      	; 0x329a <vfprintf+0x328>
    3298:	31 2c       	mov	r3, r1
    329a:	24 ff       	sbrs	r18, 4
    329c:	11 c0       	rjmp	.+34     	; 0x32c0 <vfprintf+0x34e>
    329e:	b7 01       	movw	r22, r14
    32a0:	80 e3       	ldi	r24, 0x30	; 48
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	2c 87       	std	Y+12, r18	; 0x0c
    32a6:	69 d0       	rcall	.+210    	; 0x337a <fputc>
    32a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    32aa:	22 ff       	sbrs	r18, 2
    32ac:	16 c0       	rjmp	.+44     	; 0x32da <vfprintf+0x368>
    32ae:	21 ff       	sbrs	r18, 1
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <vfprintf+0x346>
    32b2:	88 e5       	ldi	r24, 0x58	; 88
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <vfprintf+0x34a>
    32b8:	88 e7       	ldi	r24, 0x78	; 120
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	b7 01       	movw	r22, r14
    32be:	0c c0       	rjmp	.+24     	; 0x32d8 <vfprintf+0x366>
    32c0:	82 2f       	mov	r24, r18
    32c2:	86 78       	andi	r24, 0x86	; 134
    32c4:	51 f0       	breq	.+20     	; 0x32da <vfprintf+0x368>
    32c6:	21 fd       	sbrc	r18, 1
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <vfprintf+0x35c>
    32ca:	80 e2       	ldi	r24, 0x20	; 32
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <vfprintf+0x35e>
    32ce:	8b e2       	ldi	r24, 0x2B	; 43
    32d0:	27 fd       	sbrc	r18, 7
    32d2:	8d e2       	ldi	r24, 0x2D	; 45
    32d4:	b7 01       	movw	r22, r14
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	50 d0       	rcall	.+160    	; 0x337a <fputc>
    32da:	a5 14       	cp	r10, r5
    32dc:	30 f4       	brcc	.+12     	; 0x32ea <vfprintf+0x378>
    32de:	b7 01       	movw	r22, r14
    32e0:	80 e3       	ldi	r24, 0x30	; 48
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	4a d0       	rcall	.+148    	; 0x337a <fputc>
    32e6:	5a 94       	dec	r5
    32e8:	f8 cf       	rjmp	.-16     	; 0x32da <vfprintf+0x368>
    32ea:	aa 94       	dec	r10
    32ec:	f4 01       	movw	r30, r8
    32ee:	ea 0d       	add	r30, r10
    32f0:	f1 1d       	adc	r31, r1
    32f2:	80 81       	ld	r24, Z
    32f4:	b7 01       	movw	r22, r14
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	40 d0       	rcall	.+128    	; 0x337a <fputc>
    32fa:	a1 10       	cpse	r10, r1
    32fc:	f6 cf       	rjmp	.-20     	; 0x32ea <vfprintf+0x378>
    32fe:	33 20       	and	r3, r3
    3300:	09 f4       	brne	.+2      	; 0x3304 <vfprintf+0x392>
    3302:	5d ce       	rjmp	.-838    	; 0x2fbe <vfprintf+0x4c>
    3304:	b7 01       	movw	r22, r14
    3306:	80 e2       	ldi	r24, 0x20	; 32
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	37 d0       	rcall	.+110    	; 0x337a <fputc>
    330c:	3a 94       	dec	r3
    330e:	f7 cf       	rjmp	.-18     	; 0x32fe <vfprintf+0x38c>
    3310:	f7 01       	movw	r30, r14
    3312:	86 81       	ldd	r24, Z+6	; 0x06
    3314:	97 81       	ldd	r25, Z+7	; 0x07
    3316:	02 c0       	rjmp	.+4      	; 0x331c <vfprintf+0x3aa>
    3318:	8f ef       	ldi	r24, 0xFF	; 255
    331a:	9f ef       	ldi	r25, 0xFF	; 255
    331c:	2c 96       	adiw	r28, 0x0c	; 12
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	df 91       	pop	r29
    332a:	cf 91       	pop	r28
    332c:	1f 91       	pop	r17
    332e:	0f 91       	pop	r16
    3330:	ff 90       	pop	r15
    3332:	ef 90       	pop	r14
    3334:	df 90       	pop	r13
    3336:	cf 90       	pop	r12
    3338:	bf 90       	pop	r11
    333a:	af 90       	pop	r10
    333c:	9f 90       	pop	r9
    333e:	8f 90       	pop	r8
    3340:	7f 90       	pop	r7
    3342:	6f 90       	pop	r6
    3344:	5f 90       	pop	r5
    3346:	4f 90       	pop	r4
    3348:	3f 90       	pop	r3
    334a:	2f 90       	pop	r2
    334c:	08 95       	ret

0000334e <strnlen_P>:
    334e:	fc 01       	movw	r30, r24
    3350:	05 90       	lpm	r0, Z+
    3352:	61 50       	subi	r22, 0x01	; 1
    3354:	70 40       	sbci	r23, 0x00	; 0
    3356:	01 10       	cpse	r0, r1
    3358:	d8 f7       	brcc	.-10     	; 0x3350 <strnlen_P+0x2>
    335a:	80 95       	com	r24
    335c:	90 95       	com	r25
    335e:	8e 0f       	add	r24, r30
    3360:	9f 1f       	adc	r25, r31
    3362:	08 95       	ret

00003364 <strnlen>:
    3364:	fc 01       	movw	r30, r24
    3366:	61 50       	subi	r22, 0x01	; 1
    3368:	70 40       	sbci	r23, 0x00	; 0
    336a:	01 90       	ld	r0, Z+
    336c:	01 10       	cpse	r0, r1
    336e:	d8 f7       	brcc	.-10     	; 0x3366 <strnlen+0x2>
    3370:	80 95       	com	r24
    3372:	90 95       	com	r25
    3374:	8e 0f       	add	r24, r30
    3376:	9f 1f       	adc	r25, r31
    3378:	08 95       	ret

0000337a <fputc>:
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	18 2f       	mov	r17, r24
    3384:	09 2f       	mov	r16, r25
    3386:	eb 01       	movw	r28, r22
    3388:	8b 81       	ldd	r24, Y+3	; 0x03
    338a:	81 fd       	sbrc	r24, 1
    338c:	03 c0       	rjmp	.+6      	; 0x3394 <fputc+0x1a>
    338e:	8f ef       	ldi	r24, 0xFF	; 255
    3390:	9f ef       	ldi	r25, 0xFF	; 255
    3392:	20 c0       	rjmp	.+64     	; 0x33d4 <fputc+0x5a>
    3394:	82 ff       	sbrs	r24, 2
    3396:	10 c0       	rjmp	.+32     	; 0x33b8 <fputc+0x3e>
    3398:	4e 81       	ldd	r20, Y+6	; 0x06
    339a:	5f 81       	ldd	r21, Y+7	; 0x07
    339c:	2c 81       	ldd	r18, Y+4	; 0x04
    339e:	3d 81       	ldd	r19, Y+5	; 0x05
    33a0:	42 17       	cp	r20, r18
    33a2:	53 07       	cpc	r21, r19
    33a4:	7c f4       	brge	.+30     	; 0x33c4 <fputc+0x4a>
    33a6:	e8 81       	ld	r30, Y
    33a8:	f9 81       	ldd	r31, Y+1	; 0x01
    33aa:	9f 01       	movw	r18, r30
    33ac:	2f 5f       	subi	r18, 0xFF	; 255
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	39 83       	std	Y+1, r19	; 0x01
    33b2:	28 83       	st	Y, r18
    33b4:	10 83       	st	Z, r17
    33b6:	06 c0       	rjmp	.+12     	; 0x33c4 <fputc+0x4a>
    33b8:	e8 85       	ldd	r30, Y+8	; 0x08
    33ba:	f9 85       	ldd	r31, Y+9	; 0x09
    33bc:	81 2f       	mov	r24, r17
    33be:	09 95       	icall
    33c0:	89 2b       	or	r24, r25
    33c2:	29 f7       	brne	.-54     	; 0x338e <fputc+0x14>
    33c4:	2e 81       	ldd	r18, Y+6	; 0x06
    33c6:	3f 81       	ldd	r19, Y+7	; 0x07
    33c8:	2f 5f       	subi	r18, 0xFF	; 255
    33ca:	3f 4f       	sbci	r19, 0xFF	; 255
    33cc:	3f 83       	std	Y+7, r19	; 0x07
    33ce:	2e 83       	std	Y+6, r18	; 0x06
    33d0:	81 2f       	mov	r24, r17
    33d2:	90 2f       	mov	r25, r16
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	08 95       	ret

000033de <__ultoa_invert>:
    33de:	fa 01       	movw	r30, r20
    33e0:	aa 27       	eor	r26, r26
    33e2:	28 30       	cpi	r18, 0x08	; 8
    33e4:	51 f1       	breq	.+84     	; 0x343a <__ultoa_invert+0x5c>
    33e6:	20 31       	cpi	r18, 0x10	; 16
    33e8:	81 f1       	breq	.+96     	; 0x344a <__ultoa_invert+0x6c>
    33ea:	e8 94       	clt
    33ec:	6f 93       	push	r22
    33ee:	6e 7f       	andi	r22, 0xFE	; 254
    33f0:	6e 5f       	subi	r22, 0xFE	; 254
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	8f 4f       	sbci	r24, 0xFF	; 255
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	af 4f       	sbci	r26, 0xFF	; 255
    33fa:	b1 e0       	ldi	r27, 0x01	; 1
    33fc:	3e d0       	rcall	.+124    	; 0x347a <__ultoa_invert+0x9c>
    33fe:	b4 e0       	ldi	r27, 0x04	; 4
    3400:	3c d0       	rcall	.+120    	; 0x347a <__ultoa_invert+0x9c>
    3402:	67 0f       	add	r22, r23
    3404:	78 1f       	adc	r23, r24
    3406:	89 1f       	adc	r24, r25
    3408:	9a 1f       	adc	r25, r26
    340a:	a1 1d       	adc	r26, r1
    340c:	68 0f       	add	r22, r24
    340e:	79 1f       	adc	r23, r25
    3410:	8a 1f       	adc	r24, r26
    3412:	91 1d       	adc	r25, r1
    3414:	a1 1d       	adc	r26, r1
    3416:	6a 0f       	add	r22, r26
    3418:	71 1d       	adc	r23, r1
    341a:	81 1d       	adc	r24, r1
    341c:	91 1d       	adc	r25, r1
    341e:	a1 1d       	adc	r26, r1
    3420:	20 d0       	rcall	.+64     	; 0x3462 <__ultoa_invert+0x84>
    3422:	09 f4       	brne	.+2      	; 0x3426 <__ultoa_invert+0x48>
    3424:	68 94       	set
    3426:	3f 91       	pop	r19
    3428:	2a e0       	ldi	r18, 0x0A	; 10
    342a:	26 9f       	mul	r18, r22
    342c:	11 24       	eor	r1, r1
    342e:	30 19       	sub	r19, r0
    3430:	30 5d       	subi	r19, 0xD0	; 208
    3432:	31 93       	st	Z+, r19
    3434:	de f6       	brtc	.-74     	; 0x33ec <__ultoa_invert+0xe>
    3436:	cf 01       	movw	r24, r30
    3438:	08 95       	ret
    343a:	46 2f       	mov	r20, r22
    343c:	47 70       	andi	r20, 0x07	; 7
    343e:	40 5d       	subi	r20, 0xD0	; 208
    3440:	41 93       	st	Z+, r20
    3442:	b3 e0       	ldi	r27, 0x03	; 3
    3444:	0f d0       	rcall	.+30     	; 0x3464 <__ultoa_invert+0x86>
    3446:	c9 f7       	brne	.-14     	; 0x343a <__ultoa_invert+0x5c>
    3448:	f6 cf       	rjmp	.-20     	; 0x3436 <__ultoa_invert+0x58>
    344a:	46 2f       	mov	r20, r22
    344c:	4f 70       	andi	r20, 0x0F	; 15
    344e:	40 5d       	subi	r20, 0xD0	; 208
    3450:	4a 33       	cpi	r20, 0x3A	; 58
    3452:	18 f0       	brcs	.+6      	; 0x345a <__ultoa_invert+0x7c>
    3454:	49 5d       	subi	r20, 0xD9	; 217
    3456:	31 fd       	sbrc	r19, 1
    3458:	40 52       	subi	r20, 0x20	; 32
    345a:	41 93       	st	Z+, r20
    345c:	02 d0       	rcall	.+4      	; 0x3462 <__ultoa_invert+0x84>
    345e:	a9 f7       	brne	.-22     	; 0x344a <__ultoa_invert+0x6c>
    3460:	ea cf       	rjmp	.-44     	; 0x3436 <__ultoa_invert+0x58>
    3462:	b4 e0       	ldi	r27, 0x04	; 4
    3464:	a6 95       	lsr	r26
    3466:	97 95       	ror	r25
    3468:	87 95       	ror	r24
    346a:	77 95       	ror	r23
    346c:	67 95       	ror	r22
    346e:	ba 95       	dec	r27
    3470:	c9 f7       	brne	.-14     	; 0x3464 <__ultoa_invert+0x86>
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	61 05       	cpc	r22, r1
    3476:	71 05       	cpc	r23, r1
    3478:	08 95       	ret
    347a:	9b 01       	movw	r18, r22
    347c:	ac 01       	movw	r20, r24
    347e:	0a 2e       	mov	r0, r26
    3480:	06 94       	lsr	r0
    3482:	57 95       	ror	r21
    3484:	47 95       	ror	r20
    3486:	37 95       	ror	r19
    3488:	27 95       	ror	r18
    348a:	ba 95       	dec	r27
    348c:	c9 f7       	brne	.-14     	; 0x3480 <__ultoa_invert+0xa2>
    348e:	62 0f       	add	r22, r18
    3490:	73 1f       	adc	r23, r19
    3492:	84 1f       	adc	r24, r20
    3494:	95 1f       	adc	r25, r21
    3496:	a0 1d       	adc	r26, r0
    3498:	08 95       	ret

0000349a <__divmodsi4>:
    349a:	05 2e       	mov	r0, r21
    349c:	97 fb       	bst	r25, 7
    349e:	16 f4       	brtc	.+4      	; 0x34a4 <__divmodsi4+0xa>
    34a0:	00 94       	com	r0
    34a2:	0f d0       	rcall	.+30     	; 0x34c2 <__negsi2>
    34a4:	57 fd       	sbrc	r21, 7
    34a6:	05 d0       	rcall	.+10     	; 0x34b2 <__divmodsi4_neg2>
    34a8:	24 d0       	rcall	.+72     	; 0x34f2 <__udivmodsi4>
    34aa:	07 fc       	sbrc	r0, 7
    34ac:	02 d0       	rcall	.+4      	; 0x34b2 <__divmodsi4_neg2>
    34ae:	46 f4       	brtc	.+16     	; 0x34c0 <__divmodsi4_exit>
    34b0:	08 c0       	rjmp	.+16     	; 0x34c2 <__negsi2>

000034b2 <__divmodsi4_neg2>:
    34b2:	50 95       	com	r21
    34b4:	40 95       	com	r20
    34b6:	30 95       	com	r19
    34b8:	21 95       	neg	r18
    34ba:	3f 4f       	sbci	r19, 0xFF	; 255
    34bc:	4f 4f       	sbci	r20, 0xFF	; 255
    34be:	5f 4f       	sbci	r21, 0xFF	; 255

000034c0 <__divmodsi4_exit>:
    34c0:	08 95       	ret

000034c2 <__negsi2>:
    34c2:	90 95       	com	r25
    34c4:	80 95       	com	r24
    34c6:	70 95       	com	r23
    34c8:	61 95       	neg	r22
    34ca:	7f 4f       	sbci	r23, 0xFF	; 255
    34cc:	8f 4f       	sbci	r24, 0xFF	; 255
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	08 95       	ret

000034d2 <__muluhisi3>:
    34d2:	e3 da       	rcall	.-2618   	; 0x2a9a <__umulhisi3>
    34d4:	a5 9f       	mul	r26, r21
    34d6:	90 0d       	add	r25, r0
    34d8:	b4 9f       	mul	r27, r20
    34da:	90 0d       	add	r25, r0
    34dc:	a4 9f       	mul	r26, r20
    34de:	80 0d       	add	r24, r0
    34e0:	91 1d       	adc	r25, r1
    34e2:	11 24       	eor	r1, r1
    34e4:	08 95       	ret

000034e6 <__mulshisi3>:
    34e6:	b7 ff       	sbrs	r27, 7
    34e8:	f4 cf       	rjmp	.-24     	; 0x34d2 <__muluhisi3>

000034ea <__mulohisi3>:
    34ea:	f3 df       	rcall	.-26     	; 0x34d2 <__muluhisi3>
    34ec:	82 1b       	sub	r24, r18
    34ee:	93 0b       	sbc	r25, r19
    34f0:	08 95       	ret

000034f2 <__udivmodsi4>:
    34f2:	a1 e2       	ldi	r26, 0x21	; 33
    34f4:	1a 2e       	mov	r1, r26
    34f6:	aa 1b       	sub	r26, r26
    34f8:	bb 1b       	sub	r27, r27
    34fa:	fd 01       	movw	r30, r26
    34fc:	0d c0       	rjmp	.+26     	; 0x3518 <__udivmodsi4_ep>

000034fe <__udivmodsi4_loop>:
    34fe:	aa 1f       	adc	r26, r26
    3500:	bb 1f       	adc	r27, r27
    3502:	ee 1f       	adc	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	a2 17       	cp	r26, r18
    3508:	b3 07       	cpc	r27, r19
    350a:	e4 07       	cpc	r30, r20
    350c:	f5 07       	cpc	r31, r21
    350e:	20 f0       	brcs	.+8      	; 0x3518 <__udivmodsi4_ep>
    3510:	a2 1b       	sub	r26, r18
    3512:	b3 0b       	sbc	r27, r19
    3514:	e4 0b       	sbc	r30, r20
    3516:	f5 0b       	sbc	r31, r21

00003518 <__udivmodsi4_ep>:
    3518:	66 1f       	adc	r22, r22
    351a:	77 1f       	adc	r23, r23
    351c:	88 1f       	adc	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	1a 94       	dec	r1
    3522:	69 f7       	brne	.-38     	; 0x34fe <__udivmodsi4_loop>
    3524:	60 95       	com	r22
    3526:	70 95       	com	r23
    3528:	80 95       	com	r24
    352a:	90 95       	com	r25
    352c:	9b 01       	movw	r18, r22
    352e:	ac 01       	movw	r20, r24
    3530:	bd 01       	movw	r22, r26
    3532:	cf 01       	movw	r24, r30
    3534:	08 95       	ret

00003536 <_exit>:
    3536:	f8 94       	cli

00003538 <__stop_program>:
    3538:	ff cf       	rjmp	.-2      	; 0x3538 <__stop_program>
